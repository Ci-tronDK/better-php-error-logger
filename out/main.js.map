{
  "version": 3,
  "sources": ["../node_modules/php-parser/src/lexer/attribute.js", "../node_modules/php-parser/src/lexer/comments.js", "../node_modules/php-parser/src/lexer/initial.js", "../node_modules/php-parser/src/lexer/numbers.js", "../node_modules/php-parser/src/lexer/property.js", "../node_modules/php-parser/src/lexer/scripting.js", "../node_modules/php-parser/src/lexer/strings.js", "../node_modules/php-parser/src/lexer/tokens.js", "../node_modules/php-parser/src/lexer/utils.js", "../node_modules/php-parser/src/lexer.js", "../node_modules/php-parser/src/ast/position.js", "../node_modules/php-parser/src/parser/array.js", "../node_modules/php-parser/src/parser/class.js", "../node_modules/php-parser/src/parser/comment.js", "../node_modules/php-parser/src/parser/expr.js", "../node_modules/php-parser/src/parser/enum.js", "../node_modules/php-parser/src/parser/function.js", "../node_modules/php-parser/src/parser/if.js", "../node_modules/php-parser/src/parser/loops.js", "../node_modules/php-parser/src/parser/main.js", "../node_modules/php-parser/src/parser/namespace.js", "../node_modules/php-parser/src/parser/scalar.js", "../node_modules/php-parser/src/parser/statement.js", "../node_modules/php-parser/src/parser/switch.js", "../node_modules/php-parser/src/parser/try.js", "../node_modules/php-parser/src/parser/utils.js", "../node_modules/php-parser/src/parser/variable.js", "../node_modules/php-parser/src/parser.js", "../node_modules/php-parser/src/tokens.js", "../node_modules/php-parser/src/ast/location.js", "../node_modules/php-parser/src/ast/node.js", "../node_modules/php-parser/src/ast/expression.js", "../node_modules/php-parser/src/ast/array.js", "../node_modules/php-parser/src/ast/arrowfunc.js", "../node_modules/php-parser/src/ast/assign.js", "../node_modules/php-parser/src/ast/assignref.js", "../node_modules/php-parser/src/ast/attribute.js", "../node_modules/php-parser/src/ast/attrgroup.js", "../node_modules/php-parser/src/ast/operation.js", "../node_modules/php-parser/src/ast/bin.js", "../node_modules/php-parser/src/ast/statement.js", "../node_modules/php-parser/src/ast/block.js", "../node_modules/php-parser/src/ast/literal.js", "../node_modules/php-parser/src/ast/boolean.js", "../node_modules/php-parser/src/ast/break.js", "../node_modules/php-parser/src/ast/byref.js", "../node_modules/php-parser/src/ast/call.js", "../node_modules/php-parser/src/ast/case.js", "../node_modules/php-parser/src/ast/cast.js", "../node_modules/php-parser/src/ast/catch.js", "../node_modules/php-parser/src/ast/declaration.js", "../node_modules/php-parser/src/ast/class.js", "../node_modules/php-parser/src/ast/constantstatement.js", "../node_modules/php-parser/src/ast/classconstant.js", "../node_modules/php-parser/src/ast/clone.js", "../node_modules/php-parser/src/ast/closure.js", "../node_modules/php-parser/src/ast/comment.js", "../node_modules/php-parser/src/ast/commentblock.js", "../node_modules/php-parser/src/ast/commentline.js", "../node_modules/php-parser/src/ast/constant.js", "../node_modules/php-parser/src/ast/continue.js", "../node_modules/php-parser/src/ast/declare.js", "../node_modules/php-parser/src/ast/declaredirective.js", "../node_modules/php-parser/src/ast/do.js", "../node_modules/php-parser/src/ast/echo.js", "../node_modules/php-parser/src/ast/empty.js", "../node_modules/php-parser/src/ast/encapsed.js", "../node_modules/php-parser/src/ast/encapsedpart.js", "../node_modules/php-parser/src/ast/entry.js", "../node_modules/php-parser/src/ast/enum.js", "../node_modules/php-parser/src/ast/enumcase.js", "../node_modules/php-parser/src/ast/error.js", "../node_modules/php-parser/src/ast/eval.js", "../node_modules/php-parser/src/ast/exit.js", "../node_modules/php-parser/src/ast/expressionstatement.js", "../node_modules/php-parser/src/ast/for.js", "../node_modules/php-parser/src/ast/foreach.js", "../node_modules/php-parser/src/ast/function.js", "../node_modules/php-parser/src/ast/global.js", "../node_modules/php-parser/src/ast/goto.js", "../node_modules/php-parser/src/ast/halt.js", "../node_modules/php-parser/src/ast/identifier.js", "../node_modules/php-parser/src/ast/if.js", "../node_modules/php-parser/src/ast/include.js", "../node_modules/php-parser/src/ast/inline.js", "../node_modules/php-parser/src/ast/interface.js", "../node_modules/php-parser/src/ast/intersectiontype.js", "../node_modules/php-parser/src/ast/isset.js", "../node_modules/php-parser/src/ast/label.js", "../node_modules/php-parser/src/ast/list.js", "../node_modules/php-parser/src/ast/lookup.js", "../node_modules/php-parser/src/ast/magic.js", "../node_modules/php-parser/src/ast/match.js", "../node_modules/php-parser/src/ast/matcharm.js", "../node_modules/php-parser/src/ast/method.js", "../node_modules/php-parser/src/ast/reference.js", "../node_modules/php-parser/src/ast/name.js", "../node_modules/php-parser/src/ast/namespace.js", "../node_modules/php-parser/src/ast/namedargument.js", "../node_modules/php-parser/src/ast/new.js", "../node_modules/php-parser/src/ast/noop.js", "../node_modules/php-parser/src/ast/nowdoc.js", "../node_modules/php-parser/src/ast/nullkeyword.js", "../node_modules/php-parser/src/ast/nullsafepropertylookup.js", "../node_modules/php-parser/src/ast/number.js", "../node_modules/php-parser/src/ast/offsetlookup.js", "../node_modules/php-parser/src/ast/parameter.js", "../node_modules/php-parser/src/ast/parentreference.js", "../node_modules/php-parser/src/ast/post.js", "../node_modules/php-parser/src/ast/pre.js", "../node_modules/php-parser/src/ast/print.js", "../node_modules/php-parser/src/ast/program.js", "../node_modules/php-parser/src/ast/property.js", "../node_modules/php-parser/src/ast/propertylookup.js", "../node_modules/php-parser/src/ast/propertystatement.js", "../node_modules/php-parser/src/ast/retif.js", "../node_modules/php-parser/src/ast/return.js", "../node_modules/php-parser/src/ast/selfreference.js", "../node_modules/php-parser/src/ast/silent.js", "../node_modules/php-parser/src/ast/static.js", "../node_modules/php-parser/src/ast/staticvariable.js", "../node_modules/php-parser/src/ast/staticlookup.js", "../node_modules/php-parser/src/ast/staticreference.js", "../node_modules/php-parser/src/ast/string.js", "../node_modules/php-parser/src/ast/switch.js", "../node_modules/php-parser/src/ast/throw.js", "../node_modules/php-parser/src/ast/trait.js", "../node_modules/php-parser/src/ast/traitalias.js", "../node_modules/php-parser/src/ast/traitprecedence.js", "../node_modules/php-parser/src/ast/traituse.js", "../node_modules/php-parser/src/ast/try.js", "../node_modules/php-parser/src/ast/typereference.js", "../node_modules/php-parser/src/ast/unary.js", "../node_modules/php-parser/src/ast/uniontype.js", "../node_modules/php-parser/src/ast/unset.js", "../node_modules/php-parser/src/ast/usegroup.js", "../node_modules/php-parser/src/ast/useitem.js", "../node_modules/php-parser/src/ast/variable.js", "../node_modules/php-parser/src/ast/variadic.js", "../node_modules/php-parser/src/ast/variadicplaceholder.js", "../node_modules/php-parser/src/ast/while.js", "../node_modules/php-parser/src/ast/yield.js", "../node_modules/php-parser/src/ast/yieldfrom.js", "../node_modules/php-parser/src/ast.js", "../node_modules/php-parser/src/index.js", "../extension.ts", "../deleteError_logs.ts", "../runTheFunctionBasedOnShortcut.ts", "../symbolFinderLoop.ts", "../getIndentation.ts", "../isBalanced.ts", "../getSelectionType.ts"],
  "sourcesContent": ["/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  attributeIndex: 0,\n  attributeListDepth: {},\n  matchST_ATTRIBUTE: function () {\n    let ch = this.input();\n    if (this.is_WHITESPACE()) {\n      do {\n        ch = this.input();\n      } while (this.is_WHITESPACE());\n      this.unput(1);\n      return null;\n    }\n    switch (ch) {\n      case \"]\":\n        if (this.attributeListDepth[this.attributeIndex] === 0) {\n          delete this.attributeListDepth[this.attributeIndex];\n          this.attributeIndex--;\n          this.popState();\n        } else {\n          /* istanbul ignore next */\n          this.attributeListDepth[this.attributeIndex]--;\n        }\n        return \"]\";\n      case \"(\":\n      case \")\":\n      case \":\":\n      case \"=\":\n      case \"|\":\n      case \"&\":\n      case \"^\":\n      case \"-\":\n      case \"+\":\n      case \"*\":\n      case \"%\":\n      case \"~\":\n      case \"<\":\n      case \">\":\n      case \"!\":\n        return this.consume_TOKEN();\n      case \"[\":\n        this.attributeListDepth[this.attributeIndex]++;\n        return \"[\";\n      case \",\":\n        return \",\";\n      case '\"':\n        return this.ST_DOUBLE_QUOTES();\n      case \"'\":\n        return this.T_CONSTANT_ENCAPSED_STRING();\n      case \"/\":\n        if (this._input[this.offset] === \"/\") {\n          return this.T_COMMENT();\n        } else if (this._input[this.offset] === \"*\") {\n          this.input();\n          return this.T_DOC_COMMENT();\n        } else {\n          return this.consume_TOKEN();\n        }\n    }\n    if (this.is_LABEL_START() || ch === \"\\\\\") {\n      while (this.offset < this.size) {\n        const ch = this.input();\n        if (!(this.is_LABEL() || ch === \"\\\\\")) {\n          if (ch) this.unput(1);\n          break;\n        }\n      }\n      return this.T_STRING();\n    } else if (this.is_NUM()) {\n      return this.consume_NUM();\n    }\n\n    /* istanbul ignore next */\n    throw new Error(\n      `Bad terminal sequence \"${ch}\" at line ${this.yylineno} (offset ${this.offset})`\n    );\n  },\n};\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /*\n   * Reads a single line comment\n   */\n  T_COMMENT: function () {\n    while (this.offset < this.size) {\n      const ch = this.input();\n      if (ch === \"\\n\" || ch === \"\\r\") {\n        return this.tok.T_COMMENT;\n      } else if (\n        ch === \"?\" &&\n        !this.aspTagMode &&\n        this._input[this.offset] === \">\"\n      ) {\n        this.unput(1);\n        return this.tok.T_COMMENT;\n      } else if (\n        ch === \"%\" &&\n        this.aspTagMode &&\n        this._input[this.offset] === \">\"\n      ) {\n        this.unput(1);\n        return this.tok.T_COMMENT;\n      }\n    }\n    return this.tok.T_COMMENT;\n  },\n  /*\n   * Behaviour : https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l#L1927\n   */\n  T_DOC_COMMENT: function () {\n    let ch = this.input();\n    let token = this.tok.T_COMMENT;\n    if (ch === \"*\") {\n      // started with '/*' , check is next is '*'\n      ch = this.input();\n      if (this.is_WHITESPACE()) {\n        // check if next is WHITESPACE\n        token = this.tok.T_DOC_COMMENT;\n      }\n      if (ch === \"/\") {\n        return token;\n      } else {\n        this.unput(1); // reset\n      }\n    }\n    while (this.offset < this.size) {\n      ch = this.input();\n      if (ch === \"*\" && this._input[this.offset] === \"/\") {\n        this.input();\n        break;\n      }\n    }\n    return token;\n  },\n};\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  nextINITIAL: function () {\n    if (\n      this.conditionStack.length > 1 &&\n      this.conditionStack[this.conditionStack.length - 1] === \"INITIAL\"\n    ) {\n      // Return to HEREDOC/ST_DOUBLE_QUOTES mode\n      this.popState();\n    } else {\n      this.begin(\"ST_IN_SCRIPTING\");\n    }\n    return this;\n  },\n  matchINITIAL: function () {\n    while (this.offset < this.size) {\n      let ch = this.input();\n      if (ch == \"<\") {\n        ch = this.ahead(1);\n        if (ch == \"?\") {\n          if (this.tryMatch(\"?=\")) {\n            this.unput(1)\n              .appendToken(this.tok.T_OPEN_TAG_WITH_ECHO, 3)\n              .nextINITIAL();\n            break;\n          } else if (this.tryMatchCaseless(\"?php\")) {\n            ch = this._input[this.offset + 4];\n            if (ch === \" \" || ch === \"\\t\" || ch === \"\\n\" || ch === \"\\r\") {\n              this.unput(1).appendToken(this.tok.T_OPEN_TAG, 6).nextINITIAL();\n              break;\n            }\n          }\n          if (this.short_tags) {\n            this.unput(1).appendToken(this.tok.T_OPEN_TAG, 2).nextINITIAL();\n            break;\n          }\n        } else if (this.asp_tags && ch == \"%\") {\n          if (this.tryMatch(\"%=\")) {\n            this.aspTagMode = true;\n            this.unput(1)\n              .appendToken(this.tok.T_OPEN_TAG_WITH_ECHO, 3)\n              .nextINITIAL();\n            break;\n          } else {\n            this.aspTagMode = true;\n            this.unput(1).appendToken(this.tok.T_OPEN_TAG, 2).nextINITIAL();\n            break;\n          }\n        }\n      }\n    }\n    if (this.yytext.length > 0) {\n      return this.tok.T_INLINE_HTML;\n    } else {\n      return false;\n    }\n  },\n};\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\n/* istanbul ignore else  */\nlet MAX_LENGTH_OF_LONG = 10;\nlet long_min_digits = \"2147483648\";\nif (process.arch == \"x64\") {\n  MAX_LENGTH_OF_LONG = 19;\n  long_min_digits = \"9223372036854775808\";\n}\n\nmodule.exports = {\n  consume_NUM: function () {\n    let ch = this.yytext[0];\n    let hasPoint = ch === \".\";\n    if (ch === \"0\") {\n      ch = this.input();\n      // check if hexa\n      if (ch === \"x\" || ch === \"X\") {\n        ch = this.input();\n        if (ch !== \"_\" && this.is_HEX()) {\n          return this.consume_HNUM();\n        } else {\n          this.unput(ch ? 2 : 1);\n        }\n        // check binary notation\n      } else if (ch === \"b\" || ch === \"B\") {\n        ch = this.input();\n        if ((ch !== \"_\" && ch === \"0\") || ch === \"1\") {\n          return this.consume_BNUM();\n        } else {\n          this.unput(ch ? 2 : 1);\n        }\n      } else if (ch === \"o\" || ch === \"O\") {\n        ch = this.input();\n        if (ch !== \"_\" && this.is_OCTAL()) {\n          return this.consume_ONUM();\n        } else {\n          this.unput(ch ? 2 : 1);\n        }\n      } else if (!this.is_NUM()) {\n        if (ch) this.unput(1);\n      }\n    }\n\n    while (this.offset < this.size) {\n      const prev = ch;\n      ch = this.input();\n\n      if (ch === \"_\") {\n        if (prev === \"_\") {\n          // restriction : next to underscore / 1__1;\n          this.unput(2); // keep 1\n          break;\n        }\n        if (prev === \".\") {\n          // next to decimal point  \"1._0\"\n          this.unput(1); // keep 1.\n          break;\n        }\n        if (prev === \"e\" || prev === \"E\") {\n          // next to e \"1e_10\"\n          this.unput(2); // keep 1\n          break;\n        }\n      } else if (ch === \".\") {\n        if (hasPoint) {\n          // no multiple points \"1.0.5\"\n          this.unput(1); // keep 1.0\n          break;\n        }\n        if (prev === \"_\") {\n          // next to decimal point  \"1_.0\"\n          this.unput(2); // keep 1\n          break;\n        }\n        hasPoint = true;\n        continue;\n      } else if (ch === \"e\" || ch === \"E\") {\n        if (prev === \"_\") {\n          // next to e \"1_e10\"\n          this.unput(1);\n          break;\n        }\n        let undo = 2;\n        ch = this.input();\n        if (ch === \"+\" || ch === \"-\") {\n          // 1e-5\n          undo = 3;\n          ch = this.input();\n        }\n        if (this.is_NUM_START()) {\n          this.consume_LNUM();\n          return this.tok.T_DNUMBER;\n        }\n        this.unput(ch ? undo : undo - 1); // keep only 1\n        break;\n      }\n\n      if (!this.is_NUM()) {\n        // example : 10.0a\n        if (ch) this.unput(1); // keep 10.0\n        break;\n      }\n    }\n\n    if (hasPoint) {\n      return this.tok.T_DNUMBER;\n    } else if (this.yytext.length < MAX_LENGTH_OF_LONG - 1) {\n      return this.tok.T_LNUMBER;\n    } else {\n      if (\n        this.yytext.length < MAX_LENGTH_OF_LONG ||\n        (this.yytext.length == MAX_LENGTH_OF_LONG &&\n          this.yytext < long_min_digits)\n      ) {\n        return this.tok.T_LNUMBER;\n      }\n      return this.tok.T_DNUMBER;\n    }\n  },\n  // read hexa\n  consume_HNUM: function () {\n    while (this.offset < this.size) {\n      const ch = this.input();\n      if (!this.is_HEX()) {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n    return this.tok.T_LNUMBER;\n  },\n  // read a generic number\n  consume_LNUM: function () {\n    while (this.offset < this.size) {\n      const ch = this.input();\n      if (!this.is_NUM()) {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n    return this.tok.T_LNUMBER;\n  },\n  // read binary\n  consume_BNUM: function () {\n    let ch;\n    while (this.offset < this.size) {\n      ch = this.input();\n      if (ch !== \"0\" && ch !== \"1\" && ch !== \"_\") {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n    return this.tok.T_LNUMBER;\n  },\n  // read an octal number\n  consume_ONUM: function () {\n    while (this.offset < this.size) {\n      const ch = this.input();\n      if (!this.is_OCTAL()) {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n    return this.tok.T_LNUMBER;\n  },\n};\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  matchST_LOOKING_FOR_PROPERTY: function () {\n    let ch = this.input();\n    if (ch === \"-\") {\n      ch = this.input();\n      if (ch === \">\") {\n        // https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l#L1296\n        return this.tok.T_OBJECT_OPERATOR;\n      }\n      if (ch) this.unput(1);\n    } else if (this.is_WHITESPACE()) {\n      return this.tok.T_WHITESPACE;\n    } else if (this.is_LABEL_START()) {\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l#L1300\n      this.consume_LABEL();\n      this.popState();\n      return this.tok.T_STRING;\n    }\n    // https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l#L1306\n    this.popState();\n    if (ch) this.unput(1);\n    return false;\n  },\n  matchST_LOOKING_FOR_VARNAME: function () {\n    let ch = this.input();\n\n    // SHIFT STATE\n    this.popState();\n    this.begin(\"ST_IN_SCRIPTING\");\n\n    if (this.is_LABEL_START()) {\n      this.consume_LABEL();\n      ch = this.input();\n      if (ch === \"[\" || ch === \"}\") {\n        this.unput(1);\n        return this.tok.T_STRING_VARNAME;\n      } else {\n        // any char (that's started with a label sequence)\n        this.unput(this.yytext.length);\n      }\n    } else {\n      // any char (thats not a label start sequence)\n      if (ch) this.unput(1);\n    }\n    // stops looking for a varname and starts the scripting mode\n    return false;\n  },\n  matchST_VAR_OFFSET: function () {\n    const ch = this.input();\n    if (this.is_NUM_START()) {\n      this.consume_NUM();\n      return this.tok.T_NUM_STRING;\n    } else if (ch === \"]\") {\n      this.popState();\n      return \"]\";\n    } else if (ch === \"$\") {\n      this.input();\n      if (this.is_LABEL_START()) {\n        this.consume_LABEL();\n        return this.tok.T_VARIABLE;\n      } else {\n        /* istanbul ignore next */\n        throw new Error(\"Unexpected terminal\");\n      }\n    } else if (this.is_LABEL_START()) {\n      this.consume_LABEL();\n      return this.tok.T_STRING;\n    } else if (\n      this.is_WHITESPACE() ||\n      ch === \"\\\\\" ||\n      ch === \"'\" ||\n      ch === \"#\"\n    ) {\n      return this.tok.T_ENCAPSED_AND_WHITESPACE;\n    } else if (\n      ch === \"[\" ||\n      ch === \"{\" ||\n      ch === \"}\" ||\n      ch === '\"' ||\n      ch === \"`\" ||\n      this.is_TOKEN()\n    ) {\n      return ch;\n    } else {\n      /* istanbul ignore next */\n      throw new Error(\"Unexpected terminal\");\n    }\n  },\n};\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  matchST_IN_SCRIPTING: function () {\n    let ch = this.input();\n    switch (ch) {\n      case \" \":\n      case \"\\t\":\n      case \"\\n\":\n      case \"\\r\":\n      case \"\\r\\n\":\n        return this.T_WHITESPACE();\n      case \"#\":\n        if (this.version >= 800 && this._input[this.offset] === \"[\") {\n          this.input();\n          this.attributeListDepth[++this.attributeIndex] = 0;\n          this.begin(\"ST_ATTRIBUTE\");\n          return this.tok.T_ATTRIBUTE;\n        }\n        return this.T_COMMENT();\n      case \"/\":\n        if (this._input[this.offset] === \"/\") {\n          return this.T_COMMENT();\n        } else if (this._input[this.offset] === \"*\") {\n          this.input();\n          return this.T_DOC_COMMENT();\n        }\n        return this.consume_TOKEN();\n      case \"'\":\n        return this.T_CONSTANT_ENCAPSED_STRING();\n      case '\"':\n        return this.ST_DOUBLE_QUOTES();\n      case \"`\":\n        this.begin(\"ST_BACKQUOTE\");\n        return \"`\";\n      case \"?\":\n        if (!this.aspTagMode && this.tryMatch(\">\")) {\n          this.input();\n          const nextCH = this._input[this.offset];\n          if (nextCH === \"\\n\" || nextCH === \"\\r\") this.input();\n          if (this.conditionStack.length > 1) {\n            this.begin(\"INITIAL\");\n          }\n          return this.tok.T_CLOSE_TAG;\n        }\n        return this.consume_TOKEN();\n      case \"%\":\n        if (this.aspTagMode && this._input[this.offset] === \">\") {\n          this.input(); // consume the '>'\n          ch = this._input[this.offset]; // read next\n          if (ch === \"\\n\" || ch === \"\\r\") {\n            this.input(); // consume the newline\n          }\n          this.aspTagMode = false;\n          if (this.conditionStack.length > 1) {\n            this.begin(\"INITIAL\");\n          }\n          return this.tok.T_CLOSE_TAG;\n        }\n        return this.consume_TOKEN();\n      case \"{\":\n        this.begin(\"ST_IN_SCRIPTING\");\n        return \"{\";\n      case \"}\":\n        if (this.conditionStack.length > 2) {\n          // Return to HEREDOC/ST_DOUBLE_QUOTES mode\n          this.popState();\n        }\n        return \"}\";\n      default:\n        if (ch === \".\") {\n          ch = this.input();\n          if (this.is_NUM_START()) {\n            return this.consume_NUM();\n          } else {\n            if (ch) this.unput(1);\n          }\n        }\n        if (this.is_NUM_START()) {\n          return this.consume_NUM();\n        } else if (this.is_LABEL_START()) {\n          return this.consume_LABEL().T_STRING();\n        } else if (this.is_TOKEN()) {\n          return this.consume_TOKEN();\n        }\n    }\n    throw new Error(\n      'Bad terminal sequence \"' +\n        ch +\n        '\" at line ' +\n        this.yylineno +\n        \" (offset \" +\n        this.offset +\n        \")\"\n    );\n  },\n\n  T_WHITESPACE: function () {\n    while (this.offset < this.size) {\n      const ch = this.input();\n      if (ch === \" \" || ch === \"\\t\" || ch === \"\\n\" || ch === \"\\r\") {\n        continue;\n      }\n      if (ch) this.unput(1);\n      break;\n    }\n    return this.tok.T_WHITESPACE;\n  },\n};\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst newline = [\"\\n\", \"\\r\"];\nconst valid_after_heredoc = [\"\\n\", \"\\r\", \";\"];\nconst valid_after_heredoc_73 = valid_after_heredoc.concat([\n  \"\\t\",\n  \" \",\n  \",\",\n  \"]\",\n  \")\",\n  \"/\",\n  \"=\",\n  \"!\",\n]);\n\nmodule.exports = {\n  T_CONSTANT_ENCAPSED_STRING: function () {\n    let ch;\n    while (this.offset < this.size) {\n      ch = this.input();\n      if (ch == \"\\\\\") {\n        this.input();\n      } else if (ch == \"'\") {\n        break;\n      }\n    }\n    return this.tok.T_CONSTANT_ENCAPSED_STRING;\n  },\n  // check if matching a HEREDOC state\n  is_HEREDOC: function () {\n    const revert = this.offset;\n    if (\n      this._input[this.offset - 1] === \"<\" &&\n      this._input[this.offset] === \"<\" &&\n      this._input[this.offset + 1] === \"<\"\n    ) {\n      this.offset += 3;\n\n      // optional tabs / spaces\n      if (this.is_TABSPACE()) {\n        while (this.offset < this.size) {\n          this.offset++;\n          if (!this.is_TABSPACE()) {\n            break;\n          }\n        }\n      }\n\n      // optional quotes\n      let tChar = this._input[this.offset - 1];\n      if (tChar === \"'\" || tChar === '\"') {\n        this.offset++;\n      } else {\n        tChar = null;\n      }\n\n      // required label\n      if (this.is_LABEL_START()) {\n        let yyoffset = this.offset - 1;\n        while (this.offset < this.size) {\n          this.offset++;\n          if (!this.is_LABEL()) {\n            break;\n          }\n        }\n        const yylabel = this._input.substring(yyoffset, this.offset - 1);\n        if (!tChar || tChar === this._input[this.offset - 1]) {\n          // required ending quote\n          if (tChar) this.offset++;\n          // require newline\n          if (newline.includes(this._input[this.offset - 1])) {\n            // go go go\n            this.heredoc_label.label = yylabel;\n            this.heredoc_label.length = yylabel.length;\n            this.heredoc_label.finished = false;\n            yyoffset = this.offset - revert;\n            this.offset = revert;\n            this.consume(yyoffset);\n            if (tChar === \"'\") {\n              this.begin(\"ST_NOWDOC\");\n            } else {\n              this.begin(\"ST_HEREDOC\");\n            }\n            // prematch to get the indentation information from end of doc\n            this.prematch_ENDOFDOC();\n            return this.tok.T_START_HEREDOC;\n          }\n        }\n      }\n    }\n    this.offset = revert;\n    return false;\n  },\n  ST_DOUBLE_QUOTES: function () {\n    let ch;\n    while (this.offset < this.size) {\n      ch = this.input();\n      if (ch == \"\\\\\") {\n        this.input();\n      } else if (ch == '\"') {\n        break;\n      } else if (ch == \"$\") {\n        ch = this.input();\n        if (ch == \"{\" || this.is_LABEL_START()) {\n          this.unput(2);\n          break;\n        }\n        if (ch) this.unput(1);\n      } else if (ch == \"{\") {\n        ch = this.input();\n        if (ch == \"$\") {\n          this.unput(2);\n          break;\n        }\n        if (ch) this.unput(1);\n      }\n    }\n    if (ch == '\"') {\n      return this.tok.T_CONSTANT_ENCAPSED_STRING;\n    } else {\n      let prefix = 1;\n      if (this.yytext[0] === \"b\" || this.yytext[0] === \"B\") {\n        prefix = 2;\n      }\n      if (this.yytext.length > 2) {\n        this.appendToken(\n          this.tok.T_ENCAPSED_AND_WHITESPACE,\n          this.yytext.length - prefix\n        );\n      }\n      this.unput(this.yytext.length - prefix);\n      this.begin(\"ST_DOUBLE_QUOTES\");\n      return this.yytext;\n    }\n  },\n\n  // check if its a DOC end sequence\n  isDOC_MATCH: function (offset, consumeLeadingSpaces) {\n    // @fixme : check if out of text limits\n\n    // consumeLeadingSpaces is false happen DOC prematch END HEREDOC stage.\n\n    // Ensure current state is really after a new line break, not after a such as ${variables}\n    const prev_ch = this._input[offset - 2];\n    if (!newline.includes(prev_ch)) {\n      return false;\n    }\n\n    // skip leading spaces or tabs\n    let indentation_uses_spaces = false;\n    let indentation_uses_tabs = false;\n    // reset heredoc_label structure\n    let indentation = 0;\n    let leading_ch = this._input[offset - 1];\n\n    if (this.version >= 703) {\n      while (leading_ch === \"\\t\" || leading_ch === \" \") {\n        if (leading_ch === \" \") {\n          indentation_uses_spaces = true;\n        } else if (leading_ch === \"\\t\") {\n          indentation_uses_tabs = true;\n        }\n\n        leading_ch = this._input[offset + indentation];\n        indentation++;\n      }\n\n      // Move offset to skip leading whitespace\n      offset = offset + indentation;\n\n      // return out if there was only whitespace on this line\n      if (newline.includes(this._input[offset - 1])) {\n        return false;\n      }\n    }\n\n    if (\n      this._input.substring(\n        offset - 1,\n        offset - 1 + this.heredoc_label.length\n      ) === this.heredoc_label.label\n    ) {\n      const ch = this._input[offset - 1 + this.heredoc_label.length];\n      if (\n        (this.version >= 703\n          ? valid_after_heredoc_73\n          : valid_after_heredoc\n        ).includes(ch)\n      ) {\n        if (consumeLeadingSpaces) {\n          this.consume(indentation);\n          // https://wiki.php.net/rfc/flexible_heredoc_nowdoc_syntaxes\n          if (indentation_uses_spaces && indentation_uses_tabs) {\n            throw new Error(\n              \"Parse error:  mixing spaces and tabs in ending marker at line \" +\n                this.yylineno +\n                \" (offset \" +\n                this.offset +\n                \")\"\n            );\n          }\n        } else {\n          // Called in prematch_ENDOFDOC\n          this.heredoc_label.indentation = indentation;\n          this.heredoc_label.indentation_uses_spaces = indentation_uses_spaces;\n          this.heredoc_label.first_encaps_node = true;\n        }\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /*\n   * Prematch the end of HEREDOC/NOWDOC end tag to preset the\n   * context of this.heredoc_label\n   */\n  prematch_ENDOFDOC: function () {\n    // reset heredoc\n    this.heredoc_label.indentation_uses_spaces = false;\n    this.heredoc_label.indentation = 0;\n    this.heredoc_label.first_encaps_node = true;\n    let offset = this.offset + 1;\n\n    while (offset < this._input.length) {\n      // if match heredoc_label structrue will be set\n      if (this.isDOC_MATCH(offset, false)) {\n        return;\n      }\n\n      if (!newline.includes(this._input[offset - 1])) {\n        // skip one line\n        while (\n          !newline.includes(this._input[offset++]) &&\n          offset < this._input.length\n        ) {\n          // skip\n        }\n      }\n\n      offset++;\n    }\n  },\n\n  matchST_NOWDOC: function () {\n    // edge case : empty now doc\n    if (this.isDOC_MATCH(this.offset, true)) {\n      // @fixme : never reached (may be caused by quotes)\n      this.consume(this.heredoc_label.length);\n      this.popState();\n      return this.tok.T_END_HEREDOC;\n    }\n    // SCANNING CONTENTS\n    let ch = this._input[this.offset - 1];\n    while (this.offset < this.size) {\n      if (newline.includes(ch)) {\n        ch = this.input();\n        if (this.isDOC_MATCH(this.offset, true)) {\n          this.unput(1).popState();\n          this.appendToken(this.tok.T_END_HEREDOC, this.heredoc_label.length);\n          return this.tok.T_ENCAPSED_AND_WHITESPACE;\n        }\n      } else {\n        ch = this.input();\n      }\n    }\n    // too bad ! reached end of document (will get a parse error)\n    return this.tok.T_ENCAPSED_AND_WHITESPACE;\n  },\n\n  matchST_HEREDOC: function () {\n    // edge case : empty here doc\n    let ch = this.input();\n    if (this.isDOC_MATCH(this.offset, true)) {\n      this.consume(this.heredoc_label.length - 1);\n      this.popState();\n      return this.tok.T_END_HEREDOC;\n    }\n    // SCANNING CONTENTS\n    while (this.offset < this.size) {\n      if (ch === \"\\\\\") {\n        ch = this.input(); // ignore next\n        if (!newline.includes(ch)) {\n          ch = this.input();\n        }\n      }\n\n      if (newline.includes(ch)) {\n        ch = this.input();\n        if (this.isDOC_MATCH(this.offset, true)) {\n          this.unput(1).popState();\n          this.appendToken(this.tok.T_END_HEREDOC, this.heredoc_label.length);\n          return this.tok.T_ENCAPSED_AND_WHITESPACE;\n        }\n      } else if (ch === \"$\") {\n        ch = this.input();\n        if (ch === \"{\") {\n          // start of ${\n          this.begin(\"ST_LOOKING_FOR_VARNAME\");\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_DOLLAR_OPEN_CURLY_BRACES, 2);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n          }\n        } else if (this.is_LABEL_START()) {\n          // start of $var...\n          const yyoffset = this.offset;\n          const next = this.consume_VARIABLE();\n          if (this.yytext.length > this.offset - yyoffset + 2) {\n            this.appendToken(next, this.offset - yyoffset + 2);\n            this.unput(this.offset - yyoffset + 2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return next;\n          }\n          //console.log(this.yytext);\n        }\n      } else if (ch === \"{\") {\n        ch = this.input();\n        if (ch === \"$\") {\n          // start of {$...\n          this.begin(\"ST_IN_SCRIPTING\");\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_CURLY_OPEN, 1);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            this.unput(1);\n            return this.tok.T_CURLY_OPEN;\n          }\n        }\n      } else {\n        ch = this.input();\n      }\n    }\n\n    // too bad ! reached end of document (will get a parse error)\n    return this.tok.T_ENCAPSED_AND_WHITESPACE;\n  },\n\n  consume_VARIABLE: function () {\n    this.consume_LABEL();\n    const ch = this.input();\n    if (ch == \"[\") {\n      this.unput(1);\n      this.begin(\"ST_VAR_OFFSET\");\n      return this.tok.T_VARIABLE;\n    } else if (ch === \"-\") {\n      if (this.input() === \">\") {\n        this.input();\n        if (this.is_LABEL_START()) {\n          this.begin(\"ST_LOOKING_FOR_PROPERTY\");\n        }\n        this.unput(3);\n        return this.tok.T_VARIABLE;\n      } else {\n        this.unput(2);\n      }\n    } else {\n      if (ch) this.unput(1);\n    }\n    return this.tok.T_VARIABLE;\n  },\n  // HANDLES BACKQUOTES\n  matchST_BACKQUOTE: function () {\n    let ch = this.input();\n    if (ch === \"$\") {\n      ch = this.input();\n      if (ch === \"{\") {\n        this.begin(\"ST_LOOKING_FOR_VARNAME\");\n        return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n      } else if (this.is_LABEL_START()) {\n        const tok = this.consume_VARIABLE();\n        return tok;\n      }\n    } else if (ch === \"{\") {\n      if (this._input[this.offset] === \"$\") {\n        this.begin(\"ST_IN_SCRIPTING\");\n        return this.tok.T_CURLY_OPEN;\n      }\n    } else if (ch === \"`\") {\n      this.popState();\n      return \"`\";\n    }\n\n    // any char\n    while (this.offset < this.size) {\n      if (ch === \"\\\\\") {\n        this.input();\n      } else if (ch === \"`\") {\n        this.unput(1);\n        this.popState();\n        this.appendToken(\"`\", 1);\n        break;\n      } else if (ch === \"$\") {\n        ch = this.input();\n        if (ch === \"{\") {\n          this.begin(\"ST_LOOKING_FOR_VARNAME\");\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_DOLLAR_OPEN_CURLY_BRACES, 2);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n          }\n        } else if (this.is_LABEL_START()) {\n          // start of $var...\n          const yyoffset = this.offset;\n          const next = this.consume_VARIABLE();\n          if (this.yytext.length > this.offset - yyoffset + 2) {\n            this.appendToken(next, this.offset - yyoffset + 2);\n            this.unput(this.offset - yyoffset + 2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return next;\n          }\n        }\n        continue;\n      } else if (ch === \"{\") {\n        ch = this.input();\n        if (ch === \"$\") {\n          // start of {$...\n          this.begin(\"ST_IN_SCRIPTING\");\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_CURLY_OPEN, 1);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            this.unput(1);\n            return this.tok.T_CURLY_OPEN;\n          }\n        }\n        continue;\n      }\n      ch = this.input();\n    }\n    return this.tok.T_ENCAPSED_AND_WHITESPACE;\n  },\n\n  matchST_DOUBLE_QUOTES: function () {\n    let ch = this.input();\n    if (ch === \"$\") {\n      ch = this.input();\n      if (ch === \"{\") {\n        this.begin(\"ST_LOOKING_FOR_VARNAME\");\n        return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n      } else if (this.is_LABEL_START()) {\n        const tok = this.consume_VARIABLE();\n        return tok;\n      }\n    } else if (ch === \"{\") {\n      if (this._input[this.offset] === \"$\") {\n        this.begin(\"ST_IN_SCRIPTING\");\n        return this.tok.T_CURLY_OPEN;\n      }\n    } else if (ch === '\"') {\n      this.popState();\n      return '\"';\n    }\n\n    // any char\n    while (this.offset < this.size) {\n      if (ch === \"\\\\\") {\n        this.input();\n      } else if (ch === '\"') {\n        this.unput(1);\n        this.popState();\n        this.appendToken('\"', 1);\n        break;\n      } else if (ch === \"$\") {\n        ch = this.input();\n        if (ch === \"{\") {\n          this.begin(\"ST_LOOKING_FOR_VARNAME\");\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_DOLLAR_OPEN_CURLY_BRACES, 2);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n          }\n        } else if (this.is_LABEL_START()) {\n          // start of $var...\n          const yyoffset = this.offset;\n          const next = this.consume_VARIABLE();\n          if (this.yytext.length > this.offset - yyoffset + 2) {\n            this.appendToken(next, this.offset - yyoffset + 2);\n            this.unput(this.offset - yyoffset + 2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return next;\n          }\n        }\n        if (ch) this.unput(1);\n      } else if (ch === \"{\") {\n        ch = this.input();\n        if (ch === \"$\") {\n          // start of {$...\n          this.begin(\"ST_IN_SCRIPTING\");\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_CURLY_OPEN, 1);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            // @fixme : yytext = '\"{$' (this.yytext.length > 3)\n            this.unput(1);\n            return this.tok.T_CURLY_OPEN;\n          }\n        }\n        if (ch) this.unput(1);\n      }\n      ch = this.input();\n    }\n    return this.tok.T_ENCAPSED_AND_WHITESPACE;\n  },\n};\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  T_STRING: function () {\n    const token = this.yytext.toLowerCase();\n    let id = this.keywords[token];\n    if (typeof id !== \"number\") {\n      if (token === \"yield\") {\n        if (this.version >= 700 && this.tryMatch(\" from\")) {\n          this.consume(5);\n          id = this.tok.T_YIELD_FROM;\n        } else {\n          id = this.tok.T_YIELD;\n        }\n      } else {\n        id = this.tok.T_STRING;\n        if (token === \"b\" || token === \"B\") {\n          const ch = this.input();\n          if (ch === '\"') {\n            return this.ST_DOUBLE_QUOTES();\n          } else if (ch === \"'\") {\n            return this.T_CONSTANT_ENCAPSED_STRING();\n          } else if (ch) {\n            this.unput(1);\n          }\n        }\n      }\n    }\n\n    // https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l#L1546\n    if (id === this.tok.T_ENUM) {\n      if (this.version < 801) {\n        return this.tok.T_STRING;\n      }\n      const initial = this.offset;\n      let ch = this.input();\n      while (ch == \" \") {\n        ch = this.input();\n      }\n      let isEnum = false;\n      if (this.is_LABEL_START()) {\n        while (this.is_LABEL()) {\n          ch += this.input();\n        }\n        const label = ch.slice(0, -1).toLowerCase();\n        isEnum = label !== \"extends\" && label !== \"implements\";\n      }\n\n      this.unput(this.offset - initial);\n      return isEnum ? this.tok.T_ENUM : this.tok.T_STRING;\n    }\n\n    if (this.offset < this.size && id !== this.tok.T_YIELD_FROM) {\n      // If immediately followed by a backslash, this is a T_NAME_RELATIVE or T_NAME_QUALIFIED.\n      let ch = this.input();\n      if (ch === \"\\\\\") {\n        id =\n          token === \"namespace\"\n            ? this.tok.T_NAME_RELATIVE\n            : this.tok.T_NAME_QUALIFIED;\n        do {\n          if (this._input[this.offset] === \"{\") {\n            // e.g. when using group use statements, the last '\\\\' is followed by a '{'\n            this.input();\n            break;\n          }\n\n          this.consume_LABEL();\n          ch = this.input();\n        } while (ch === \"\\\\\");\n      }\n\n      if (ch) {\n        this.unput(1);\n      }\n    }\n\n    return id;\n  },\n  // reads a custom token\n  consume_TOKEN: function () {\n    const ch = this._input[this.offset - 1];\n    const fn = this.tokenTerminals[ch];\n    if (fn) {\n      return fn.apply(this, []);\n    } else {\n      return this.yytext;\n    }\n  },\n  // list of special char tokens\n  tokenTerminals: {\n    $: function () {\n      this.offset++;\n      if (this.is_LABEL_START()) {\n        this.offset--;\n        this.consume_LABEL();\n        return this.tok.T_VARIABLE;\n      } else {\n        this.offset--;\n        return \"$\";\n      }\n    },\n    \"-\": function () {\n      const nchar = this._input[this.offset];\n      if (nchar === \">\") {\n        this.begin(\"ST_LOOKING_FOR_PROPERTY\").input();\n        return this.tok.T_OBJECT_OPERATOR;\n      } else if (nchar === \"-\") {\n        this.input();\n        return this.tok.T_DEC;\n      } else if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_MINUS_EQUAL;\n      }\n      return \"-\";\n    },\n    \"\\\\\": function () {\n      if (this.offset < this.size) {\n        this.input();\n        if (this.is_LABEL_START()) {\n          let ch;\n          do {\n            if (this._input[this.offset] === \"{\") {\n              // e.g. when using group use statements, the last '\\\\' is followed by a '{'\n              this.input();\n              break;\n            }\n\n            this.consume_LABEL();\n            ch = this.input();\n          } while (ch === \"\\\\\");\n\n          this.unput(1);\n\n          return this.tok.T_NAME_FULLY_QUALIFIED;\n        } else {\n          this.unput(1);\n        }\n      }\n      return this.tok.T_NS_SEPARATOR;\n    },\n    \"/\": function () {\n      if (this._input[this.offset] === \"=\") {\n        this.input();\n        return this.tok.T_DIV_EQUAL;\n      }\n      return \"/\";\n    },\n    \":\": function () {\n      if (this._input[this.offset] === \":\") {\n        this.input();\n        return this.tok.T_DOUBLE_COLON;\n      } else {\n        return \":\";\n      }\n    },\n    \"(\": function () {\n      const initial = this.offset;\n      this.input();\n      if (this.is_TABSPACE()) {\n        this.consume_TABSPACE().input();\n      }\n      if (this.is_LABEL_START()) {\n        const yylen = this.yytext.length;\n        this.consume_LABEL();\n        const castToken = this.yytext.substring(yylen - 1).toLowerCase();\n        const castId = this.castKeywords[castToken];\n        if (typeof castId === \"number\") {\n          this.input();\n          if (this.is_TABSPACE()) {\n            this.consume_TABSPACE().input();\n          }\n          if (this._input[this.offset - 1] === \")\") {\n            return castId;\n          }\n        }\n      }\n      // revert the check\n      this.unput(this.offset - initial);\n      return \"(\";\n    },\n    \"=\": function () {\n      const nchar = this._input[this.offset];\n      if (nchar === \">\") {\n        this.input();\n        return this.tok.T_DOUBLE_ARROW;\n      } else if (nchar === \"=\") {\n        if (this._input[this.offset + 1] === \"=\") {\n          this.consume(2);\n          return this.tok.T_IS_IDENTICAL;\n        } else {\n          this.input();\n          return this.tok.T_IS_EQUAL;\n        }\n      }\n      return \"=\";\n    },\n    \"+\": function () {\n      const nchar = this._input[this.offset];\n      if (nchar === \"+\") {\n        this.input();\n        return this.tok.T_INC;\n      } else if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_PLUS_EQUAL;\n      }\n      return \"+\";\n    },\n    \"!\": function () {\n      if (this._input[this.offset] === \"=\") {\n        if (this._input[this.offset + 1] === \"=\") {\n          this.consume(2);\n          return this.tok.T_IS_NOT_IDENTICAL;\n        } else {\n          this.input();\n          return this.tok.T_IS_NOT_EQUAL;\n        }\n      }\n      return \"!\";\n    },\n    \"?\": function () {\n      if (this.version >= 700 && this._input[this.offset] === \"?\") {\n        if (this.version >= 704 && this._input[this.offset + 1] === \"=\") {\n          this.consume(2);\n          return this.tok.T_COALESCE_EQUAL;\n        } else {\n          this.input();\n          return this.tok.T_COALESCE;\n        }\n      }\n      if (\n        this.version >= 800 &&\n        this._input[this.offset] === \"-\" &&\n        this._input[this.offset + 1] === \">\"\n      ) {\n        this.consume(2);\n        return this.tok.T_NULLSAFE_OBJECT_OPERATOR;\n      }\n      return \"?\";\n    },\n    \"<\": function () {\n      let nchar = this._input[this.offset];\n      if (nchar === \"<\") {\n        nchar = this._input[this.offset + 1];\n        if (nchar === \"=\") {\n          this.consume(2);\n          return this.tok.T_SL_EQUAL;\n        } else if (nchar === \"<\") {\n          if (this.is_HEREDOC()) {\n            return this.tok.T_START_HEREDOC;\n          }\n        }\n        this.input();\n        return this.tok.T_SL;\n      } else if (nchar === \"=\") {\n        this.input();\n        if (this.version >= 700 && this._input[this.offset] === \">\") {\n          this.input();\n          return this.tok.T_SPACESHIP;\n        } else {\n          return this.tok.T_IS_SMALLER_OR_EQUAL;\n        }\n      } else if (nchar === \">\") {\n        this.input();\n        return this.tok.T_IS_NOT_EQUAL;\n      }\n      return \"<\";\n    },\n    \">\": function () {\n      let nchar = this._input[this.offset];\n      if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_IS_GREATER_OR_EQUAL;\n      } else if (nchar === \">\") {\n        nchar = this._input[this.offset + 1];\n        if (nchar === \"=\") {\n          this.consume(2);\n          return this.tok.T_SR_EQUAL;\n        } else {\n          this.input();\n          return this.tok.T_SR;\n        }\n      }\n      return \">\";\n    },\n    \"*\": function () {\n      const nchar = this._input[this.offset];\n      if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_MUL_EQUAL;\n      } else if (nchar === \"*\") {\n        this.input();\n        if (this._input[this.offset] === \"=\") {\n          this.input();\n          return this.tok.T_POW_EQUAL;\n        } else {\n          return this.tok.T_POW;\n        }\n      }\n      return \"*\";\n    },\n    \".\": function () {\n      const nchar = this._input[this.offset];\n      if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_CONCAT_EQUAL;\n      } else if (nchar === \".\" && this._input[this.offset + 1] === \".\") {\n        this.consume(2);\n        return this.tok.T_ELLIPSIS;\n      }\n      return \".\";\n    },\n    \"%\": function () {\n      if (this._input[this.offset] === \"=\") {\n        this.input();\n        return this.tok.T_MOD_EQUAL;\n      }\n      return \"%\";\n    },\n    \"&\": function () {\n      const nchar = this._input[this.offset];\n      if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_AND_EQUAL;\n      } else if (nchar === \"&\") {\n        this.input();\n        return this.tok.T_BOOLEAN_AND;\n      }\n      return \"&\";\n    },\n    \"|\": function () {\n      const nchar = this._input[this.offset];\n      if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_OR_EQUAL;\n      } else if (nchar === \"|\") {\n        this.input();\n        return this.tok.T_BOOLEAN_OR;\n      }\n      return \"|\";\n    },\n    \"^\": function () {\n      if (this._input[this.offset] === \"=\") {\n        this.input();\n        return this.tok.T_XOR_EQUAL;\n      }\n      return \"^\";\n    },\n  },\n};\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst tokens = \";:,.\\\\[]()|^&+-/*=%!~$<>?@\";\n\nmodule.exports = {\n  // check if the char can be a numeric\n  is_NUM: function () {\n    const ch = this._input.charCodeAt(this.offset - 1);\n    return (ch > 47 && ch < 58) || ch === 95;\n  },\n\n  // check if the char can be a numeric\n  is_NUM_START: function () {\n    const ch = this._input.charCodeAt(this.offset - 1);\n    return ch > 47 && ch < 58;\n  },\n\n  // check if current char can be a label\n  is_LABEL: function () {\n    const ch = this._input.charCodeAt(this.offset - 1);\n    return (\n      (ch > 96 && ch < 123) ||\n      (ch > 64 && ch < 91) ||\n      ch === 95 ||\n      (ch > 47 && ch < 58) ||\n      ch > 126\n    );\n  },\n\n  // check if current char can be a label\n  is_LABEL_START: function () {\n    const ch = this._input.charCodeAt(this.offset - 1);\n    // A - Z\n    if (ch > 64 && ch < 91) return true;\n    // a - z\n    if (ch > 96 && ch < 123) return true;\n    // _ (95)\n    if (ch === 95) return true;\n    // utf8 / extended\n    if (ch > 126) return true;\n    // else\n    return false;\n  },\n\n  // reads each char of the label\n  consume_LABEL: function () {\n    while (this.offset < this.size) {\n      const ch = this.input();\n      if (!this.is_LABEL()) {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n    return this;\n  },\n\n  // check if current char is a token char\n  is_TOKEN: function () {\n    const ch = this._input[this.offset - 1];\n    return tokens.indexOf(ch) !== -1;\n  },\n  // check if current char is a whitespace\n  is_WHITESPACE: function () {\n    const ch = this._input[this.offset - 1];\n    return ch === \" \" || ch === \"\\t\" || ch === \"\\n\" || ch === \"\\r\";\n  },\n  // check if current char is a whitespace (without newlines)\n  is_TABSPACE: function () {\n    const ch = this._input[this.offset - 1];\n    return ch === \" \" || ch === \"\\t\";\n  },\n  // consume all whitespaces (excluding newlines)\n  consume_TABSPACE: function () {\n    while (this.offset < this.size) {\n      const ch = this.input();\n      if (!this.is_TABSPACE()) {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n    return this;\n  },\n  // check if current char can be a hexadecimal number\n  is_HEX: function () {\n    const ch = this._input.charCodeAt(this.offset - 1);\n    // 0 - 9\n    if (ch > 47 && ch < 58) return true;\n    // A - F\n    if (ch > 64 && ch < 71) return true;\n    // a - f\n    if (ch > 96 && ch < 103) return true;\n    // _ (code 95)\n    if (ch === 95) return true;\n    // else\n    return false;\n  },\n  // check if current char can be an octal number\n  is_OCTAL: function () {\n    const ch = this._input.charCodeAt(this.offset - 1);\n    // 0 - 7\n    if (ch > 47 && ch < 56) return true;\n    // _ (code 95)\n    if (ch === 95) return true;\n    // else\n    return false;\n  },\n};\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\n/**\n * This is the php lexer. It will tokenize the string for helping the\n * parser to build the AST from its grammar.\n *\n * @constructor Lexer\n * @memberOf module:php-parser\n * @property {number} EOF\n * @property {boolean} all_tokens defines if all tokens must be retrieved (used by token_get_all only)\n * @property {boolean} comment_tokens extracts comments tokens\n * @property {boolean} mode_eval enables the evald mode (ignore opening tags)\n * @property {boolean} asp_tags disables by default asp tags mode\n * @property {boolean} short_tags enables by default short tags mode\n * @property {object} keywords List of php keyword\n * @property {object} castKeywords List of php keywords for type casting\n */\nconst Lexer = function (engine) {\n  this.engine = engine;\n  this.tok = this.engine.tokens.names;\n  this.EOF = 1;\n  this.debug = false;\n  this.all_tokens = true;\n  this.comment_tokens = false;\n  this.mode_eval = false;\n  this.asp_tags = false;\n  this.short_tags = false;\n  this.version = 801;\n  this.yyprevcol = 0;\n  this.keywords = {\n    __class__: this.tok.T_CLASS_C,\n    __trait__: this.tok.T_TRAIT_C,\n    __function__: this.tok.T_FUNC_C,\n    __method__: this.tok.T_METHOD_C,\n    __line__: this.tok.T_LINE,\n    __file__: this.tok.T_FILE,\n    __dir__: this.tok.T_DIR,\n    __namespace__: this.tok.T_NS_C,\n    exit: this.tok.T_EXIT,\n    die: this.tok.T_EXIT,\n    function: this.tok.T_FUNCTION,\n    const: this.tok.T_CONST,\n    return: this.tok.T_RETURN,\n    try: this.tok.T_TRY,\n    catch: this.tok.T_CATCH,\n    finally: this.tok.T_FINALLY,\n    throw: this.tok.T_THROW,\n    if: this.tok.T_IF,\n    elseif: this.tok.T_ELSEIF,\n    endif: this.tok.T_ENDIF,\n    else: this.tok.T_ELSE,\n    while: this.tok.T_WHILE,\n    endwhile: this.tok.T_ENDWHILE,\n    do: this.tok.T_DO,\n    for: this.tok.T_FOR,\n    endfor: this.tok.T_ENDFOR,\n    foreach: this.tok.T_FOREACH,\n    endforeach: this.tok.T_ENDFOREACH,\n    declare: this.tok.T_DECLARE,\n    enddeclare: this.tok.T_ENDDECLARE,\n    instanceof: this.tok.T_INSTANCEOF,\n    as: this.tok.T_AS,\n    switch: this.tok.T_SWITCH,\n    endswitch: this.tok.T_ENDSWITCH,\n    case: this.tok.T_CASE,\n    default: this.tok.T_DEFAULT,\n    break: this.tok.T_BREAK,\n    continue: this.tok.T_CONTINUE,\n    goto: this.tok.T_GOTO,\n    echo: this.tok.T_ECHO,\n    print: this.tok.T_PRINT,\n    class: this.tok.T_CLASS,\n    interface: this.tok.T_INTERFACE,\n    trait: this.tok.T_TRAIT,\n    enum: this.tok.T_ENUM,\n    extends: this.tok.T_EXTENDS,\n    implements: this.tok.T_IMPLEMENTS,\n    new: this.tok.T_NEW,\n    clone: this.tok.T_CLONE,\n    var: this.tok.T_VAR,\n    eval: this.tok.T_EVAL,\n    include: this.tok.T_INCLUDE,\n    include_once: this.tok.T_INCLUDE_ONCE,\n    require: this.tok.T_REQUIRE,\n    require_once: this.tok.T_REQUIRE_ONCE,\n    namespace: this.tok.T_NAMESPACE,\n    use: this.tok.T_USE,\n    insteadof: this.tok.T_INSTEADOF,\n    global: this.tok.T_GLOBAL,\n    isset: this.tok.T_ISSET,\n    empty: this.tok.T_EMPTY,\n    __halt_compiler: this.tok.T_HALT_COMPILER,\n    static: this.tok.T_STATIC,\n    abstract: this.tok.T_ABSTRACT,\n    final: this.tok.T_FINAL,\n    private: this.tok.T_PRIVATE,\n    protected: this.tok.T_PROTECTED,\n    public: this.tok.T_PUBLIC,\n    unset: this.tok.T_UNSET,\n    list: this.tok.T_LIST,\n    array: this.tok.T_ARRAY,\n    callable: this.tok.T_CALLABLE,\n    or: this.tok.T_LOGICAL_OR,\n    and: this.tok.T_LOGICAL_AND,\n    xor: this.tok.T_LOGICAL_XOR,\n    match: this.tok.T_MATCH,\n    readonly: this.tok.T_READ_ONLY,\n  };\n  this.castKeywords = {\n    int: this.tok.T_INT_CAST,\n    integer: this.tok.T_INT_CAST,\n    real: this.tok.T_DOUBLE_CAST,\n    double: this.tok.T_DOUBLE_CAST,\n    float: this.tok.T_DOUBLE_CAST,\n    string: this.tok.T_STRING_CAST,\n    binary: this.tok.T_STRING_CAST,\n    array: this.tok.T_ARRAY_CAST,\n    object: this.tok.T_OBJECT_CAST,\n    bool: this.tok.T_BOOL_CAST,\n    boolean: this.tok.T_BOOL_CAST,\n    unset: this.tok.T_UNSET_CAST,\n  };\n};\n\n/**\n * Initialize the lexer with the specified input\n * @function Lexer#setInput\n * @memberOf module:php-parser\n */\nLexer.prototype.setInput = function (input) {\n  this._input = input;\n  this.size = input.length;\n  this.yylineno = 1;\n  this.offset = 0;\n  this.yyprevcol = 0;\n  this.yytext = \"\";\n  this.yylloc = {\n    first_offset: 0,\n    first_line: 1,\n    first_column: 0,\n    prev_offset: 0,\n    prev_line: 1,\n    prev_column: 0,\n    last_line: 1,\n    last_column: 0,\n  };\n  this.tokens = [];\n  if (this.version > 703) {\n    this.keywords.fn = this.tok.T_FN;\n  } else {\n    delete this.keywords.fn;\n  }\n  this.done = this.offset >= this.size;\n  if (!this.all_tokens && this.mode_eval) {\n    this.conditionStack = [\"INITIAL\"];\n    this.begin(\"ST_IN_SCRIPTING\");\n  } else {\n    this.conditionStack = [];\n    this.begin(\"INITIAL\");\n  }\n  // https://github.com/php/php-src/blob/999e32b65a8a4bb59e27e538fa68ffae4b99d863/Zend/zend_language_scanner.h#L59\n  // Used for heredoc and nowdoc\n  this.heredoc_label = {\n    label: \"\",\n    length: 0,\n    indentation: 0,\n    indentation_uses_spaces: false,\n    finished: false,\n    /*\n     * this used for parser to detemine the if current node segment is first encaps node.\n     * if ture, the indentation will remove from the begining. and if false, the prev node\n     * might be a variable '}' ,and the leading spaces should not be removed util meet the\n     * first \\n\n     */\n    first_encaps_node: false,\n    // for backward compatible\n    /* istanbul ignore next */\n    toString: function () {\n      this.label;\n    },\n  };\n  return this;\n};\n\n/**\n * consumes and returns one char from the input\n * @function Lexer#input\n * @memberOf module:php-parser\n */\nLexer.prototype.input = function () {\n  const ch = this._input[this.offset];\n  if (!ch) return \"\";\n  this.yytext += ch;\n  this.offset++;\n  if (ch === \"\\r\" && this._input[this.offset] === \"\\n\") {\n    this.yytext += \"\\n\";\n    this.offset++;\n  }\n  if (ch === \"\\n\" || ch === \"\\r\") {\n    this.yylloc.last_line = ++this.yylineno;\n    this.yyprevcol = this.yylloc.last_column;\n    this.yylloc.last_column = 0;\n  } else {\n    this.yylloc.last_column++;\n  }\n  return ch;\n};\n\n/**\n * revert eating specified size\n * @function Lexer#unput\n * @memberOf module:php-parser\n */\nLexer.prototype.unput = function (size) {\n  if (size === 1) {\n    // 1 char unput (most cases)\n    this.offset--;\n    if (\n      this._input[this.offset] === \"\\n\" &&\n      this._input[this.offset - 1] === \"\\r\"\n    ) {\n      this.offset--;\n      size++;\n    }\n    if (\n      this._input[this.offset] === \"\\r\" ||\n      this._input[this.offset] === \"\\n\"\n    ) {\n      this.yylloc.last_line--;\n      this.yylineno--;\n      this.yylloc.last_column = this.yyprevcol;\n    } else {\n      this.yylloc.last_column--;\n    }\n    this.yytext = this.yytext.substring(0, this.yytext.length - size);\n  } else if (size > 0) {\n    this.offset -= size;\n    if (size < this.yytext.length) {\n      this.yytext = this.yytext.substring(0, this.yytext.length - size);\n      // re-calculate position\n      this.yylloc.last_line = this.yylloc.first_line;\n      this.yylloc.last_column = this.yyprevcol = this.yylloc.first_column;\n      for (let i = 0; i < this.yytext.length; i++) {\n        let c = this.yytext[i];\n        if (c === \"\\r\") {\n          c = this.yytext[++i];\n          this.yyprevcol = this.yylloc.last_column;\n          this.yylloc.last_line++;\n          this.yylloc.last_column = 0;\n          if (c !== \"\\n\") {\n            if (c === \"\\r\") {\n              this.yylloc.last_line++;\n            } else {\n              this.yylloc.last_column++;\n            }\n          }\n        } else if (c === \"\\n\") {\n          this.yyprevcol = this.yylloc.last_column;\n          this.yylloc.last_line++;\n          this.yylloc.last_column = 0;\n        } else {\n          this.yylloc.last_column++;\n        }\n      }\n      this.yylineno = this.yylloc.last_line;\n    } else {\n      // reset full text\n      this.yytext = \"\";\n      this.yylloc.last_line = this.yylineno = this.yylloc.first_line;\n      this.yylloc.last_column = this.yylloc.first_column;\n    }\n  }\n\n  return this;\n};\n\n/**\n * check if the text matches\n * @function Lexer#tryMatch\n * @memberOf module:php-parser\n * @param {string} text\n * @returns {boolean}\n */\nLexer.prototype.tryMatch = function (text) {\n  return text === this.ahead(text.length);\n};\n\n/**\n * check if the text matches\n * @function Lexer#tryMatchCaseless\n * @memberOf module:php-parser\n * @param {string} text\n * @returns {boolean}\n */\nLexer.prototype.tryMatchCaseless = function (text) {\n  return text === this.ahead(text.length).toLowerCase();\n};\n\n/**\n * look ahead\n * @function Lexer#ahead\n * @memberOf module:php-parser\n * @param {number} size\n * @returns {string}\n */\nLexer.prototype.ahead = function (size) {\n  let text = this._input.substring(this.offset, this.offset + size);\n  if (\n    text[text.length - 1] === \"\\r\" &&\n    this._input[this.offset + size + 1] === \"\\n\"\n  ) {\n    text += \"\\n\";\n  }\n  return text;\n};\n\n/**\n * consume the specified size\n * @function Lexer#consume\n * @memberOf module:php-parser\n * @param {number} size\n * @returns {Lexer}\n */\nLexer.prototype.consume = function (size) {\n  for (let i = 0; i < size; i++) {\n    const ch = this._input[this.offset];\n    if (!ch) break;\n    this.yytext += ch;\n    this.offset++;\n    if (ch === \"\\r\" && this._input[this.offset] === \"\\n\") {\n      this.yytext += \"\\n\";\n      this.offset++;\n      i++;\n    }\n    if (ch === \"\\n\" || ch === \"\\r\") {\n      this.yylloc.last_line = ++this.yylineno;\n      this.yyprevcol = this.yylloc.last_column;\n      this.yylloc.last_column = 0;\n    } else {\n      this.yylloc.last_column++;\n    }\n  }\n  return this;\n};\n\n/**\n * Gets the current state\n * @function Lexer#getState\n * @memberOf module:php-parser\n */\nLexer.prototype.getState = function () {\n  return {\n    yytext: this.yytext,\n    offset: this.offset,\n    yylineno: this.yylineno,\n    yyprevcol: this.yyprevcol,\n    yylloc: {\n      first_offset: this.yylloc.first_offset,\n      first_line: this.yylloc.first_line,\n      first_column: this.yylloc.first_column,\n      last_line: this.yylloc.last_line,\n      last_column: this.yylloc.last_column,\n    },\n    heredoc_label: this.heredoc_label,\n  };\n};\n\n/**\n * Sets the current lexer state\n * @function Lexer#setState\n * @memberOf module:php-parser\n */\nLexer.prototype.setState = function (state) {\n  this.yytext = state.yytext;\n  this.offset = state.offset;\n  this.yylineno = state.yylineno;\n  this.yyprevcol = state.yyprevcol;\n  this.yylloc = state.yylloc;\n  if (state.heredoc_label) {\n    this.heredoc_label = state.heredoc_label;\n  }\n  return this;\n};\n\n/**\n * prepend next token\n * @function Lexer#appendToken\n * @memberOf module:php-parser\n * @param {*} value\n * @param {*} ahead\n * @returns {Lexer}\n */\nLexer.prototype.appendToken = function (value, ahead) {\n  this.tokens.push([value, ahead]);\n  return this;\n};\n\n/**\n * return next match that has a token\n * @function Lexer#lex\n * @memberOf module:php-parser\n * @returns {number|string}\n */\nLexer.prototype.lex = function () {\n  this.yylloc.prev_offset = this.offset;\n  this.yylloc.prev_line = this.yylloc.last_line;\n  this.yylloc.prev_column = this.yylloc.last_column;\n  let token = this.next() || this.lex();\n  if (!this.all_tokens) {\n    while (\n      token === this.tok.T_WHITESPACE || // ignore white space\n      (!this.comment_tokens &&\n        (token === this.tok.T_COMMENT || // ignore single lines comments\n          token === this.tok.T_DOC_COMMENT)) || // ignore doc comments\n      // ignore open tags\n      token === this.tok.T_OPEN_TAG\n    ) {\n      token = this.next() || this.lex();\n    }\n    if (token == this.tok.T_OPEN_TAG_WITH_ECHO) {\n      // https://github.com/php/php-src/blob/7ff186434e82ee7be7c59d0db9a976641cf7b09c/Zend/zend_compile.c#L1683\n      // open tag with echo statement\n      return this.tok.T_ECHO;\n    } else if (token === this.tok.T_CLOSE_TAG) {\n      // https://github.com/php/php-src/blob/7ff186434e82ee7be7c59d0db9a976641cf7b09c/Zend/zend_compile.c#L1680\n      return \";\"; /* implicit ; */\n    }\n  }\n  if (!this.yylloc.prev_offset) {\n    this.yylloc.prev_offset = this.yylloc.first_offset;\n    this.yylloc.prev_line = this.yylloc.first_line;\n    this.yylloc.prev_column = this.yylloc.first_column;\n  }\n  /*else if (this.yylloc.prev_offset === this.offset && this.offset !== this.size) {\n    throw new Error('Infinite loop @ ' + this.offset + ' / ' + this.size);\n  }*/\n  return token;\n};\n\n/**\n * activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n * @function Lexer#begin\n * @memberOf module:php-parser\n * @param {*} condition\n * @returns {Lexer}\n */\nLexer.prototype.begin = function (condition) {\n  this.conditionStack.push(condition);\n  this.curCondition = condition;\n  this.stateCb = this[\"match\" + condition];\n  /* istanbul ignore next */\n  if (typeof this.stateCb !== \"function\") {\n    throw new Error('Undefined condition state \"' + condition + '\"');\n  }\n  return this;\n};\n\n/**\n * pop the previously active lexer condition state off the condition stack\n * @function Lexer#popState\n * @memberOf module:php-parser\n * @returns {string|*}\n */\nLexer.prototype.popState = function () {\n  const n = this.conditionStack.length - 1;\n  const condition = n > 0 ? this.conditionStack.pop() : this.conditionStack[0];\n  this.curCondition = this.conditionStack[this.conditionStack.length - 1];\n  this.stateCb = this[\"match\" + this.curCondition];\n  /* istanbul ignore next */\n  if (typeof this.stateCb !== \"function\") {\n    throw new Error('Undefined condition state \"' + this.curCondition + '\"');\n  }\n  return condition;\n};\n\n/**\n * return next match in input\n * @function Lexer#next\n * @memberOf module:php-parser\n * @returns {number|*}\n */\nLexer.prototype.next = function () {\n  let token;\n  if (!this._input) {\n    this.done = true;\n  }\n  this.yylloc.first_offset = this.offset;\n  this.yylloc.first_line = this.yylloc.last_line;\n  this.yylloc.first_column = this.yylloc.last_column;\n  this.yytext = \"\";\n  if (this.done) {\n    this.yylloc.prev_offset = this.yylloc.first_offset;\n    this.yylloc.prev_line = this.yylloc.first_line;\n    this.yylloc.prev_column = this.yylloc.first_column;\n    return this.EOF;\n  }\n  if (this.tokens.length > 0) {\n    token = this.tokens.shift();\n    if (typeof token[1] === \"object\") {\n      this.setState(token[1]);\n    } else {\n      this.consume(token[1]);\n    }\n    token = token[0];\n  } else {\n    token = this.stateCb.apply(this, []);\n  }\n  if (this.offset >= this.size && this.tokens.length === 0) {\n    this.done = true;\n  }\n  /* istanbul ignore next */\n  if (this.debug) {\n    let tName = token;\n    if (typeof tName === \"number\") {\n      tName = this.engine.tokens.values[tName];\n    } else {\n      tName = '\"' + tName + '\"';\n    }\n    const e = new Error(\n      tName +\n        \"\\tfrom \" +\n        this.yylloc.first_line +\n        \",\" +\n        this.yylloc.first_column +\n        \"\\t - to \" +\n        this.yylloc.last_line +\n        \",\" +\n        this.yylloc.last_column +\n        '\\t\"' +\n        this.yytext +\n        '\"'\n    );\n    // eslint-disable-next-line no-console\n    console.error(e.stack);\n  }\n  return token;\n};\n\n// extends the lexer with states\n[\n  require(\"./lexer/attribute.js\"),\n  require(\"./lexer/comments.js\"),\n  require(\"./lexer/initial.js\"),\n  require(\"./lexer/numbers.js\"),\n  require(\"./lexer/property.js\"),\n  require(\"./lexer/scripting.js\"),\n  require(\"./lexer/strings.js\"),\n  require(\"./lexer/tokens.js\"),\n  require(\"./lexer/utils.js\"),\n].forEach(function (ext) {\n  for (const k in ext) {\n    Lexer.prototype[k] = ext[k];\n  }\n});\n\nmodule.exports = Lexer;\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\n/**\n * Each Position object consists of a line number (1-indexed) and a column number (0-indexed):\n * @constructor Position\n * @memberOf module:php-parser\n * @property {number} line\n * @property {number} column\n * @property {number} offset\n */\nconst Position = function (line, column, offset) {\n  this.line = line;\n  this.column = column;\n  this.offset = offset;\n};\n\nmodule.exports = Position;\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /*\n   * Parse an array\n   * ```ebnf\n   * array ::= T_ARRAY '(' array_pair_list ')' |\n   *   '[' array_pair_list ']'\n   * ```\n   */\n  read_array: function () {\n    let expect = null;\n    let shortForm = false;\n    const result = this.node(\"array\");\n\n    if (this.token === this.tok.T_ARRAY) {\n      this.next().expect(\"(\");\n      expect = \")\";\n    } else {\n      shortForm = true;\n      expect = \"]\";\n    }\n    let items = [];\n    if (this.next().token !== expect) {\n      items = this.read_array_pair_list(shortForm);\n    }\n    this.expect(expect);\n    this.next();\n    return result(shortForm, items);\n  },\n  /*\n   * Reads an array of items\n   * ```ebnf\n   * array_pair_list ::= array_pair (',' array_pair?)*\n   * ```\n   */\n  read_array_pair_list: function (shortForm) {\n    const self = this;\n    return this.read_list(\n      function () {\n        return self.read_array_pair(shortForm);\n      },\n      \",\",\n      true\n    );\n  },\n  /*\n   * Reads an entry\n   * array_pair:\n   *  expr T_DOUBLE_ARROW expr\n   *  | expr\n   *  | expr T_DOUBLE_ARROW '&' variable\n   *  | '&' variable\n   *  | expr T_DOUBLE_ARROW T_LIST '(' array_pair_list ')'\n   *  | T_LIST '(' array_pair_list ')'\n   */\n  read_array_pair: function (shortForm) {\n    if (\n      (!shortForm && this.token === \")\") ||\n      (shortForm && this.token === \"]\")\n    ) {\n      return;\n    }\n\n    if (this.token === \",\") {\n      return this.node(\"noop\")();\n    }\n\n    const entry = this.node(\"entry\");\n\n    let key = null;\n    let value = null;\n    let byRef = false;\n    let unpack = false;\n\n    if (this.token === \"&\") {\n      this.next();\n      byRef = true;\n      value = this.read_variable(true, false);\n    } else if (this.token === this.tok.T_ELLIPSIS && this.version >= 704) {\n      this.next();\n      if (this.token === \"&\") {\n        this.error();\n      }\n      unpack = true;\n      value = this.read_expr();\n    } else {\n      const expr = this.read_expr();\n\n      if (this.token === this.tok.T_DOUBLE_ARROW) {\n        this.next();\n        key = expr;\n\n        if (this.token === \"&\") {\n          this.next();\n          byRef = true;\n          value = this.read_variable(true, false);\n        } else {\n          value = this.read_expr();\n        }\n      } else {\n        value = expr;\n      }\n    }\n\n    return entry(key, value, byRef, unpack);\n  },\n};\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /*\n   * reading a class\n   * ```ebnf\n   * class ::= class_scope? T_CLASS T_STRING (T_EXTENDS NAMESPACE_NAME)? (T_IMPLEMENTS (NAMESPACE_NAME ',')* NAMESPACE_NAME)? '{' CLASS_BODY '}'\n   * ```\n   */\n  read_class_declaration_statement: function (attrs) {\n    const result = this.node(\"class\");\n    const flag = this.read_class_modifiers();\n    // graceful mode : ignore token & go next\n    if (this.token !== this.tok.T_CLASS) {\n      this.error(this.tok.T_CLASS);\n      this.next();\n      return null;\n    }\n    this.next().expect(this.tok.T_STRING);\n    let propName = this.node(\"identifier\");\n    const name = this.text();\n    this.next();\n    propName = propName(name);\n    const propExtends = this.read_extends_from();\n    const propImplements = this.read_implements_list();\n    this.expect(\"{\");\n    const body = this.next().read_class_body(true, false);\n    const node = result(propName, propExtends, propImplements, body, flag);\n    if (attrs) node.attrGroups = attrs;\n    return node;\n  },\n\n  read_class_modifiers: function () {\n    return [0, 0, this.read_class_modifier()];\n  },\n\n  read_class_modifier: function () {\n    const result = 0;\n\n    if (this.token === this.tok.T_ABSTRACT) {\n      this.next();\n      return 1;\n    } else if (this.token === this.tok.T_FINAL) {\n      this.next();\n      return 2;\n    }\n\n    return result;\n  },\n\n  /*\n   * Reads a class body\n   * ```ebnf\n   *   class_body ::= (member_flags? (T_VAR | T_STRING | T_FUNCTION))*\n   * ```\n   */\n  read_class_body: function (allow_variables, allow_enum_cases) {\n    let result = [];\n    let attrs = [];\n    while (this.token !== this.EOF && this.token !== \"}\") {\n      if (this.token === this.tok.T_COMMENT) {\n        result.push(this.read_comment());\n        continue;\n      }\n\n      if (this.token === this.tok.T_DOC_COMMENT) {\n        result.push(this.read_doc_comment());\n        continue;\n      }\n\n      // check T_USE trait\n      if (this.token === this.tok.T_USE) {\n        result = result.concat(this.read_trait_use_statement());\n        continue;\n      }\n\n      // check enum cases\n      if (allow_enum_cases && this.token === this.tok.T_CASE) {\n        const enumcase = this.read_enum_case();\n        if (this.expect(\";\")) {\n          this.next();\n        }\n        result = result.concat(enumcase);\n        continue;\n      }\n\n      if (this.token === this.tok.T_ATTRIBUTE) {\n        attrs = this.read_attr_list();\n      }\n\n      const locStart = this.position();\n\n      // read member flags\n      const flags = this.read_member_flags(false);\n\n      // check constant\n      if (this.token === this.tok.T_CONST) {\n        const constants = this.read_constant_list(flags, attrs);\n        if (this.expect(\";\")) {\n          this.next();\n        }\n        result = result.concat(constants);\n        continue;\n      }\n\n      // jump over T_VAR then land on T_VARIABLE\n      if (allow_variables && this.token === this.tok.T_VAR) {\n        this.next().expect(this.tok.T_VARIABLE);\n        flags[0] = null; // public (as null)\n        flags[1] = 0; // non static var\n      }\n\n      if (this.token === this.tok.T_FUNCTION) {\n        // reads a function\n        result.push(this.read_function(false, flags, attrs, locStart));\n        attrs = [];\n      } else if (\n        allow_variables &&\n        (this.token === this.tok.T_VARIABLE ||\n          (this.version >= 801 && this.token === this.tok.T_READ_ONLY) ||\n          // support https://wiki.php.net/rfc/typed_properties_v2\n          (this.version >= 704 &&\n            (this.token === \"?\" ||\n              this.token === this.tok.T_ARRAY ||\n              this.token === this.tok.T_CALLABLE ||\n              this.token === this.tok.T_NAMESPACE ||\n              this.token === this.tok.T_NAME_FULLY_QUALIFIED ||\n              this.token === this.tok.T_NAME_QUALIFIED ||\n              this.token === this.tok.T_NAME_RELATIVE ||\n              this.token === this.tok.T_NS_SEPARATOR ||\n              this.token === this.tok.T_STRING)))\n      ) {\n        // reads a variable\n        const variables = this.read_variable_list(flags, attrs);\n        attrs = [];\n        this.expect(\";\");\n        this.next();\n        result = result.concat(variables);\n      } else {\n        // raise an error\n        this.error([\n          this.tok.T_CONST,\n          ...(allow_variables ? [this.tok.T_VARIABLE] : []),\n          ...(allow_enum_cases ? [this.tok.T_CASE] : []),\n          this.tok.T_FUNCTION,\n        ]);\n        // ignore token\n        this.next();\n      }\n    }\n    this.expect(\"}\");\n    this.next();\n    return result;\n  },\n  /*\n   * Reads variable list\n   * ```ebnf\n   *  variable_list ::= (variable_declaration ',')* variable_declaration\n   * ```\n   */\n  read_variable_list: function (flags, attrs) {\n    const result = this.node(\"propertystatement\");\n\n    const properties = this.read_list(\n      /*\n       * Reads a variable declaration\n       *\n       * ```ebnf\n       *  variable_declaration ::= T_VARIABLE '=' scalar\n       * ```\n       */\n      function read_variable_declaration() {\n        const result = this.node(\"property\");\n        let readonly = false;\n        if (this.token === this.tok.T_READ_ONLY) {\n          readonly = true;\n          this.next();\n        }\n        const [nullable, type] = this.read_optional_type();\n        this.expect(this.tok.T_VARIABLE);\n        let propName = this.node(\"identifier\");\n        const name = this.text().substring(1); // ignore $\n        this.next();\n        propName = propName(name);\n        if (this.token === \";\" || this.token === \",\") {\n          return result(propName, null, readonly, nullable, type, attrs || []);\n        } else if (this.token === \"=\") {\n          // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L815\n          return result(\n            propName,\n            this.next().read_expr(),\n            readonly,\n            nullable,\n            type,\n            attrs || []\n          );\n        } else {\n          this.expect([\",\", \";\", \"=\"]);\n          return result(propName, null, nullable, type, attrs || []);\n        }\n      },\n      \",\"\n    );\n\n    return result(null, properties, flags);\n  },\n  /*\n   * Reads constant list\n   * ```ebnf\n   *  constant_list ::= T_CONST (constant_declaration ',')* constant_declaration\n   * ```\n   */\n  read_constant_list: function (flags, attrs) {\n    if (this.expect(this.tok.T_CONST)) {\n      this.next();\n    }\n    const result = this.node(\"classconstant\");\n    const items = this.read_list(\n      /*\n       * Reads a constant declaration\n       *\n       * ```ebnf\n       *  constant_declaration ::= (T_STRING | IDENTIFIER) '=' expr\n       * ```\n       * @return {Constant} [:link:](AST.md#constant)\n       */\n      function read_constant_declaration() {\n        const result = this.node(\"constant\");\n        let constName = null;\n        let value = null;\n        if (\n          this.token === this.tok.T_STRING ||\n          (this.version >= 700 && this.is(\"IDENTIFIER\"))\n        ) {\n          constName = this.node(\"identifier\");\n          const name = this.text();\n          this.next();\n          constName = constName(name);\n        } else {\n          this.expect(\"IDENTIFIER\");\n        }\n        if (this.expect(\"=\")) {\n          value = this.next().read_expr();\n        }\n        return result(constName, value);\n      },\n      \",\"\n    );\n\n    return result(null, items, flags, attrs || []);\n  },\n  /*\n   * Read member flags\n   * @return array\n   *  1st index : 0 => public, 1 => protected, 2 => private\n   *  2nd index : 0 => instance member, 1 => static member\n   *  3rd index : 0 => normal, 1 => abstract member, 2 => final member\n   */\n  read_member_flags: function (asInterface) {\n    const result = [-1, -1, -1];\n    if (this.is(\"T_MEMBER_FLAGS\")) {\n      let idx = 0,\n        val = 0;\n      do {\n        switch (this.token) {\n          case this.tok.T_PUBLIC:\n            idx = 0;\n            val = 0;\n            break;\n          case this.tok.T_PROTECTED:\n            idx = 0;\n            val = 1;\n            break;\n          case this.tok.T_PRIVATE:\n            idx = 0;\n            val = 2;\n            break;\n          case this.tok.T_STATIC:\n            idx = 1;\n            val = 1;\n            break;\n          case this.tok.T_ABSTRACT:\n            idx = 2;\n            val = 1;\n            break;\n          case this.tok.T_FINAL:\n            idx = 2;\n            val = 2;\n            break;\n        }\n        if (asInterface) {\n          if (idx == 0 && val == 2) {\n            // an interface can't be private\n            this.expect([this.tok.T_PUBLIC, this.tok.T_PROTECTED]);\n            val = -1;\n          } else if (idx == 2 && val == 1) {\n            // an interface cant be abstract\n            this.error();\n            val = -1;\n          }\n        }\n        if (result[idx] !== -1) {\n          // already defined flag\n          this.error();\n        } else if (val !== -1) {\n          result[idx] = val;\n        }\n      } while (this.next().is(\"T_MEMBER_FLAGS\"));\n    }\n\n    if (result[1] == -1) result[1] = 0;\n    if (result[2] == -1) result[2] = 0;\n    return result;\n  },\n\n  /*\n   * optional_type:\n   *\t  /- empty -/\t{ $$ = NULL; }\n   *   |\ttype_expr\t{ $$ = $1; }\n   * ;\n   *\n   * type_expr:\n   *\t\ttype\t\t{ $$ = $1; }\n   *\t|\t'?' type\t{ $$ = $2; $$->attr |= ZEND_TYPE_NULLABLE; }\n   *\t|\tunion_type\t{ $$ = $1; }\n   * ;\n   *\n   * type:\n   * \t\tT_ARRAY\t\t{ $$ = zend_ast_create_ex(ZEND_AST_TYPE, IS_ARRAY); }\n   * \t|\tT_CALLABLE\t{ $$ = zend_ast_create_ex(ZEND_AST_TYPE, IS_CALLABLE); }\n   * \t|\tname\t\t{ $$ = $1; }\n   * ;\n   *\n   * union_type:\n   * \t\ttype '|' type       { $$ = zend_ast_create_list(2, ZEND_AST_TYPE_UNION, $1, $3); }\n   * \t|\tunion_type '|' type { $$ = zend_ast_list_add($1, $3); }\n   * ;\n   */\n  read_optional_type: function () {\n    let nullable = false;\n    if (this.token === \"?\") {\n      nullable = true;\n      this.next();\n    }\n    let type = this.read_types();\n    if (nullable && !type) {\n      this.raiseError(\n        \"Expecting a type definition combined with nullable operator\"\n      );\n    }\n    if (!nullable && !type) {\n      return [false, null];\n    }\n    if (this.token === \"|\") {\n      type = [type];\n      do {\n        this.next();\n        const variant = this.read_type();\n        if (!variant) {\n          this.raiseError(\"Expecting a type definition\");\n          break;\n        }\n        type.push(variant);\n      } while (this.token === \"|\");\n    }\n    return [nullable, type];\n  },\n\n  /*\n   * reading an interface\n   * ```ebnf\n   * interface ::= T_INTERFACE T_STRING (T_EXTENDS (NAMESPACE_NAME ',')* NAMESPACE_NAME)? '{' INTERFACE_BODY '}'\n   * ```\n   */\n  read_interface_declaration_statement: function (attrs) {\n    const result = this.node(\"interface\");\n    if (this.token !== this.tok.T_INTERFACE) {\n      this.error(this.tok.T_INTERFACE);\n      this.next();\n      return null;\n    }\n    this.next().expect(this.tok.T_STRING);\n    let propName = this.node(\"identifier\");\n    const name = this.text();\n    this.next();\n    propName = propName(name);\n    const propExtends = this.read_interface_extends_list();\n    this.expect(\"{\");\n    const body = this.next().read_interface_body();\n    return result(propName, propExtends, body, attrs || []);\n  },\n  /*\n   * Reads an interface body\n   * ```ebnf\n   *   interface_body ::= (member_flags? (T_CONST | T_FUNCTION))*\n   * ```\n   */\n  read_interface_body: function () {\n    let result = [],\n      attrs = [];\n\n    while (this.token !== this.EOF && this.token !== \"}\") {\n      if (this.token === this.tok.T_COMMENT) {\n        result.push(this.read_comment());\n        continue;\n      }\n\n      if (this.token === this.tok.T_DOC_COMMENT) {\n        result.push(this.read_doc_comment());\n        continue;\n      }\n\n      const locStart = this.position();\n\n      attrs = this.read_attr_list();\n      // read member flags\n      const flags = this.read_member_flags(true);\n\n      // check constant\n      if (this.token == this.tok.T_CONST) {\n        const constants = this.read_constant_list(flags, attrs);\n        if (this.expect(\";\")) {\n          this.next();\n        }\n        result = result.concat(constants);\n        attrs = [];\n      } else if (this.token === this.tok.T_FUNCTION) {\n        // reads a function\n        const method = this.read_function_declaration(\n          2,\n          flags,\n          attrs,\n          locStart\n        );\n        method.parseFlags(flags);\n        result.push(method);\n        if (this.expect(\";\")) {\n          this.next();\n        }\n        attrs = [];\n      } else {\n        // raise an error\n        this.error([this.tok.T_CONST, this.tok.T_FUNCTION]);\n        this.next();\n      }\n    }\n    if (this.expect(\"}\")) {\n      this.next();\n    }\n    return result;\n  },\n  /*\n   * reading a trait\n   * ```ebnf\n   * trait ::= T_TRAIT T_STRING (T_EXTENDS (NAMESPACE_NAME ',')* NAMESPACE_NAME)? '{' FUNCTION* '}'\n   * ```\n   */\n  read_trait_declaration_statement: function () {\n    const result = this.node(\"trait\");\n    // graceful mode : ignore token & go next\n    if (this.token !== this.tok.T_TRAIT) {\n      this.error(this.tok.T_TRAIT);\n      this.next();\n      return null;\n    }\n    this.next().expect(this.tok.T_STRING);\n    let propName = this.node(\"identifier\");\n    const name = this.text();\n    this.next();\n    propName = propName(name);\n    this.expect(\"{\");\n    const body = this.next().read_class_body(true, false);\n    return result(propName, body);\n  },\n  /*\n   * reading a use statement\n   * ```ebnf\n   * trait_use_statement ::= namespace_name (',' namespace_name)* ('{' trait_use_alias '}')?\n   * ```\n   */\n  read_trait_use_statement: function () {\n    // defines use statements\n    const node = this.node(\"traituse\");\n    this.expect(this.tok.T_USE) && this.next();\n    const traits = [this.read_namespace_name()];\n    let adaptations = null;\n    while (this.token === \",\") {\n      traits.push(this.next().read_namespace_name());\n    }\n    if (this.token === \"{\") {\n      adaptations = [];\n      // defines alias statements\n      while (this.next().token !== this.EOF) {\n        if (this.token === \"}\") break;\n        adaptations.push(this.read_trait_use_alias());\n        this.expect(\";\");\n      }\n      if (this.expect(\"}\")) {\n        this.next();\n      }\n    } else {\n      if (this.expect(\";\")) {\n        this.next();\n      }\n    }\n    return node(traits, adaptations);\n  },\n  /*\n   * Reading trait alias\n   * ```ebnf\n   * trait_use_alias ::= namespace_name ( T_DOUBLE_COLON T_STRING )? (T_INSTEADOF namespace_name) | (T_AS member_flags? T_STRING)\n   * ```\n   * name list : https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L303\n   * trait adaptation : https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L742\n   */\n  read_trait_use_alias: function () {\n    const node = this.node();\n    let trait = null;\n    let method;\n\n    if (this.is(\"IDENTIFIER\")) {\n      method = this.node(\"identifier\");\n      const methodName = this.text();\n      this.next();\n      method = method(methodName);\n    } else {\n      method = this.read_namespace_name();\n\n      if (this.token === this.tok.T_DOUBLE_COLON) {\n        this.next();\n        if (\n          this.token === this.tok.T_STRING ||\n          (this.version >= 700 && this.is(\"IDENTIFIER\"))\n        ) {\n          trait = method;\n          method = this.node(\"identifier\");\n          const methodName = this.text();\n          this.next();\n          method = method(methodName);\n        } else {\n          this.expect(this.tok.T_STRING);\n        }\n      } else {\n        // convert identifier as string\n        method = method.name;\n      }\n    }\n\n    // handle trait precedence\n    if (this.token === this.tok.T_INSTEADOF) {\n      return node(\n        \"traitprecedence\",\n        trait,\n        method,\n        this.next().read_name_list()\n      );\n    } else if (this.token === this.tok.T_AS) {\n      // handle trait alias\n      let flags = null;\n      let alias = null;\n      if (this.next().is(\"T_MEMBER_FLAGS\")) {\n        flags = this.read_member_flags();\n      }\n\n      if (\n        this.token === this.tok.T_STRING ||\n        (this.version >= 700 && this.is(\"IDENTIFIER\"))\n      ) {\n        alias = this.node(\"identifier\");\n        const name = this.text();\n        this.next();\n        alias = alias(name);\n      } else if (flags === false) {\n        // no visibility flags and no name => too bad\n        this.expect(this.tok.T_STRING);\n      }\n\n      return node(\"traitalias\", trait, method, alias, flags);\n    }\n\n    // handle errors\n    this.expect([this.tok.T_AS, this.tok.T_INSTEADOF]);\n    return node(\"traitalias\", trait, method, null, null);\n  },\n};\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /*\n   *  Comments with // or # or / * ... * /\n   */\n  read_comment: function () {\n    const text = this.text();\n    let result = this.ast.prepare(\n      text.substring(0, 2) === \"/*\" ? \"commentblock\" : \"commentline\",\n      null,\n      this\n    );\n    const offset = this.lexer.yylloc.first_offset;\n    // handle location on comment\n    const prev = this.prev;\n    this.prev = [\n      this.lexer.yylloc.last_line,\n      this.lexer.yylloc.last_column,\n      this.lexer.offset,\n    ];\n    this.lex();\n    result = result(text);\n    result.offset = offset;\n    this.prev = prev;\n    return result;\n  },\n  /*\n   * Comments with / ** ... * /\n   */\n  read_doc_comment: function () {\n    let result = this.ast.prepare(\"commentblock\", null, this);\n    const offset = this.lexer.yylloc.first_offset;\n    const text = this.text();\n    const prev = this.prev;\n    this.prev = [\n      this.lexer.yylloc.last_line,\n      this.lexer.yylloc.last_column,\n      this.lexer.offset,\n    ];\n    this.lex();\n    result = result(text);\n    result.offset = offset;\n    this.prev = prev;\n    return result;\n  },\n};\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  read_expr: function (expr) {\n    const result = this.node();\n    if (this.token === \"@\") {\n      if (!expr) {\n        expr = this.next().read_expr();\n      }\n      return result(\"silent\", expr);\n    }\n    if (!expr) {\n      expr = this.read_expr_item();\n    }\n    // binary operations\n    if (this.token === \"|\") {\n      return result(\"bin\", \"|\", expr, this.next().read_expr());\n    }\n    if (this.token === \"&\") {\n      return result(\"bin\", \"&\", expr, this.next().read_expr());\n    }\n    if (this.token === \"^\") {\n      return result(\"bin\", \"^\", expr, this.next().read_expr());\n    }\n    if (this.token === \".\") {\n      return result(\"bin\", \".\", expr, this.next().read_expr());\n    }\n    if (this.token === \"+\") {\n      return result(\"bin\", \"+\", expr, this.next().read_expr());\n    }\n    if (this.token === \"-\") {\n      return result(\"bin\", \"-\", expr, this.next().read_expr());\n    }\n    if (this.token === \"*\") {\n      return result(\"bin\", \"*\", expr, this.next().read_expr());\n    }\n    if (this.token === \"/\") {\n      return result(\"bin\", \"/\", expr, this.next().read_expr());\n    }\n    if (this.token === \"%\") {\n      return result(\"bin\", \"%\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_POW) {\n      return result(\"bin\", \"**\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_SL) {\n      return result(\"bin\", \"<<\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_SR) {\n      return result(\"bin\", \">>\", expr, this.next().read_expr());\n    }\n    // more binary operations (formerly bool)\n    if (this.token === this.tok.T_BOOLEAN_OR) {\n      return result(\"bin\", \"||\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_LOGICAL_OR) {\n      return result(\"bin\", \"or\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_BOOLEAN_AND) {\n      return result(\"bin\", \"&&\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_LOGICAL_AND) {\n      return result(\"bin\", \"and\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_LOGICAL_XOR) {\n      return result(\"bin\", \"xor\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_IS_IDENTICAL) {\n      return result(\"bin\", \"===\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_IS_NOT_IDENTICAL) {\n      return result(\"bin\", \"!==\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_IS_EQUAL) {\n      return result(\"bin\", \"==\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_IS_NOT_EQUAL) {\n      return result(\"bin\", \"!=\", expr, this.next().read_expr());\n    }\n    if (this.token === \"<\") {\n      return result(\"bin\", \"<\", expr, this.next().read_expr());\n    }\n    if (this.token === \">\") {\n      return result(\"bin\", \">\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_IS_SMALLER_OR_EQUAL) {\n      return result(\"bin\", \"<=\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_IS_GREATER_OR_EQUAL) {\n      return result(\"bin\", \">=\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_SPACESHIP) {\n      return result(\"bin\", \"<=>\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_INSTANCEOF) {\n      expr = result(\n        \"bin\",\n        \"instanceof\",\n        expr,\n        this.next().read_class_name_reference()\n      );\n      if (\n        this.token !== \";\" &&\n        this.token !== this.tok.T_INLINE_HTML &&\n        this.token !== this.EOF\n      ) {\n        expr = this.read_expr(expr);\n      }\n    }\n\n    // extra operations :\n    // $username = $_GET['user'] ?? 'nobody';\n    if (this.token === this.tok.T_COALESCE) {\n      return result(\"bin\", \"??\", expr, this.next().read_expr());\n    }\n\n    // extra operations :\n    // $username = $_GET['user'] ? true : false;\n    if (this.token === \"?\") {\n      let trueArg = null;\n      if (this.next().token !== \":\") {\n        trueArg = this.read_expr();\n      }\n      this.expect(\":\") && this.next();\n      return result(\"retif\", expr, trueArg, this.read_expr());\n    } else {\n      // see #193\n      result.destroy(expr);\n    }\n\n    return expr;\n  },\n\n  /*\n   * Reads a cast expression\n   */\n  read_expr_cast: function (type) {\n    return this.node(\"cast\")(type, this.text(), this.next().read_expr());\n  },\n\n  /*\n   * Read a isset variable\n   */\n  read_isset_variable: function () {\n    return this.read_expr();\n  },\n\n  /*\n   * Reads isset variables\n   */\n  read_isset_variables: function () {\n    return this.read_function_list(this.read_isset_variable, \",\");\n  },\n\n  /*\n   * Reads internal PHP functions\n   */\n  read_internal_functions_in_yacc: function () {\n    let result = null;\n    switch (this.token) {\n      case this.tok.T_ISSET:\n        {\n          result = this.node(\"isset\");\n          if (this.next().expect(\"(\")) {\n            this.next();\n          }\n          const variables = this.read_isset_variables();\n          if (this.expect(\")\")) {\n            this.next();\n          }\n          result = result(variables);\n        }\n        break;\n      case this.tok.T_EMPTY:\n        {\n          result = this.node(\"empty\");\n          if (this.next().expect(\"(\")) {\n            this.next();\n          }\n          const expression = this.read_expr();\n          if (this.expect(\")\")) {\n            this.next();\n          }\n          result = result(expression);\n        }\n        break;\n      case this.tok.T_INCLUDE:\n        result = this.node(\"include\")(false, false, this.next().read_expr());\n        break;\n      case this.tok.T_INCLUDE_ONCE:\n        result = this.node(\"include\")(true, false, this.next().read_expr());\n        break;\n      case this.tok.T_EVAL:\n        {\n          result = this.node(\"eval\");\n          if (this.next().expect(\"(\")) {\n            this.next();\n          }\n          const expr = this.read_expr();\n          if (this.expect(\")\")) {\n            this.next();\n          }\n          result = result(expr);\n        }\n        break;\n      case this.tok.T_REQUIRE:\n        result = this.node(\"include\")(false, true, this.next().read_expr());\n        break;\n      case this.tok.T_REQUIRE_ONCE:\n        result = this.node(\"include\")(true, true, this.next().read_expr());\n        break;\n    }\n\n    return result;\n  },\n\n  /*\n   * Reads optional expression\n   */\n  read_optional_expr: function (stopToken) {\n    if (this.token !== stopToken) {\n      return this.read_expr();\n    }\n\n    return null;\n  },\n\n  /*\n   * Reads exit expression\n   */\n  read_exit_expr: function () {\n    let expression = null;\n\n    if (this.token === \"(\") {\n      this.next();\n      expression = this.read_optional_expr(\")\");\n      this.expect(\")\") && this.next();\n    }\n\n    return expression;\n  },\n\n  /*\n   * ```ebnf\n   * Reads an expression\n   *  expr ::= @todo\n   * ```\n   */\n  read_expr_item: function () {\n    let result,\n      expr,\n      attrs = [];\n    if (this.token === \"+\") {\n      return this.node(\"unary\")(\"+\", this.next().read_expr());\n    }\n    if (this.token === \"-\") {\n      return this.node(\"unary\")(\"-\", this.next().read_expr());\n    }\n    if (this.token === \"!\") {\n      return this.node(\"unary\")(\"!\", this.next().read_expr());\n    }\n    if (this.token === \"~\") {\n      return this.node(\"unary\")(\"~\", this.next().read_expr());\n    }\n\n    if (this.token === \"(\") {\n      expr = this.next().read_expr();\n      expr.parenthesizedExpression = true;\n      this.expect(\")\") && this.next();\n      return this.handleDereferencable(expr);\n    }\n\n    if (this.token === \"`\") {\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1048\n      return this.read_encapsed_string(\"`\");\n    }\n\n    if (this.token === this.tok.T_LIST) {\n      let assign = null;\n      const isInner = this.innerList;\n      result = this.node(\"list\");\n      if (!isInner) {\n        assign = this.node(\"assign\");\n      }\n      if (this.next().expect(\"(\")) {\n        this.next();\n      }\n\n      if (!this.innerList) this.innerList = true;\n\n      // reads inner items\n      const assignList = this.read_array_pair_list(false);\n      if (this.expect(\")\")) {\n        this.next();\n      }\n\n      // check if contains at least one assignment statement\n      let hasItem = false;\n      for (let i = 0; i < assignList.length; i++) {\n        if (assignList[i] !== null && assignList[i].kind !== \"noop\") {\n          hasItem = true;\n          break;\n        }\n      }\n      if (!hasItem) {\n        /* istanbul ignore next */\n        this.raiseError(\n          \"Fatal Error :  Cannot use empty list on line \" +\n            this.lexer.yylloc.first_line\n        );\n      }\n\n      // handles the node resolution\n      if (!isInner) {\n        this.innerList = false;\n        if (this.expect(\"=\")) {\n          return assign(\n            result(assignList, false),\n            this.next().read_expr(),\n            \"=\"\n          );\n        } else {\n          // error fallback : list($a, $b);\n          /* istanbul ignore next */\n          return result(assignList, false);\n        }\n      } else {\n        return result(assignList, false);\n      }\n    }\n\n    if (this.token === this.tok.T_ATTRIBUTE) {\n      attrs = this.read_attr_list();\n    }\n\n    if (this.token === this.tok.T_CLONE) {\n      return this.node(\"clone\")(this.next().read_expr());\n    }\n\n    switch (this.token) {\n      case this.tok.T_INC:\n        return this.node(\"pre\")(\"+\", this.next().read_variable(false, false));\n\n      case this.tok.T_DEC:\n        return this.node(\"pre\")(\"-\", this.next().read_variable(false, false));\n\n      case this.tok.T_NEW:\n        return this.read_new_expr();\n\n      case this.tok.T_ISSET:\n      case this.tok.T_EMPTY:\n      case this.tok.T_INCLUDE:\n      case this.tok.T_INCLUDE_ONCE:\n      case this.tok.T_EVAL:\n      case this.tok.T_REQUIRE:\n      case this.tok.T_REQUIRE_ONCE:\n        return this.read_internal_functions_in_yacc();\n\n      case this.tok.T_MATCH:\n        return this.read_match_expression();\n      case this.tok.T_INT_CAST:\n        return this.read_expr_cast(\"int\");\n\n      case this.tok.T_DOUBLE_CAST:\n        return this.read_expr_cast(\"float\");\n\n      case this.tok.T_STRING_CAST:\n        return this.read_expr_cast(\n          this.text().indexOf(\"binary\") !== -1 ? \"binary\" : \"string\"\n        );\n\n      case this.tok.T_ARRAY_CAST:\n        return this.read_expr_cast(\"array\");\n\n      case this.tok.T_OBJECT_CAST:\n        return this.read_expr_cast(\"object\");\n\n      case this.tok.T_BOOL_CAST:\n        return this.read_expr_cast(\"bool\");\n\n      case this.tok.T_UNSET_CAST:\n        return this.read_expr_cast(\"unset\");\n\n      case this.tok.T_THROW: {\n        if (this.version < 800) {\n          this.raiseError(\"PHP 8+ is required to use throw as an expression\");\n        }\n        const result = this.node(\"throw\");\n        const expr = this.next().read_expr();\n        return result(expr);\n      }\n      case this.tok.T_EXIT: {\n        const useDie = this.lexer.yytext.toLowerCase() === \"die\";\n        result = this.node(\"exit\");\n        this.next();\n        const expression = this.read_exit_expr();\n        return result(expression, useDie);\n      }\n\n      case this.tok.T_PRINT:\n        return this.node(\"print\")(this.next().read_expr());\n\n      // T_YIELD (expr (T_DOUBLE_ARROW expr)?)?\n      case this.tok.T_YIELD: {\n        let value = null;\n        let key = null;\n        result = this.node(\"yield\");\n        if (this.next().is(\"EXPR\")) {\n          // reads the yield return value\n          value = this.read_expr();\n          if (this.token === this.tok.T_DOUBLE_ARROW) {\n            // reads the yield returned key\n            key = value;\n            value = this.next().read_expr();\n          }\n        }\n        return result(value, key);\n      }\n\n      // T_YIELD_FROM expr\n      case this.tok.T_YIELD_FROM:\n        result = this.node(\"yieldfrom\");\n        expr = this.next().read_expr();\n        return result(expr);\n\n      case this.tok.T_FN:\n      case this.tok.T_FUNCTION:\n        return this.read_inline_function(undefined, attrs);\n\n      case this.tok.T_STATIC: {\n        const backup = [this.token, this.lexer.getState()];\n        this.next();\n        if (\n          this.token === this.tok.T_FUNCTION ||\n          (this.version >= 704 && this.token === this.tok.T_FN)\n        ) {\n          // handles static function\n          return this.read_inline_function([0, 1, 0], attrs);\n        } else {\n          // rollback\n          this.lexer.tokens.push(backup);\n          this.next();\n        }\n      }\n    }\n\n    // SCALAR | VARIABLE\n    if (this.is(\"VARIABLE\")) {\n      result = this.node();\n      expr = this.read_variable(false, false);\n\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L877\n      // should accept only a variable\n      const isConst =\n        expr.kind === \"identifier\" ||\n        (expr.kind === \"staticlookup\" && expr.offset.kind === \"identifier\");\n\n      // VARIABLES SPECIFIC OPERATIONS\n      switch (this.token) {\n        case \"=\": {\n          if (isConst) this.error(\"VARIABLE\");\n          if (this.next().token == \"&\") {\n            return this.read_assignref(result, expr);\n          }\n          return result(\"assign\", expr, this.read_expr(), \"=\");\n        }\n\n        // operations :\n        case this.tok.T_PLUS_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"+=\");\n\n        case this.tok.T_MINUS_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"-=\");\n\n        case this.tok.T_MUL_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"*=\");\n\n        case this.tok.T_POW_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"**=\");\n\n        case this.tok.T_DIV_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"/=\");\n\n        case this.tok.T_CONCAT_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \".=\");\n\n        case this.tok.T_MOD_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"%=\");\n\n        case this.tok.T_AND_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"&=\");\n\n        case this.tok.T_OR_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"|=\");\n\n        case this.tok.T_XOR_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"^=\");\n\n        case this.tok.T_SL_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"<<=\");\n\n        case this.tok.T_SR_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \">>=\");\n\n        case this.tok.T_COALESCE_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"??=\");\n\n        case this.tok.T_INC:\n          if (isConst) this.error(\"VARIABLE\");\n          this.next();\n          return result(\"post\", \"+\", expr);\n        case this.tok.T_DEC:\n          if (isConst) this.error(\"VARIABLE\");\n          this.next();\n          return result(\"post\", \"-\", expr);\n        default:\n          // see #193\n          result.destroy(expr);\n      }\n    } else if (this.is(\"SCALAR\")) {\n      result = this.node();\n      expr = this.read_scalar();\n      if (expr.kind === \"array\" && expr.shortForm && this.token === \"=\") {\n        // list assign\n        const list = this.convertToList(expr);\n        if (expr.loc) list.loc = expr.loc;\n        const right = this.next().read_expr();\n        return result(\"assign\", list, right, \"=\");\n      } else {\n        // see #189 - swap docs on nodes\n        result.destroy(expr);\n      }\n      // classic array\n      return this.handleDereferencable(expr);\n    } else {\n      this.error(\"EXPR\");\n      this.next();\n    }\n\n    // returns variable | scalar\n    return expr;\n  },\n\n  /*\n   * Recursively convert nested array to nested list.\n   */\n  convertToList: function (array) {\n    const convertedItems = array.items.map((entry) => {\n      if (\n        entry.value &&\n        entry.value.kind === \"array\" &&\n        entry.value.shortForm\n      ) {\n        entry.value = this.convertToList(entry.value);\n      }\n      return entry;\n    });\n    const node = this.node(\"list\")(convertedItems, true);\n    if (array.loc) node.loc = array.loc;\n    if (array.leadingComments) node.leadingComments = array.leadingComments;\n    if (array.trailingComments) node.trailingComments = array.trailingComments;\n    return node;\n  },\n\n  /*\n   * Reads assignment\n   * @param {*} left\n   */\n  read_assignref: function (result, left) {\n    this.next();\n    let right;\n    if (this.token === this.tok.T_NEW) {\n      if (this.version >= 700) {\n        this.error();\n      }\n      right = this.read_new_expr();\n    } else {\n      right = this.read_variable(false, false);\n    }\n\n    return result(\"assignref\", left, right);\n  },\n\n  /*\n   *\n   * inline_function:\n   * \t\tfunction returns_ref backup_doc_comment '(' parameter_list ')' lexical_vars return_type\n   * \t\tbackup_fn_flags '{' inner_statement_list '}' backup_fn_flags\n   * \t\t\t{ $$ = zend_ast_create_decl(ZEND_AST_CLOSURE, $2 | $13, $1, $3,\n   * \t\t\t\t  zend_string_init(\"{closure}\", sizeof(\"{closure}\") - 1, 0),\n   * \t\t\t\t  $5, $7, $11, $8); CG(extra_fn_flags) = $9; }\n   * \t|\tfn returns_ref '(' parameter_list ')' return_type backup_doc_comment T_DOUBLE_ARROW backup_fn_flags backup_lex_pos expr backup_fn_flags\n   * \t\t\t{ $$ = zend_ast_create_decl(ZEND_AST_ARROW_FUNC, $2 | $12, $1, $7,\n   * \t\t\t\t  zend_string_init(\"{closure}\", sizeof(\"{closure}\") - 1, 0), $4, NULL,\n   * \t\t\t\t  zend_ast_create(ZEND_AST_RETURN, $11), $6);\n   * \t\t\t\t  ((zend_ast_decl *) $$)->lex_pos = $10;\n   * \t\t\t\t  CG(extra_fn_flags) = $9; }   *\n   */\n  read_inline_function: function (flags, attrs) {\n    if (this.token === this.tok.T_FUNCTION) {\n      const result = this.read_function(true, flags, attrs);\n      result.attrGroups = attrs;\n      return result;\n    }\n    // introduced in PHP 7.4\n    if (!this.version >= 704) {\n      this.raiseError(\"Arrow Functions are not allowed\");\n    }\n    // as an arrowfunc\n    const node = this.node(\"arrowfunc\");\n    // eat T_FN\n    if (this.expect(this.tok.T_FN)) this.next();\n    // check the &\n    const isRef = this.is_reference();\n    // ...\n    if (this.expect(\"(\")) this.next();\n    const params = this.read_parameter_list();\n    if (this.expect(\")\")) this.next();\n    let nullable = false;\n    let returnType = null;\n    if (this.token === \":\") {\n      if (this.next().token === \"?\") {\n        nullable = true;\n        this.next();\n      }\n      returnType = this.read_types();\n    }\n    if (this.expect(this.tok.T_DOUBLE_ARROW)) this.next();\n    const body = this.read_expr();\n    const result = node(\n      params,\n      isRef,\n      body,\n      returnType,\n      nullable,\n      flags ? true : false\n    );\n    result.attrGroups = attrs;\n    return result;\n  },\n\n  read_match_expression: function () {\n    const node = this.node(\"match\");\n    this.expect(this.tok.T_MATCH) && this.next();\n    if (this.version < 800) {\n      this.raiseError(\"Match statements are not allowed before PHP 8\");\n    }\n    let cond = null;\n    let arms = [];\n    if (this.expect(\"(\")) this.next();\n    cond = this.read_expr();\n    if (this.expect(\")\")) this.next();\n    if (this.expect(\"{\")) this.next();\n    arms = this.read_match_arms();\n    if (this.expect(\"}\")) this.next();\n    return node(cond, arms);\n  },\n\n  read_match_arms: function () {\n    return this.read_list(() => this.read_match_arm(), \",\", true);\n  },\n\n  read_match_arm: function () {\n    if (this.token === \"}\") {\n      return;\n    }\n    return this.node(\"matcharm\")(this.read_match_arm_conds(), this.read_expr());\n  },\n\n  read_match_arm_conds: function () {\n    let conds = [];\n    if (this.token === this.tok.T_DEFAULT) {\n      conds = null;\n      this.next();\n    } else {\n      conds.push(this.read_expr());\n      while (this.token === \",\") {\n        this.next();\n        if (this.token === this.tok.T_DOUBLE_ARROW) {\n          this.next();\n          return conds;\n        }\n        conds.push(this.read_expr());\n      }\n    }\n    if (this.expect(this.tok.T_DOUBLE_ARROW)) {\n      this.next();\n    }\n    return conds;\n  },\n\n  read_attribute() {\n    const name = this.text();\n    let args = [];\n    this.next();\n    if (this.token === \"(\") {\n      args = this.read_argument_list();\n    }\n    return this.node(\"attribute\")(name, args);\n  },\n  read_attr_list() {\n    const list = [];\n    if (this.token === this.tok.T_ATTRIBUTE) {\n      do {\n        const attrGr = this.node(\"attrgroup\")([]);\n        this.next();\n        attrGr.attrs.push(this.read_attribute());\n        while (this.token === \",\") {\n          this.next();\n          if (this.token !== \"]\") attrGr.attrs.push(this.read_attribute());\n        }\n        list.push(attrGr);\n        this.expect(\"]\");\n        this.next();\n      } while (this.token === this.tok.T_ATTRIBUTE);\n    }\n    return list;\n  },\n\n  /*\n   * ```ebnf\n   *    new_expr ::= T_NEW (namespace_name function_argument_list) | (T_CLASS ... class declaration)\n   * ```\n   * https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L850\n   */\n  read_new_expr: function () {\n    const result = this.node(\"new\");\n    this.expect(this.tok.T_NEW) && this.next();\n    let args = [];\n    const attrs = this.read_attr_list();\n    if (this.token === this.tok.T_CLASS) {\n      const what = this.node(\"class\");\n      // Annonymous class declaration\n      if (this.next().token === \"(\") {\n        args = this.read_argument_list();\n      }\n      const propExtends = this.read_extends_from();\n      const propImplements = this.read_implements_list();\n      let body = null;\n      if (this.expect(\"{\")) {\n        body = this.next().read_class_body(true, false);\n      }\n      const whatNode = what(null, propExtends, propImplements, body, [0, 0, 0]);\n      whatNode.attrGroups = attrs;\n      return result(whatNode, args);\n    }\n    // Already existing class\n    let name = this.read_new_class_name();\n    while (this.token === \"[\") {\n      const offsetNode = this.node(\"offsetlookup\");\n      const offset = this.next().read_encaps_var_offset();\n      this.expect(\"]\") && this.next();\n      name = offsetNode(name, offset);\n    }\n    if (this.token === \"(\") {\n      args = this.read_argument_list();\n    }\n    return result(name, args);\n  },\n  /*\n   * Reads a class name\n   * ```ebnf\n   * read_new_class_name ::= namespace_name | variable\n   * ```\n   */\n  read_new_class_name: function () {\n    if (\n      this.token === this.tok.T_NS_SEPARATOR ||\n      this.token === this.tok.T_NAME_RELATIVE ||\n      this.token === this.tok.T_NAME_QUALIFIED ||\n      this.token === this.tok.T_NAME_FULLY_QUALIFIED ||\n      this.token === this.tok.T_STRING ||\n      this.token === this.tok.T_NAMESPACE\n    ) {\n      let result = this.read_namespace_name(true);\n      if (this.token === this.tok.T_DOUBLE_COLON) {\n        result = this.read_static_getter(result);\n      }\n      return result;\n    } else if (this.is(\"VARIABLE\")) {\n      return this.read_variable(true, false);\n    } else {\n      this.expect([this.tok.T_STRING, \"VARIABLE\"]);\n    }\n  },\n  handleDereferencable: function (expr) {\n    while (this.token !== this.EOF) {\n      if (\n        this.token === this.tok.T_OBJECT_OPERATOR ||\n        this.token === this.tok.T_DOUBLE_COLON\n      ) {\n        expr = this.recursive_variable_chain_scan(expr, false, false, true);\n      } else if (this.token === this.tok.T_CURLY_OPEN || this.token === \"[\") {\n        expr = this.read_dereferencable(expr);\n      } else if (this.token === \"(\") {\n        // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1118\n        expr = this.node(\"call\")(expr, this.read_argument_list());\n      } else {\n        return expr;\n      }\n    }\n    return expr;\n  },\n};\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /*\n   * reading an enum\n   * ```ebnf\n   * enum ::= enum_scope? T_ENUM T_STRING (':' NAMESPACE_NAME)? (T_IMPLEMENTS (NAMESPACE_NAME ',')* NAMESPACE_NAME)? '{' ENUM_BODY '}'\n   * ```\n   */\n  read_enum_declaration_statement: function (attrs) {\n    const result = this.node(\"enum\");\n    // graceful mode : ignore token & go next\n    if (!this.expect(this.tok.T_ENUM)) {\n      return null;\n    }\n    this.next().expect(this.tok.T_STRING);\n    let propName = this.node(\"identifier\");\n    const name = this.text();\n    this.next();\n    propName = propName(name);\n    const valueType = this.read_enum_value_type();\n    const propImplements = this.read_implements_list();\n    this.expect(\"{\");\n    const body = this.next().read_class_body(false, true);\n    const node = result(propName, valueType, propImplements, body);\n    if (attrs) node.attrGroups = attrs;\n    return node;\n  },\n\n  read_enum_value_type: function () {\n    if (this.token === \":\") {\n      return this.next().read_namespace_name();\n    }\n\n    return null;\n  },\n\n  read_enum_case: function () {\n    this.expect(this.tok.T_CASE);\n    const result = this.node(\"enumcase\");\n    let caseName = this.node(\"identifier\");\n    const name = this.next().text();\n    this.next();\n    caseName = caseName(name);\n\n    const value = this.token === \"=\" ? this.next().read_expr() : null;\n    this.expect(\";\");\n\n    return result(caseName, value);\n  },\n};\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /*\n   * checks if current token is a reference keyword\n   */\n  is_reference: function () {\n    if (this.token === \"&\") {\n      this.next();\n      return true;\n    }\n    return false;\n  },\n  /*\n   * checks if current token is a variadic keyword\n   */\n  is_variadic: function () {\n    if (this.token === this.tok.T_ELLIPSIS) {\n      this.next();\n      return true;\n    }\n    return false;\n  },\n  /*\n   * reading a function\n   * ```ebnf\n   * function ::= function_declaration code_block\n   * ```\n   */\n  read_function: function (closure, flag, attrs, locStart) {\n    const result = this.read_function_declaration(\n      closure ? 1 : flag ? 2 : 0,\n      flag && flag[1] === 1,\n      attrs || [],\n      locStart\n    );\n    if (flag && flag[2] == 1) {\n      // abstract function :\n      result.parseFlags(flag);\n      if (this.expect(\";\")) {\n        this.next();\n      }\n    } else {\n      if (this.expect(\"{\")) {\n        result.body = this.read_code_block(false);\n        if (result.loc && result.body.loc) {\n          result.loc.end = result.body.loc.end;\n        }\n      }\n      if (!closure && flag) {\n        result.parseFlags(flag);\n      }\n    }\n    return result;\n  },\n  /*\n   * reads a function declaration (without his body)\n   * ```ebnf\n   * function_declaration ::= T_FUNCTION '&'?  T_STRING '(' parameter_list ')'\n   * ```\n   */\n  read_function_declaration: function (type, isStatic, attrs, locStart) {\n    let nodeName = \"function\";\n    if (type === 1) {\n      nodeName = \"closure\";\n    } else if (type === 2) {\n      nodeName = \"method\";\n    }\n    const result = this.node(nodeName);\n\n    if (this.expect(this.tok.T_FUNCTION)) {\n      this.next();\n    }\n    const isRef = this.is_reference();\n    let name = false,\n      use = [],\n      returnType = null,\n      nullable = false;\n    if (type !== 1) {\n      const nameNode = this.node(\"identifier\");\n      if (type === 2) {\n        if (this.version >= 700) {\n          if (this.token === this.tok.T_STRING || this.is(\"IDENTIFIER\")) {\n            name = this.text();\n            this.next();\n          } else if (this.version < 704) {\n            this.error(\"IDENTIFIER\");\n          }\n        } else if (this.token === this.tok.T_STRING) {\n          name = this.text();\n          this.next();\n        } else {\n          this.error(\"IDENTIFIER\");\n        }\n      } else {\n        if (this.version >= 700) {\n          if (this.token === this.tok.T_STRING) {\n            name = this.text();\n            this.next();\n          } else if (this.version >= 704) {\n            if (!this.expect(\"(\")) {\n              this.next();\n            }\n          } else {\n            this.error(this.tok.T_STRING);\n            this.next();\n          }\n        } else {\n          if (this.expect(this.tok.T_STRING)) {\n            name = this.text();\n          }\n          this.next();\n        }\n      }\n      name = nameNode(name);\n    }\n    if (this.expect(\"(\")) this.next();\n    const params = this.read_parameter_list(name.name === \"__construct\");\n    if (this.expect(\")\")) this.next();\n    if (type === 1) {\n      use = this.read_lexical_vars();\n    }\n    if (this.token === \":\") {\n      if (this.next().token === \"?\") {\n        nullable = true;\n        this.next();\n      }\n      returnType = this.read_types();\n    }\n    const apply_attrgroup_location = (node) => {\n      node.attrGroups = attrs || [];\n\n      if (locStart && node.loc) {\n        node.loc.start = locStart;\n        if (node.loc.source) {\n          node.loc.source = this.lexer._input.substr(\n            node.loc.start.offset,\n            node.loc.end.offset - node.loc.start.offset\n          );\n        }\n      }\n      return node;\n    };\n\n    if (type === 1) {\n      // closure\n      return apply_attrgroup_location(\n        result(params, isRef, use, returnType, nullable, isStatic)\n      );\n    }\n    return apply_attrgroup_location(\n      result(name, params, isRef, returnType, nullable)\n    );\n  },\n\n  read_lexical_vars: function () {\n    let result = [];\n\n    if (this.token === this.tok.T_USE) {\n      this.next();\n      this.expect(\"(\") && this.next();\n      result = this.read_lexical_var_list();\n      this.expect(\")\") && this.next();\n    }\n\n    return result;\n  },\n\n  read_list_with_dangling_comma: function (item) {\n    const result = [];\n\n    while (this.token != this.EOF) {\n      result.push(item());\n      if (this.token == \",\") {\n        this.next();\n        if (this.version >= 800 && this.token === \")\") {\n          return result;\n        }\n      } else if (this.token == \")\") {\n        break;\n      } else {\n        this.error([\",\", \")\"]);\n        break;\n      }\n    }\n    return result;\n  },\n\n  read_lexical_var_list: function () {\n    return this.read_list_with_dangling_comma(this.read_lexical_var.bind(this));\n  },\n\n  /*\n   * ```ebnf\n   * lexical_var ::= '&'? T_VARIABLE\n   * ```\n   */\n  read_lexical_var: function () {\n    if (this.token === \"&\") {\n      return this.read_byref(this.read_lexical_var.bind(this));\n    }\n    const result = this.node(\"variable\");\n    this.expect(this.tok.T_VARIABLE);\n    const name = this.text().substring(1);\n    this.next();\n    return result(name, false);\n  },\n  /*\n   * reads a list of parameters\n   * ```ebnf\n   *  parameter_list ::= (parameter ',')* parameter?\n   * ```\n   */\n  read_parameter_list: function (is_class_constructor) {\n    if (this.token !== \")\") {\n      let wasVariadic = false;\n\n      return this.read_list_with_dangling_comma(\n        function () {\n          const parameter = this.read_parameter(is_class_constructor);\n          if (parameter) {\n            // variadic parameters can only be defined at the end of the parameter list\n            if (wasVariadic) {\n              this.raiseError(\n                \"Unexpected parameter after a variadic parameter\"\n              );\n            }\n            if (parameter.variadic) {\n              wasVariadic = true;\n            }\n          }\n          return parameter;\n        }.bind(this),\n        \",\"\n      );\n    }\n\n    return [];\n  },\n  /*\n   * ```ebnf\n   *  parameter ::= type? '&'? T_ELLIPSIS? T_VARIABLE ('=' expr)?\n   * ```\n   * @see https://github.com/php/php-src/blob/493524454d66adde84e00d249d607ecd540de99f/Zend/zend_language_parser.y#L640\n   */\n  read_parameter: function (is_class_constructor) {\n    const node = this.node(\"parameter\");\n    let parameterName = null;\n    let value = null;\n    let types = null;\n    let nullable = false;\n    let readonly = false;\n    let attrs = [];\n    if (this.token === this.tok.T_ATTRIBUTE) attrs = this.read_attr_list();\n\n    if (this.version >= 801 && this.token === this.tok.T_READ_ONLY) {\n      if (is_class_constructor) {\n        this.next();\n        readonly = true;\n      } else {\n        this.raiseError(\n          \"readonly properties can be used only on class constructor\"\n        );\n      }\n    }\n\n    const flags = this.read_promoted();\n\n    if (\n      !readonly &&\n      this.version >= 801 &&\n      this.token === this.tok.T_READ_ONLY\n    ) {\n      if (is_class_constructor) {\n        this.next();\n        readonly = true;\n      } else {\n        this.raiseError(\n          \"readonly properties can be used only on class constructor\"\n        );\n      }\n    }\n\n    if (this.token === \"?\") {\n      this.next();\n      nullable = true;\n    }\n    types = this.read_types();\n    if (nullable && !types) {\n      this.raiseError(\n        \"Expecting a type definition combined with nullable operator\"\n      );\n    }\n    const isRef = this.is_reference();\n    const isVariadic = this.is_variadic();\n    if (this.expect(this.tok.T_VARIABLE)) {\n      parameterName = this.node(\"identifier\");\n      const name = this.text().substring(1);\n      this.next();\n      parameterName = parameterName(name);\n    }\n    if (this.token == \"=\") {\n      value = this.next().read_expr();\n    }\n    const result = node(\n      parameterName,\n      types,\n      value,\n      isRef,\n      isVariadic,\n      readonly,\n      nullable,\n      flags\n    );\n    if (attrs) result.attrGroups = attrs;\n    return result;\n  },\n  read_types() {\n    const MODE_UNSET = \"unset\";\n    const MODE_UNION = \"union\";\n    const MODE_INTERSECTION = \"intersection\";\n\n    const types = [];\n    let mode = MODE_UNSET;\n    const type = this.read_type();\n    if (!type) return null;\n\n    // we have matched a single type\n    types.push(type);\n\n    // is the current token a:\n    // - | for union type\n    // - & for intersection type (> php 8.1)\n    while (this.token === \"|\" || (this.version >= 801 && this.token === \"&\")) {\n      const nextToken = this.peek();\n\n      if (\n        nextToken === this.tok.T_ELLIPSIS ||\n        nextToken === this.tok.T_VARIABLE\n      ) {\n        // the next token is part of the variable (or the variable itself),\n        // we're not gonna match anymore types\n        break;\n      }\n\n      if (mode === MODE_UNSET) {\n        // are we in union or intersection \"mode\"\n        mode = this.token === \"|\" ? MODE_UNION : MODE_INTERSECTION;\n      } else {\n        // it is not possible to mix \"modes\"\n        if (\n          (mode === MODE_UNION && this.token !== \"|\") ||\n          (mode === MODE_INTERSECTION && this.token !== \"&\")\n        ) {\n          this.raiseError(\n            'Unexpect token \"' + this.token + '\", \"|\" and \"&\" can not be mixed'\n          );\n        }\n      }\n\n      this.next();\n      types.push(this.read_type());\n    }\n    if (types.length === 1) {\n      return types[0];\n    } else {\n      return mode === MODE_INTERSECTION\n        ? this.node(\"intersectiontype\")(types)\n        : this.node(\"uniontype\")(types);\n    }\n  },\n  read_promoted() {\n    const MODIFIER_PUBLIC = 1;\n    const MODIFIER_PROTECTED = 2;\n    const MODIFIER_PRIVATE = 4;\n    if (this.token === this.tok.T_PUBLIC) {\n      this.next();\n      return MODIFIER_PUBLIC;\n    } else if (this.token === this.tok.T_PROTECTED) {\n      this.next();\n      return MODIFIER_PROTECTED;\n    } else if (this.token === this.tok.T_PRIVATE) {\n      this.next();\n      return MODIFIER_PRIVATE;\n    }\n    return 0;\n  },\n  /*\n   * Reads a list of arguments\n   * ```ebnf\n   *  function_argument_list ::= '(' (argument_list (',' argument_list)*)? ')'\n   * ```\n   */\n  read_argument_list: function () {\n    let result = [];\n    this.expect(\"(\") && this.next();\n    if (\n      this.version >= 801 &&\n      this.token === this.tok.T_ELLIPSIS &&\n      this.peek() === \")\"\n    ) {\n      result.push(this.node(\"variadicplaceholder\")());\n      this.next();\n    } else if (this.token !== \")\") {\n      result = this.read_non_empty_argument_list();\n    }\n    this.expect(\")\") && this.next();\n    return result;\n  },\n  /*\n   * Reads non empty argument list\n   */\n  read_non_empty_argument_list: function () {\n    let wasVariadic = false;\n\n    return this.read_function_list(\n      function () {\n        const argument = this.read_argument();\n        if (argument) {\n          const isVariadic = argument.kind === \"variadic\";\n          // variadic arguments can only be followed by other variadic arguments\n          if (wasVariadic && !isVariadic) {\n            this.raiseError(\n              \"Unexpected non-variadic argument after a variadic argument\"\n            );\n          }\n          if (isVariadic) {\n            wasVariadic = true;\n          }\n        }\n        return argument;\n      }.bind(this),\n      \",\"\n    );\n  },\n  /*\n   * ```ebnf\n   *    argument_list ::= T_STRING ':' expr | T_ELLIPSIS? expr\n   * ```\n   */\n  read_argument: function () {\n    if (this.token === this.tok.T_ELLIPSIS) {\n      return this.node(\"variadic\")(this.next().read_expr());\n    }\n    if (\n      this.token === this.tok.T_STRING ||\n      Object.values(this.lexer.keywords).includes(this.token)\n    ) {\n      const nextToken = this.peek();\n      if (nextToken === \":\") {\n        if (this.version < 800) {\n          this.raiseError(\"PHP 8+ is required to use named arguments\");\n        }\n        return this.node(\"namedargument\")(\n          this.text(),\n          this.next().next().read_expr()\n        );\n      }\n    }\n    return this.read_expr();\n  },\n  /*\n   * read type hinting\n   * ```ebnf\n   *  type ::= T_ARRAY | T_CALLABLE | namespace_name\n   * ```\n   */\n  read_type: function () {\n    const result = this.node();\n    if (this.token === this.tok.T_ARRAY || this.token === this.tok.T_CALLABLE) {\n      const type = this.text();\n      this.next();\n      return result(\"typereference\", type.toLowerCase(), type);\n    } else if (\n      this.token === this.tok.T_NAME_RELATIVE ||\n      this.token === this.tok.T_NAME_QUALIFIED ||\n      this.token === this.tok.T_NAME_FULLY_QUALIFIED ||\n      this.token === this.tok.T_STRING ||\n      this.token === this.tok.T_STATIC\n    ) {\n      const type = this.text();\n      const backup = [this.token, this.lexer.getState()];\n      this.next();\n      if (\n        this.token !== this.tok.T_NS_SEPARATOR &&\n        this.ast.typereference.types.indexOf(type.toLowerCase()) > -1\n      ) {\n        return result(\"typereference\", type.toLowerCase(), type);\n      } else {\n        // rollback a classic namespace\n        this.lexer.tokens.push(backup);\n        this.next();\n        // fix : destroy not consumed node (release comments)\n        result.destroy();\n        return this.read_namespace_name();\n      }\n    }\n    // fix : destroy not consumed node (release comments)\n    result.destroy();\n    return null;\n  },\n};\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /*\n   * Reads an IF statement\n   *\n   * ```ebnf\n   *  if ::= T_IF '(' expr ')' ':' ...\n   * ```\n   */\n  read_if: function () {\n    const result = this.node(\"if\");\n    const test = this.next().read_if_expr();\n    let body = null;\n    let alternate = null;\n    let shortForm = false;\n\n    if (this.token === \":\") {\n      shortForm = true;\n      this.next();\n      body = this.node(\"block\");\n      const items = [];\n      while (this.token !== this.EOF && this.token !== this.tok.T_ENDIF) {\n        if (this.token === this.tok.T_ELSEIF) {\n          alternate = this.read_elseif_short();\n          break;\n        } else if (this.token === this.tok.T_ELSE) {\n          alternate = this.read_else_short();\n          break;\n        }\n        items.push(this.read_inner_statement());\n      }\n      body = body(null, items);\n      this.expect(this.tok.T_ENDIF) && this.next();\n      this.expectEndOfStatement();\n    } else {\n      body = this.read_statement();\n      if (this.token === this.tok.T_ELSEIF) {\n        alternate = this.read_if();\n      } else if (this.token === this.tok.T_ELSE) {\n        alternate = this.next().read_statement();\n      }\n    }\n    return result(test, body, alternate, shortForm);\n  },\n  /*\n   * reads an if expression : '(' expr ')'\n   */\n  read_if_expr: function () {\n    this.expect(\"(\") && this.next();\n    const result = this.read_expr();\n    this.expect(\")\") && this.next();\n    return result;\n  },\n  /*\n   * reads an elseif (expr): statements\n   */\n  read_elseif_short: function () {\n    let alternate = null;\n    const result = this.node(\"if\");\n    const test = this.next().read_if_expr();\n    if (this.expect(\":\")) this.next();\n    const body = this.node(\"block\");\n    const items = [];\n    while (this.token != this.EOF && this.token !== this.tok.T_ENDIF) {\n      if (this.token === this.tok.T_ELSEIF) {\n        alternate = this.read_elseif_short();\n        break;\n      } else if (this.token === this.tok.T_ELSE) {\n        alternate = this.read_else_short();\n        break;\n      }\n      items.push(this.read_inner_statement());\n    }\n    return result(test, body(null, items), alternate, true);\n  },\n  /*\n   *\n   */\n  read_else_short: function () {\n    if (this.next().expect(\":\")) this.next();\n    const body = this.node(\"block\");\n    const items = [];\n    while (this.token != this.EOF && this.token !== this.tok.T_ENDIF) {\n      items.push(this.read_inner_statement());\n    }\n    return body(null, items);\n  },\n};\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /*\n   * Reads a while statement\n   * ```ebnf\n   * while ::= T_WHILE (statement | ':' inner_statement_list T_ENDWHILE ';')\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L587\n   * @return {While}\n   */\n  read_while: function () {\n    const result = this.node(\"while\");\n    this.expect(this.tok.T_WHILE) && this.next();\n    let test = null;\n    let body = null;\n    let shortForm = false;\n    if (this.expect(\"(\")) this.next();\n    test = this.read_expr();\n    if (this.expect(\")\")) this.next();\n    if (this.token === \":\") {\n      shortForm = true;\n      body = this.read_short_form(this.tok.T_ENDWHILE);\n    } else {\n      body = this.read_statement();\n    }\n    return result(test, body, shortForm);\n  },\n  /*\n   * Reads a do / while loop\n   * ```ebnf\n   * do ::= T_DO statement T_WHILE '(' expr ')' ';'\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L423\n   * @return {Do}\n   */\n  read_do: function () {\n    const result = this.node(\"do\");\n    this.expect(this.tok.T_DO) && this.next();\n    let test = null;\n    let body = null;\n    body = this.read_statement();\n    if (this.expect(this.tok.T_WHILE)) {\n      if (this.next().expect(\"(\")) this.next();\n      test = this.read_expr();\n      if (this.expect(\")\")) this.next();\n      if (this.expect(\";\")) this.next();\n    }\n    return result(test, body);\n  },\n  /*\n   * Read a for incremental loop\n   * ```ebnf\n   * for ::= T_FOR '(' for_exprs ';' for_exprs ';' for_exprs ')' for_statement\n   * for_statement ::= statement | ':' inner_statement_list T_ENDFOR ';'\n   * for_exprs ::= expr? (',' expr)*\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L425\n   * @return {For}\n   */\n  read_for: function () {\n    const result = this.node(\"for\");\n    this.expect(this.tok.T_FOR) && this.next();\n    let init = [];\n    let test = [];\n    let increment = [];\n    let body = null;\n    let shortForm = false;\n    if (this.expect(\"(\")) this.next();\n    if (this.token !== \";\") {\n      init = this.read_list(this.read_expr, \",\");\n      if (this.expect(\";\")) this.next();\n    } else {\n      this.next();\n    }\n    if (this.token !== \";\") {\n      test = this.read_list(this.read_expr, \",\");\n      if (this.expect(\";\")) this.next();\n    } else {\n      this.next();\n    }\n    if (this.token !== \")\") {\n      increment = this.read_list(this.read_expr, \",\");\n      if (this.expect(\")\")) this.next();\n    } else {\n      this.next();\n    }\n    if (this.token === \":\") {\n      shortForm = true;\n      body = this.read_short_form(this.tok.T_ENDFOR);\n    } else {\n      body = this.read_statement();\n    }\n    return result(init, test, increment, body, shortForm);\n  },\n  /*\n   * Reads a foreach loop\n   * ```ebnf\n   * foreach ::= '(' expr T_AS foreach_variable (T_DOUBLE_ARROW foreach_variable)? ')' statement\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L438\n   * @return {Foreach}\n   */\n  read_foreach: function () {\n    const result = this.node(\"foreach\");\n    this.expect(this.tok.T_FOREACH) && this.next();\n    let source = null;\n    let key = null;\n    let value = null;\n    let body = null;\n    let shortForm = false;\n    if (this.expect(\"(\")) this.next();\n    source = this.read_expr();\n    if (this.expect(this.tok.T_AS)) {\n      this.next();\n      value = this.read_foreach_variable();\n      if (this.token === this.tok.T_DOUBLE_ARROW) {\n        key = value;\n        value = this.next().read_foreach_variable();\n      }\n    }\n\n    // grammatically correct but not supported by PHP\n    if (key && key.kind === \"list\") {\n      this.raiseError(\"Fatal Error : Cannot use list as key element\");\n    }\n\n    if (this.expect(\")\")) this.next();\n\n    if (this.token === \":\") {\n      shortForm = true;\n      body = this.read_short_form(this.tok.T_ENDFOREACH);\n    } else {\n      body = this.read_statement();\n    }\n    return result(source, key, value, body, shortForm);\n  },\n  /*\n   * Reads a foreach variable statement\n   * ```ebnf\n   * foreach_variable =\n   *    variable |\n   *    '&' variable |\n   *    T_LIST '(' assignment_list ')' |\n   *    '[' assignment_list ']'\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L544\n   * @return {Expression}\n   */\n  read_foreach_variable: function () {\n    if (this.token === this.tok.T_LIST || this.token === \"[\") {\n      const isShort = this.token === \"[\";\n      const result = this.node(\"list\");\n      this.next();\n      if (!isShort && this.expect(\"(\")) this.next();\n      const assignList = this.read_array_pair_list(isShort);\n      if (this.expect(isShort ? \"]\" : \")\")) this.next();\n      return result(assignList, isShort);\n    } else {\n      return this.read_variable(false, false);\n    }\n  },\n};\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /*\n   * ```ebnf\n   * start ::= (namespace | top_statement)*\n   * ```\n   */\n  read_start: function () {\n    if (this.token == this.tok.T_NAMESPACE) {\n      return this.read_namespace();\n    } else {\n      return this.read_top_statement();\n    }\n  },\n};\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /*\n   * Reads a namespace declaration block\n   * ```ebnf\n   * namespace ::= T_NAMESPACE namespace_name? '{'\n   *    top_statements\n   * '}'\n   * | T_NAMESPACE namespace_name ';' top_statements\n   * ```\n   * @see http://php.net/manual/en/language.namespaces.php\n   * @return {Namespace}\n   */\n  read_namespace: function () {\n    const result = this.node(\"namespace\");\n    let body;\n    this.expect(this.tok.T_NAMESPACE) && this.next();\n    let name;\n\n    if (this.token === \"{\") {\n      name = {\n        name: [\"\"],\n      };\n    } else {\n      name = this.read_namespace_name();\n    }\n    this.currentNamespace = name;\n\n    if (this.token === \";\") {\n      this.currentNamespace = name;\n      body = this.next().read_top_statements();\n      this.expect(this.EOF);\n      return result(name.name, body, false);\n    } else if (this.token === \"{\") {\n      this.currentNamespace = name;\n      body = this.next().read_top_statements();\n      this.expect(\"}\") && this.next();\n      if (\n        body.length === 0 &&\n        this.extractDoc &&\n        this._docs.length > this._docIndex\n      ) {\n        body.push(this.node(\"noop\")());\n      }\n      return result(name.name, body, true);\n    } else {\n      this.error([\"{\", \";\"]);\n      // graceful mode :\n      this.currentNamespace = name;\n      body = this.read_top_statements();\n      this.expect(this.EOF);\n      return result(name, body, false);\n    }\n  },\n  /*\n   * Reads a namespace name\n   * ```ebnf\n   *  namespace_name ::= T_NS_SEPARATOR? (T_STRING T_NS_SEPARATOR)* T_STRING\n   * ```\n   * @see http://php.net/manual/en/language.namespaces.rules.php\n   * @return {Reference}\n   */\n  read_namespace_name: function (resolveReference) {\n    const result = this.node();\n    let resolution;\n    let name = this.text();\n    switch (this.token) {\n      case this.tok.T_NAME_RELATIVE:\n        resolution = this.ast.name.RELATIVE_NAME;\n        name = name.replace(/^namespace\\\\/, \"\");\n        break;\n      case this.tok.T_NAME_QUALIFIED:\n        resolution = this.ast.name.QUALIFIED_NAME;\n        break;\n      case this.tok.T_NAME_FULLY_QUALIFIED:\n        resolution = this.ast.name.FULL_QUALIFIED_NAME;\n        break;\n      default:\n        resolution = this.ast.name.UNQUALIFIED_NAME;\n        if (!this.expect(this.tok.T_STRING)) {\n          // graceful mode\n          return result(\"name\", \"\", this.ast.name.FULL_QUALIFIED_NAME);\n        }\n    }\n\n    this.next();\n\n    if (resolveReference || this.token !== \"(\") {\n      if (name.toLowerCase() === \"parent\") {\n        return result(\"parentreference\", name);\n      } else if (name.toLowerCase() === \"self\") {\n        return result(\"selfreference\", name);\n      }\n    }\n\n    return result(\"name\", name, resolution);\n  },\n  /*\n   * Reads a use statement\n   * ```ebnf\n   * use_statement ::= T_USE\n   *   use_type? use_declarations |\n   *   use_type use_statement '{' use_declarations '}' |\n   *   use_statement '{' use_declarations(=>typed) '}'\n   * ';'\n   * ```\n   * @see http://php.net/manual/en/language.namespaces.importing.php\n   * @return {UseGroup}\n   */\n  read_use_statement: function () {\n    let result = this.node(\"usegroup\");\n    let items = [];\n    let name = null;\n    this.expect(this.tok.T_USE) && this.next();\n    const type = this.read_use_type();\n    items.push(this.read_use_declaration(false));\n    if (this.token === \",\") {\n      items = items.concat(this.next().read_use_declarations(false));\n    } else if (this.token === \"{\") {\n      name = items[0].name;\n      items = this.next().read_use_declarations(type === null);\n      this.expect(\"}\") && this.next();\n    }\n    result = result(name, type, items);\n    this.expect(\";\") && this.next();\n    return result;\n  },\n  /*\n   *\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1045\n   */\n  read_class_name_reference: function () {\n    // resolved as the same\n    return this.read_variable(true, false);\n  },\n  /*\n   * Reads a use declaration\n   * ```ebnf\n   * use_declaration ::= use_type? namespace_name use_alias\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L380\n   * @return {UseItem}\n   */\n  read_use_declaration: function (typed) {\n    const result = this.node(\"useitem\");\n    let type = null;\n    if (typed) type = this.read_use_type();\n    const name = this.read_namespace_name();\n    const alias = this.read_use_alias();\n    return result(name.name, alias, type);\n  },\n  /*\n   * Reads a list of use declarations\n   * ```ebnf\n   * use_declarations ::= use_declaration (',' use_declaration)*\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L380\n   * @return {UseItem[]}\n   */\n  read_use_declarations: function (typed) {\n    const result = [this.read_use_declaration(typed)];\n    while (this.token === \",\") {\n      this.next();\n      if (typed) {\n        if (\n          this.token !== this.tok.T_NAME_RELATIVE &&\n          this.token !== this.tok.T_NAME_QUALIFIED &&\n          this.token !== this.tok.T_NAME_FULLY_QUALIFIED &&\n          this.token !== this.tok.T_FUNCTION &&\n          this.token !== this.tok.T_CONST &&\n          this.token !== this.tok.T_STRING\n        ) {\n          break;\n        }\n      } else if (\n        this.token !== this.tok.T_NAME_RELATIVE &&\n        this.token !== this.tok.T_NAME_QUALIFIED &&\n        this.token !== this.tok.T_NAME_FULLY_QUALIFIED &&\n        this.token !== this.tok.T_STRING &&\n        this.token !== this.tok.T_NS_SEPARATOR\n      ) {\n        break;\n      }\n      result.push(this.read_use_declaration(typed));\n    }\n    return result;\n  },\n  /*\n   * Reads a use statement\n   * ```ebnf\n   * use_alias ::= (T_AS T_STRING)?\n   * ```\n   * @return {String|null}\n   */\n  read_use_alias: function () {\n    let result = null;\n    if (this.token === this.tok.T_AS) {\n      if (this.next().expect(this.tok.T_STRING)) {\n        const aliasName = this.node(\"identifier\");\n        const name = this.text();\n        this.next();\n        result = aliasName(name);\n      }\n    }\n    return result;\n  },\n  /*\n   * Reads the namespace type declaration\n   * ```ebnf\n   * use_type ::= (T_FUNCTION | T_CONST)?\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L335\n   * @return {String|null} Possible values : function, const\n   */\n  read_use_type: function () {\n    if (this.token === this.tok.T_FUNCTION) {\n      this.next();\n      return this.ast.useitem.TYPE_FUNCTION;\n    } else if (this.token === this.tok.T_CONST) {\n      this.next();\n      return this.ast.useitem.TYPE_CONST;\n    }\n    return null;\n  },\n};\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst specialChar = {\n  \"\\\\\": \"\\\\\",\n  $: \"$\",\n  n: \"\\n\",\n  r: \"\\r\",\n  t: \"\\t\",\n  f: String.fromCharCode(12),\n  v: String.fromCharCode(11),\n  e: String.fromCharCode(27),\n};\n\nmodule.exports = {\n  /*\n   * Unescape special chars\n   */\n  resolve_special_chars: function (text, doubleQuote) {\n    if (!doubleQuote) {\n      // single quote fix\n      return text.replace(/\\\\\\\\/g, \"\\\\\").replace(/\\\\'/g, \"'\");\n    }\n    return text\n      .replace(/\\\\\"/, '\"')\n      .replace(\n        /\\\\([\\\\$nrtfve]|[xX][0-9a-fA-F]{1,2}|[0-7]{1,3}|u{([0-9a-fA-F]+)})/g,\n        ($match, p1, p2) => {\n          if (specialChar[p1]) {\n            return specialChar[p1];\n          } else if (\"x\" === p1[0] || \"X\" === p1[0]) {\n            return String.fromCodePoint(parseInt(p1.substr(1), 16));\n          } else if (\"u\" === p1[0]) {\n            return String.fromCodePoint(parseInt(p2, 16));\n          } else {\n            return String.fromCodePoint(parseInt(p1, 8));\n          }\n        }\n      );\n  },\n\n  /*\n   * Remove all leading spaces each line for heredoc text if there is a indentation\n   * @param {string} text\n   * @param {number} indentation\n   * @param {boolean} indentation_uses_spaces\n   * @param {boolean} first_encaps_node if it is behind a variable, the first N spaces should not be removed\n   */\n  remove_heredoc_leading_whitespace_chars: function (\n    text,\n    indentation,\n    indentation_uses_spaces,\n    first_encaps_node\n  ) {\n    if (indentation === 0) {\n      return text;\n    }\n\n    this.check_heredoc_indentation_level(\n      text,\n      indentation,\n      indentation_uses_spaces,\n      first_encaps_node\n    );\n\n    const matchedChar = indentation_uses_spaces ? \" \" : \"\\t\";\n    const removementRegExp = new RegExp(\n      `\\\\n${matchedChar}{${indentation}}`,\n      \"g\"\n    );\n    const removementFirstEncapsNodeRegExp = new RegExp(\n      `^${matchedChar}{${indentation}}`\n    );\n\n    // Rough replace, need more check\n    if (first_encaps_node) {\n      // Remove text leading whitespace\n      text = text.replace(removementFirstEncapsNodeRegExp, \"\");\n    }\n\n    // Remove leading whitespace after \\n\n    return text.replace(removementRegExp, \"\\n\");\n  },\n\n  /*\n   * Check indentation level of heredoc in text, if mismatch, raiseError\n   * @param {string} text\n   * @param {number} indentation\n   * @param {boolean} indentation_uses_spaces\n   * @param {boolean} first_encaps_node if it is behind a variable, the first N spaces should not be removed\n   */\n  check_heredoc_indentation_level: function (\n    text,\n    indentation,\n    indentation_uses_spaces,\n    first_encaps_node\n  ) {\n    const textSize = text.length;\n    let offset = 0;\n    let leadingWhitespaceCharCount = 0;\n    /*\n     * @var inCoutingState {boolean} reset to true after a new line\n     * @private\n     */\n    let inCoutingState = true;\n    const chToCheck = indentation_uses_spaces ? \" \" : \"\\t\";\n    let inCheckState = false;\n    if (!first_encaps_node) {\n      // start from first \\n\n      offset = text.indexOf(\"\\n\");\n      // if no \\n, just return\n      if (offset === -1) {\n        return;\n      }\n      offset++;\n    }\n    while (offset < textSize) {\n      if (inCoutingState) {\n        if (text[offset] === chToCheck) {\n          leadingWhitespaceCharCount++;\n        } else {\n          inCheckState = true;\n        }\n      } else {\n        inCoutingState = false;\n      }\n\n      if (\n        text[offset] !== \"\\n\" &&\n        inCheckState &&\n        leadingWhitespaceCharCount < indentation\n      ) {\n        this.raiseError(\n          `Invalid body indentation level (expecting an indentation at least ${indentation})`\n        );\n      } else {\n        inCheckState = false;\n      }\n\n      if (text[offset] === \"\\n\") {\n        // Reset counting state\n        inCoutingState = true;\n        leadingWhitespaceCharCount = 0;\n      }\n      offset++;\n    }\n  },\n\n  /*\n   * Reads dereferencable scalar\n   */\n  read_dereferencable_scalar: function () {\n    let result = null;\n\n    switch (this.token) {\n      case this.tok.T_CONSTANT_ENCAPSED_STRING:\n        {\n          let value = this.node(\"string\");\n          const text = this.text();\n          let offset = 0;\n          if (text[0] === \"b\" || text[0] === \"B\") {\n            offset = 1;\n          }\n          const isDoubleQuote = text[offset] === '\"';\n          this.next();\n          const textValue = this.resolve_special_chars(\n            text.substring(offset + 1, text.length - 1),\n            isDoubleQuote\n          );\n          value = value(\n            isDoubleQuote,\n            textValue,\n            offset === 1, // unicode flag\n            text\n          );\n          if (this.token === this.tok.T_DOUBLE_COLON) {\n            // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1151\n            result = this.read_static_getter(value);\n          } else {\n            // dirrect string\n            result = value;\n          }\n        }\n        break;\n      case this.tok.T_ARRAY: // array parser\n        result = this.read_array();\n        break;\n      case \"[\": // short array format\n        result = this.read_array();\n        break;\n    }\n\n    return result;\n  },\n\n  /*\n   * ```ebnf\n   *  scalar ::= T_MAGIC_CONST\n   *       | T_LNUMBER | T_DNUMBER\n   *       | T_START_HEREDOC T_ENCAPSED_AND_WHITESPACE? T_END_HEREDOC\n   *       | '\"' encaps_list '\"'\n   *       | T_START_HEREDOC encaps_list T_END_HEREDOC\n   *       | namespace_name (T_DOUBLE_COLON T_STRING)?\n   * ```\n   */\n  read_scalar: function () {\n    if (this.is(\"T_MAGIC_CONST\")) {\n      return this.get_magic_constant();\n    } else {\n      let value, node;\n      switch (this.token) {\n        // NUMERIC\n        case this.tok.T_LNUMBER: // long\n        case this.tok.T_DNUMBER: {\n          // double\n          const result = this.node(\"number\");\n          value = this.text();\n          this.next();\n          return result(value, null);\n        }\n        case this.tok.T_START_HEREDOC:\n          if (this.lexer.curCondition === \"ST_NOWDOC\") {\n            const start = this.lexer.yylloc.first_offset;\n            node = this.node(\"nowdoc\");\n            value = this.next().text();\n            // strip the last line return char\n            if (this.lexer.heredoc_label.indentation > 0) {\n              value = value.substring(\n                0,\n                value.length - this.lexer.heredoc_label.indentation\n              );\n            }\n            const lastCh = value[value.length - 1];\n            if (lastCh === \"\\n\") {\n              if (value[value.length - 2] === \"\\r\") {\n                // windows style\n                value = value.substring(0, value.length - 2);\n              } else {\n                // linux style\n                value = value.substring(0, value.length - 1);\n              }\n            } else if (lastCh === \"\\r\") {\n              // mac style\n              value = value.substring(0, value.length - 1);\n            }\n            this.expect(this.tok.T_ENCAPSED_AND_WHITESPACE) && this.next();\n            this.expect(this.tok.T_END_HEREDOC) && this.next();\n            const raw = this.lexer._input.substring(\n              start,\n              this.lexer.yylloc.first_offset\n            );\n            node = node(\n              this.remove_heredoc_leading_whitespace_chars(\n                value,\n                this.lexer.heredoc_label.indentation,\n                this.lexer.heredoc_label.indentation_uses_spaces,\n                this.lexer.heredoc_label.first_encaps_node\n              ),\n              raw,\n              this.lexer.heredoc_label.label\n            );\n            this.lexer.heredoc_label.finished = true;\n            return node;\n          } else {\n            return this.read_encapsed_string(this.tok.T_END_HEREDOC);\n          }\n\n        case '\"':\n          return this.read_encapsed_string('\"');\n\n        case 'b\"':\n        case 'B\"': {\n          return this.read_encapsed_string('\"', true);\n        }\n\n        // TEXTS\n        case this.tok.T_CONSTANT_ENCAPSED_STRING:\n        case this.tok.T_ARRAY: // array parser\n        case \"[\": // short array format\n          return this.read_dereferencable_scalar();\n        default: {\n          const err = this.error(\"SCALAR\");\n          // graceful mode : ignore token & return error node\n          this.next();\n          return err;\n        }\n      }\n    }\n  },\n  /*\n   * Handles the dereferencing\n   */\n  read_dereferencable: function (expr) {\n    let result, offset;\n    const node = this.node(\"offsetlookup\");\n    if (this.token === \"[\") {\n      offset = this.next().read_expr();\n      if (this.expect(\"]\")) this.next();\n      result = node(expr, offset);\n    } else if (this.token === this.tok.T_DOLLAR_OPEN_CURLY_BRACES) {\n      offset = this.read_encapsed_string_item(false);\n      result = node(expr, offset);\n    }\n    return result;\n  },\n  /*\n   * Reads and extracts an encapsed item\n   * ```ebnf\n   * encapsed_string_item ::= T_ENCAPSED_AND_WHITESPACE\n   *  | T_DOLLAR_OPEN_CURLY_BRACES expr '}'\n   *  | T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME '}'\n   *  | T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME '[' expr ']' '}'\n   *  | T_CURLY_OPEN variable '}'\n   *  | variable\n   *  | variable '[' expr ']'\n   *  | variable T_OBJECT_OPERATOR T_STRING\n   * ```\n   * @return {String|Variable|Expr|Lookup}\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1219\n   */\n  read_encapsed_string_item: function (isDoubleQuote) {\n    const encapsedPart = this.node(\"encapsedpart\");\n    let syntax = null;\n    let curly = false;\n    let result = this.node(),\n      offset,\n      node,\n      name;\n\n    // plain text\n    // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1222\n    if (this.token === this.tok.T_ENCAPSED_AND_WHITESPACE) {\n      const text = this.text();\n      this.next();\n\n      // if this.lexer.heredoc_label.first_encaps_node -> remove first indents\n      result = result(\n        \"string\",\n        false,\n        this.version >= 703 && !this.lexer.heredoc_label.finished\n          ? this.remove_heredoc_leading_whitespace_chars(\n              this.resolve_special_chars(text, isDoubleQuote),\n              this.lexer.heredoc_label.indentation,\n              this.lexer.heredoc_label.indentation_uses_spaces,\n              this.lexer.heredoc_label.first_encaps_node\n            )\n          : text,\n        false,\n        text\n      );\n    } else if (this.token === this.tok.T_DOLLAR_OPEN_CURLY_BRACES) {\n      syntax = \"simple\";\n      curly = true;\n      // dynamic variable name\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1239\n      name = null;\n      if (this.next().token === this.tok.T_STRING_VARNAME) {\n        name = this.node(\"variable\");\n        const varName = this.text();\n        this.next();\n        // check if lookup an offset\n        // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1243\n        result.destroy();\n        if (this.token === \"[\") {\n          name = name(varName, false);\n          node = this.node(\"offsetlookup\");\n          offset = this.next().read_expr();\n          this.expect(\"]\") && this.next();\n          result = node(name, offset);\n        } else {\n          result = name(varName, false);\n        }\n      } else {\n        result = result(\"variable\", this.read_expr(), false);\n      }\n      this.expect(\"}\") && this.next();\n    } else if (this.token === this.tok.T_CURLY_OPEN) {\n      // expression\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1246\n      syntax = \"complex\";\n      result.destroy();\n      result = this.next().read_variable(false, false);\n      this.expect(\"}\") && this.next();\n    } else if (this.token === this.tok.T_VARIABLE) {\n      syntax = \"simple\";\n      // plain variable\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1231\n      result.destroy();\n      result = this.read_simple_variable();\n\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1233\n      if (this.token === \"[\") {\n        node = this.node(\"offsetlookup\");\n        offset = this.next().read_encaps_var_offset();\n        this.expect(\"]\") && this.next();\n        result = node(result, offset);\n      }\n\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1236\n      if (this.token === this.tok.T_OBJECT_OPERATOR) {\n        node = this.node(\"propertylookup\");\n        this.next().expect(this.tok.T_STRING);\n        const what = this.node(\"identifier\");\n        name = this.text();\n        this.next();\n        result = node(result, what(name));\n      }\n\n      // error / fallback\n    } else {\n      this.expect(this.tok.T_ENCAPSED_AND_WHITESPACE);\n      const value = this.text();\n      this.next();\n      // consider it as string\n      result.destroy();\n      result = result(\"string\", false, value, false, value);\n    }\n\n    // reset first_encaps_node to false after access any node\n    this.lexer.heredoc_label.first_encaps_node = false;\n    return encapsedPart(result, syntax, curly);\n  },\n  /*\n   * Reads an encapsed string\n   */\n  read_encapsed_string: function (expect, isBinary = false) {\n    const labelStart = this.lexer.yylloc.first_offset;\n    let node = this.node(\"encapsed\");\n    this.next();\n    const start = this.lexer.yylloc.prev_offset - (isBinary ? 1 : 0);\n    const value = [];\n    let type = null;\n\n    if (expect === \"`\") {\n      type = this.ast.encapsed.TYPE_SHELL;\n    } else if (expect === '\"') {\n      type = this.ast.encapsed.TYPE_STRING;\n    } else {\n      type = this.ast.encapsed.TYPE_HEREDOC;\n    }\n\n    // reading encapsed parts\n    while (this.token !== expect && this.token !== this.EOF) {\n      value.push(this.read_encapsed_string_item(true));\n    }\n    if (\n      value.length > 0 &&\n      value[value.length - 1].kind === \"encapsedpart\" &&\n      value[value.length - 1].expression.kind === \"string\"\n    ) {\n      const node = value[value.length - 1].expression;\n      const lastCh = node.value[node.value.length - 1];\n      if (lastCh === \"\\n\") {\n        if (node.value[node.value.length - 2] === \"\\r\") {\n          // windows style\n          node.value = node.value.substring(0, node.value.length - 2);\n        } else {\n          // linux style\n          node.value = node.value.substring(0, node.value.length - 1);\n        }\n      } else if (lastCh === \"\\r\") {\n        // mac style\n        node.value = node.value.substring(0, node.value.length - 1);\n      }\n    }\n    this.expect(expect) && this.next();\n    const raw = this.lexer._input.substring(\n      type === \"heredoc\" ? labelStart : start - 1,\n      this.lexer.yylloc.first_offset\n    );\n    node = node(value, raw, type);\n\n    if (expect === this.tok.T_END_HEREDOC) {\n      node.label = this.lexer.heredoc_label.label;\n      this.lexer.heredoc_label.finished = true;\n    }\n    return node;\n  },\n  /*\n   * Constant token\n   */\n  get_magic_constant: function () {\n    const result = this.node(\"magic\");\n    const name = this.text();\n    this.next();\n    return result(name.toUpperCase(), name);\n  },\n};\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /*\n   * reading a list of top statements (helper for top_statement*)\n   * ```ebnf\n   *  top_statements ::= top_statement*\n   * ```\n   */\n  read_top_statements: function () {\n    let result = [];\n    while (this.token !== this.EOF && this.token !== \"}\") {\n      const statement = this.read_top_statement();\n      if (statement) {\n        if (Array.isArray(statement)) {\n          result = result.concat(statement);\n        } else {\n          result.push(statement);\n        }\n      }\n    }\n    return result;\n  },\n  /*\n   * reading a top statement\n   * ```ebnf\n   *  top_statement ::=\n   *       namespace | function | class\n   *       | interface | trait\n   *       | use_statements | const_list\n   *       | statement\n   * ```\n   */\n  read_top_statement: function () {\n    let attrs = [];\n    if (this.token === this.tok.T_ATTRIBUTE) {\n      attrs = this.read_attr_list();\n    }\n    switch (this.token) {\n      case this.tok.T_FUNCTION:\n        return this.read_function(false, false, attrs);\n      // optional flags\n      case this.tok.T_ABSTRACT:\n      case this.tok.T_FINAL:\n      case this.tok.T_CLASS:\n        return this.read_class_declaration_statement(attrs);\n      case this.tok.T_INTERFACE:\n        return this.read_interface_declaration_statement(attrs);\n      case this.tok.T_TRAIT:\n        return this.read_trait_declaration_statement();\n      case this.tok.T_ENUM:\n        return this.read_enum_declaration_statement(attrs);\n      case this.tok.T_USE:\n        return this.read_use_statement();\n      case this.tok.T_CONST: {\n        const result = this.node(\"constantstatement\");\n        const items = this.next().read_const_list();\n        this.expectEndOfStatement();\n        return result(null, items);\n      }\n      case this.tok.T_NAMESPACE:\n        return this.read_namespace();\n      case this.tok.T_HALT_COMPILER: {\n        const result = this.node(\"halt\");\n        if (this.next().expect(\"(\")) this.next();\n        if (this.expect(\")\")) this.next();\n        this.expect(\";\");\n        this.lexer.done = true;\n        return result(this.lexer._input.substring(this.lexer.offset));\n      }\n      default:\n        return this.read_statement();\n    }\n  },\n  /*\n   * reads a list of simple inner statements (helper for inner_statement*)\n   * ```ebnf\n   *  inner_statements ::= inner_statement*\n   * ```\n   */\n  read_inner_statements: function () {\n    let result = [];\n    while (this.token != this.EOF && this.token !== \"}\") {\n      const statement = this.read_inner_statement();\n      if (statement) {\n        if (Array.isArray(statement)) {\n          result = result.concat(statement);\n        } else {\n          result.push(statement);\n        }\n      }\n    }\n    return result;\n  },\n  /*\n   * Reads a list of constants declaration\n   * ```ebnf\n   *   const_list ::= T_CONST T_STRING '=' expr (',' T_STRING '=' expr)* ';'\n   * ```\n   */\n  read_const_list: function () {\n    return this.read_list(\n      function () {\n        this.expect(this.tok.T_STRING);\n        const result = this.node(\"constant\");\n        let constName = this.node(\"identifier\");\n        const name = this.text();\n        this.next();\n        constName = constName(name);\n        if (this.expect(\"=\")) {\n          return result(constName, this.next().read_expr());\n        } else {\n          // fallback\n          return result(constName, null);\n        }\n      },\n      \",\",\n      false\n    );\n  },\n  /*\n   * Reads a list of constants declaration\n   * ```ebnf\n   *   declare_list ::= IDENTIFIER '=' expr (',' IDENTIFIER '=' expr)*\n   * ```\n   * @retrurn {Array}\n   */\n  read_declare_list: function () {\n    const result = [];\n    while (this.token != this.EOF && this.token !== \")\") {\n      this.expect(this.tok.T_STRING);\n      const directive = this.node(\"declaredirective\");\n      let key = this.node(\"identifier\");\n      const name = this.text();\n      this.next();\n      key = key(name);\n      let value = null;\n      if (this.expect(\"=\")) {\n        value = this.next().read_expr();\n      }\n      result.push(directive(key, value));\n      if (this.token !== \",\") break;\n      this.next();\n    }\n    return result;\n  },\n  /*\n   * reads a simple inner statement\n   * ```ebnf\n   *  inner_statement ::= '{' inner_statements '}' | token\n   * ```\n   */\n  read_inner_statement: function () {\n    let attrs = [];\n    if (this.token === this.tok.T_ATTRIBUTE) {\n      attrs = this.read_attr_list();\n    }\n    switch (this.token) {\n      case this.tok.T_FUNCTION: {\n        const result = this.read_function(false, false);\n        result.attrGroups = attrs;\n        return result;\n      }\n      // optional flags\n      case this.tok.T_ABSTRACT:\n      case this.tok.T_FINAL:\n      case this.tok.T_CLASS:\n        return this.read_class_declaration_statement();\n      case this.tok.T_INTERFACE:\n        return this.read_interface_declaration_statement();\n      case this.tok.T_TRAIT:\n        return this.read_trait_declaration_statement();\n      case this.tok.T_ENUM:\n        return this.read_enum_declaration_statement();\n      case this.tok.T_HALT_COMPILER: {\n        this.raiseError(\n          \"__HALT_COMPILER() can only be used from the outermost scope\"\n        );\n        // fallback : returns a node but does not stop the parsing\n        let node = this.node(\"halt\");\n        this.next().expect(\"(\") && this.next();\n        this.expect(\")\") && this.next();\n        node = node(this.lexer._input.substring(this.lexer.offset));\n        this.expect(\";\") && this.next();\n        return node;\n      }\n      default:\n        return this.read_statement();\n    }\n  },\n  /*\n   * Reads statements\n   */\n  read_statement: function () {\n    switch (this.token) {\n      case \"{\":\n        return this.read_code_block(false);\n\n      case this.tok.T_IF:\n        return this.read_if();\n\n      case this.tok.T_SWITCH:\n        return this.read_switch();\n\n      case this.tok.T_FOR:\n        return this.read_for();\n\n      case this.tok.T_FOREACH:\n        return this.read_foreach();\n\n      case this.tok.T_WHILE:\n        return this.read_while();\n\n      case this.tok.T_DO:\n        return this.read_do();\n\n      case this.tok.T_COMMENT:\n        return this.read_comment();\n\n      case this.tok.T_DOC_COMMENT:\n        return this.read_doc_comment();\n\n      case this.tok.T_RETURN: {\n        const result = this.node(\"return\");\n        this.next();\n        const expr = this.read_optional_expr(\";\");\n        this.expectEndOfStatement();\n        return result(expr);\n      }\n\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L429\n      case this.tok.T_BREAK:\n      case this.tok.T_CONTINUE: {\n        const result = this.node(\n          this.token === this.tok.T_CONTINUE ? \"continue\" : \"break\"\n        );\n        this.next();\n        const level = this.read_optional_expr(\";\");\n        this.expectEndOfStatement();\n        return result(level);\n      }\n\n      case this.tok.T_GLOBAL: {\n        const result = this.node(\"global\");\n        const items = this.next().read_list(this.read_simple_variable, \",\");\n        this.expectEndOfStatement();\n        return result(items);\n      }\n\n      case this.tok.T_STATIC: {\n        const current = [this.token, this.lexer.getState()];\n        const result = this.node();\n        if (this.next().token === this.tok.T_DOUBLE_COLON) {\n          // static keyword for a class\n          this.lexer.tokens.push(current);\n          const expr = this.next().read_expr();\n          this.expectEndOfStatement(expr);\n          return result(\"expressionstatement\", expr);\n        }\n        if (this.token === this.tok.T_FUNCTION) {\n          return this.read_function(true, [0, 1, 0]);\n        }\n        const items = this.read_variable_declarations();\n        this.expectEndOfStatement();\n        return result(\"static\", items);\n      }\n\n      case this.tok.T_ECHO: {\n        const result = this.node(\"echo\");\n        const text = this.text();\n        const shortForm = text === \"<?=\" || text === \"<%=\";\n        const expressions = this.next().read_function_list(this.read_expr, \",\");\n        this.expectEndOfStatement();\n        return result(expressions, shortForm);\n      }\n\n      case this.tok.T_INLINE_HTML: {\n        const value = this.text();\n        let prevChar =\n          this.lexer.yylloc.first_offset > 0\n            ? this.lexer._input[this.lexer.yylloc.first_offset - 1]\n            : null;\n        const fixFirstLine = prevChar === \"\\r\" || prevChar === \"\\n\";\n        // revert back the first stripped line\n        if (fixFirstLine) {\n          if (\n            prevChar === \"\\n\" &&\n            this.lexer.yylloc.first_offset > 1 &&\n            this.lexer._input[this.lexer.yylloc.first_offset - 2] === \"\\r\"\n          ) {\n            prevChar = \"\\r\\n\";\n          }\n        }\n        const result = this.node(\"inline\");\n        this.next();\n        return result(value, fixFirstLine ? prevChar + value : value);\n      }\n\n      case this.tok.T_UNSET: {\n        const result = this.node(\"unset\");\n        this.next().expect(\"(\") && this.next();\n        const variables = this.read_function_list(this.read_variable, \",\");\n        this.expect(\")\") && this.next();\n        this.expect(\";\") && this.next();\n        return result(variables);\n      }\n\n      case this.tok.T_DECLARE: {\n        const result = this.node(\"declare\");\n        const body = [];\n        let mode;\n        this.next().expect(\"(\") && this.next();\n        const directives = this.read_declare_list();\n        this.expect(\")\") && this.next();\n        if (this.token === \":\") {\n          this.next();\n          while (\n            this.token != this.EOF &&\n            this.token !== this.tok.T_ENDDECLARE\n          ) {\n            // @todo : check declare_statement from php / not valid\n            body.push(this.read_top_statement());\n          }\n          if (\n            body.length === 0 &&\n            this.extractDoc &&\n            this._docs.length > this._docIndex\n          ) {\n            body.push(this.node(\"noop\")());\n          }\n          this.expect(this.tok.T_ENDDECLARE) && this.next();\n          this.expectEndOfStatement();\n          mode = this.ast.declare.MODE_SHORT;\n        } else if (this.token === \"{\") {\n          this.next();\n          while (this.token != this.EOF && this.token !== \"}\") {\n            // @todo : check declare_statement from php / not valid\n            body.push(this.read_top_statement());\n          }\n          if (\n            body.length === 0 &&\n            this.extractDoc &&\n            this._docs.length > this._docIndex\n          ) {\n            body.push(this.node(\"noop\")());\n          }\n          this.expect(\"}\") && this.next();\n          mode = this.ast.declare.MODE_BLOCK;\n        } else {\n          this.expect(\";\") && this.next();\n          mode = this.ast.declare.MODE_NONE;\n        }\n        return result(directives, body, mode);\n      }\n\n      case this.tok.T_TRY:\n        return this.read_try();\n\n      case this.tok.T_THROW: {\n        const result = this.node(\"throw\");\n        const expr = this.next().read_expr();\n        this.expectEndOfStatement();\n        return result(expr);\n      }\n\n      // ignore this (extra ponctuation)\n      case \";\": {\n        this.next();\n        return null;\n      }\n\n      case this.tok.T_STRING: {\n        const result = this.node();\n        const current = [this.token, this.lexer.getState()];\n        const labelNameText = this.text();\n        let labelName = this.node(\"identifier\");\n        // AST : https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L457\n        if (this.next().token === \":\") {\n          labelName = labelName(labelNameText);\n          this.next();\n          return result(\"label\", labelName);\n        } else {\n          labelName.destroy();\n        }\n\n        // default fallback expr / T_STRING '::' (etc...)\n        result.destroy();\n        this.lexer.tokens.push(current);\n        const statement = this.node(\"expressionstatement\");\n        const expr = this.next().read_expr();\n        this.expectEndOfStatement(expr);\n        return statement(expr);\n      }\n\n      case this.tok.T_GOTO: {\n        const result = this.node(\"goto\");\n        let labelName = null;\n        if (this.next().expect(this.tok.T_STRING)) {\n          labelName = this.node(\"identifier\");\n          const name = this.text();\n          this.next();\n          labelName = labelName(name);\n          this.expectEndOfStatement();\n        }\n        return result(labelName);\n      }\n\n      default: {\n        // default fallback expr\n        const statement = this.node(\"expressionstatement\");\n        const expr = this.read_expr();\n        this.expectEndOfStatement(expr);\n        return statement(expr);\n      }\n    }\n  },\n  /*\n   * ```ebnf\n   *  code_block ::= '{' (inner_statements | top_statements) '}'\n   * ```\n   */\n  read_code_block: function (top) {\n    const result = this.node(\"block\");\n    this.expect(\"{\") && this.next();\n    const body = top\n      ? this.read_top_statements()\n      : this.read_inner_statements();\n    if (\n      body.length === 0 &&\n      this.extractDoc &&\n      this._docs.length > this._docIndex\n    ) {\n      body.push(this.node(\"noop\")());\n    }\n    this.expect(\"}\") && this.next();\n    return result(null, body);\n  },\n};\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /*\n   * Reads a switch statement\n   * ```ebnf\n   *  switch ::= T_SWITCH '(' expr ')' switch_case_list\n   * ```\n   * @return {Switch}\n   * @see http://php.net/manual/en/control-structures.switch.php\n   */\n  read_switch: function () {\n    const result = this.node(\"switch\");\n    this.expect(this.tok.T_SWITCH) && this.next();\n    this.expect(\"(\") && this.next();\n    const test = this.read_expr();\n    this.expect(\")\") && this.next();\n    const shortForm = this.token === \":\";\n    const body = this.read_switch_case_list();\n    return result(test, body, shortForm);\n  },\n  /*\n   * ```ebnf\n   *  switch_case_list ::= '{' ';'? case_list* '}' | ':' ';'? case_list* T_ENDSWITCH ';'\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L566\n   */\n  read_switch_case_list: function () {\n    // DETECT SWITCH MODE\n    let expect = null;\n    const result = this.node(\"block\");\n    const items = [];\n    if (this.token === \"{\") {\n      expect = \"}\";\n    } else if (this.token === \":\") {\n      expect = this.tok.T_ENDSWITCH;\n    } else {\n      this.expect([\"{\", \":\"]);\n    }\n    this.next();\n    // OPTIONNAL ';'\n    // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L570\n    if (this.token === \";\") {\n      this.next();\n    }\n    // EXTRACTING CASES\n    while (this.token !== this.EOF && this.token !== expect) {\n      items.push(this.read_case_list(expect));\n    }\n    if (\n      items.length === 0 &&\n      this.extractDoc &&\n      this._docs.length > this._docIndex\n    ) {\n      items.push(this.node(\"noop\")());\n    }\n    // CHECK END TOKEN\n    this.expect(expect) && this.next();\n    if (expect === this.tok.T_ENDSWITCH) {\n      this.expectEndOfStatement();\n    }\n    return result(null, items);\n  },\n  /*\n   * ```ebnf\n   *   case_list ::= ((T_CASE expr) | T_DEFAULT) (':' | ';') inner_statement*\n   * ```\n   */\n  read_case_list: function (stopToken) {\n    const result = this.node(\"case\");\n    let test = null;\n    if (this.token === this.tok.T_CASE) {\n      test = this.next().read_expr();\n    } else if (this.token === this.tok.T_DEFAULT) {\n      // the default entry - no condition\n      this.next();\n    } else {\n      this.expect([this.tok.T_CASE, this.tok.T_DEFAULT]);\n    }\n    // case_separator\n    this.expect([\":\", \";\"]) && this.next();\n    const body = this.node(\"block\");\n    const items = [];\n    while (\n      this.token !== this.EOF &&\n      this.token !== stopToken &&\n      this.token !== this.tok.T_CASE &&\n      this.token !== this.tok.T_DEFAULT\n    ) {\n      items.push(this.read_inner_statement());\n    }\n    return result(test, body(null, items));\n  },\n};\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /*\n   * ```ebnf\n   *  try ::= T_TRY '{' inner_statement* '}'\n   *          (\n   *              T_CATCH '(' namespace_name (variable)? ')' '{'  inner_statement* '}'\n   *          )*\n   *          (T_FINALLY '{' inner_statement* '}')?\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L448\n   * @return {Try}\n   */\n  read_try: function () {\n    this.expect(this.tok.T_TRY);\n    const result = this.node(\"try\");\n    let always = null;\n    const catches = [];\n    const body = this.next().read_statement();\n    // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L455\n    while (this.token === this.tok.T_CATCH) {\n      const item = this.node(\"catch\");\n      this.next().expect(\"(\") && this.next();\n      const what = this.read_list(this.read_namespace_name, \"|\", false);\n      let variable = null;\n      if (this.version < 800 || this.token === this.tok.T_VARIABLE) {\n        variable = this.read_variable(true, false);\n      }\n      this.expect(\")\");\n      catches.push(item(this.next().read_statement(), what, variable));\n    }\n    if (this.token === this.tok.T_FINALLY) {\n      always = this.next().read_statement();\n    }\n    return result(body, catches, always);\n  },\n};\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /*\n   * Reads a short form of tokens\n   * @param {Number} token - The ending token\n   * @return {Block}\n   */\n  read_short_form: function (token) {\n    const body = this.node(\"block\");\n    const items = [];\n    /* istanbul ignore next */\n    if (this.expect(\":\")) this.next();\n    while (this.token != this.EOF && this.token !== token) {\n      items.push(this.read_inner_statement());\n    }\n    if (\n      items.length === 0 &&\n      this.extractDoc &&\n      this._docs.length > this._docIndex\n    ) {\n      items.push(this.node(\"noop\")());\n    }\n    /* istanbul ignore next */\n    if (this.expect(token)) this.next();\n    this.expectEndOfStatement();\n    return body(null, items);\n  },\n\n  /*\n   * https://wiki.php.net/rfc/trailing-comma-function-calls\n   * @param {*} item\n   * @param {*} separator\n   */\n  read_function_list: function (item, separator) {\n    const result = [];\n    do {\n      if (this.token == separator && this.version >= 703 && result.length > 0) {\n        result.push(this.node(\"noop\")());\n        break;\n      }\n      result.push(item.apply(this, []));\n      if (this.token != separator) {\n        break;\n      }\n      if (this.next().token == \")\" && this.version >= 703) {\n        break;\n      }\n    } while (this.token != this.EOF);\n    return result;\n  },\n\n  /*\n   * Helper : reads a list of tokens / sample : T_STRING ',' T_STRING ...\n   * ```ebnf\n   * list ::= separator? ( item separator )* item\n   * ```\n   */\n  read_list: function (item, separator, preserveFirstSeparator) {\n    const result = [];\n\n    if (this.token == separator) {\n      if (preserveFirstSeparator) {\n        result.push(typeof item === \"function\" ? this.node(\"noop\")() : null);\n      }\n      this.next();\n    }\n\n    if (typeof item === \"function\") {\n      do {\n        const itemResult = item.apply(this, []);\n        if (itemResult) {\n          result.push(itemResult);\n        }\n        if (this.token != separator) {\n          break;\n        }\n      } while (this.next().token != this.EOF);\n    } else {\n      if (this.expect(item)) {\n        result.push(this.text());\n      } else {\n        return [];\n      }\n      while (this.next().token != this.EOF) {\n        if (this.token != separator) break;\n        // trim current separator & check item\n        if (this.next().token != item) break;\n        result.push(this.text());\n      }\n    }\n    return result;\n  },\n\n  /*\n   * Reads a list of names separated by a comma\n   *\n   * ```ebnf\n   * name_list ::= namespace (',' namespace)*\n   * ```\n   *\n   * Sample code :\n   * ```php\n   * <?php class foo extends bar, baz { }\n   * ```\n   *\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L726\n   * @return {Reference[]}\n   */\n  read_name_list: function () {\n    return this.read_list(this.read_namespace_name, \",\", false);\n  },\n\n  /*\n   * Reads the byref token and assign it to the specified node\n   * @param {*} cb\n   */\n  read_byref: function (cb) {\n    let byref = this.node(\"byref\");\n    this.next();\n    byref = byref(null);\n    const result = cb();\n    if (result) {\n      this.ast.swapLocations(result, byref, result, this);\n      result.byref = true;\n    }\n    return result;\n  },\n\n  /*\n   * Reads a list of variables declarations\n   *\n   * ```ebnf\n   * variable_declaration ::= T_VARIABLE ('=' expr)?*\n   * variable_declarations ::= variable_declaration (',' variable_declaration)*\n   * ```\n   *\n   * Sample code :\n   * ```php\n   * <?php static $a = 'hello', $b = 'world';\n   * ```\n   * @return {StaticVariable[]} Returns an array composed by a list of variables, or\n   * assign values\n   */\n  read_variable_declarations: function () {\n    return this.read_list(function () {\n      const node = this.node(\"staticvariable\");\n      let variable = this.node(\"variable\");\n      // plain variable name\n      /* istanbul ignore else */\n      if (this.expect(this.tok.T_VARIABLE)) {\n        const name = this.text().substring(1);\n        this.next();\n        variable = variable(name, false);\n      } else {\n        variable = variable(\"#ERR\", false);\n      }\n      if (this.token === \"=\") {\n        return node(variable, this.next().read_expr());\n      } else {\n        return variable;\n      }\n    }, \",\");\n  },\n\n  /*\n   * Reads class extends\n   */\n  read_extends_from: function () {\n    if (this.token === this.tok.T_EXTENDS) {\n      return this.next().read_namespace_name();\n    }\n\n    return null;\n  },\n\n  /*\n   * Reads interface extends list\n   */\n  read_interface_extends_list: function () {\n    if (this.token === this.tok.T_EXTENDS) {\n      return this.next().read_name_list();\n    }\n\n    return null;\n  },\n\n  /*\n   * Reads implements list\n   */\n  read_implements_list: function () {\n    if (this.token === this.tok.T_IMPLEMENTS) {\n      return this.next().read_name_list();\n    }\n\n    return null;\n  },\n};\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /*\n   * Reads a variable\n   *\n   * ```ebnf\n   *   variable ::= &? ...complex @todo\n   * ```\n   *\n   * Some samples of parsed code :\n   * ```php\n   *  &$var                      // simple var\n   *  $var                      // simple var\n   *  classname::CONST_NAME     // dynamic class name with const retrieval\n   *  foo()                     // function call\n   *  $var->func()->property    // chained calls\n   * ```\n   */\n  read_variable: function (read_only, encapsed) {\n    let result;\n    // check the byref flag\n    if (this.token === \"&\") {\n      return this.read_byref(\n        this.read_variable.bind(this, read_only, encapsed)\n      );\n    }\n\n    // reads the entry point\n    if (this.is([this.tok.T_VARIABLE, \"$\"])) {\n      result = this.read_reference_variable(encapsed);\n    } else if (\n      this.is([\n        this.tok.T_NS_SEPARATOR,\n        this.tok.T_STRING,\n        this.tok.T_NAME_RELATIVE,\n        this.tok.T_NAME_QUALIFIED,\n        this.tok.T_NAME_FULLY_QUALIFIED,\n        this.tok.T_NAMESPACE,\n      ])\n    ) {\n      result = this.node();\n      const name = this.read_namespace_name();\n      if (\n        this.token != this.tok.T_DOUBLE_COLON &&\n        this.token != \"(\" &&\n        [\"parentreference\", \"selfreference\"].indexOf(name.kind) === -1\n      ) {\n        // @see parser.js line 130 : resolves a conflict with scalar\n        const literal = name.name.toLowerCase();\n        if (literal === \"true\") {\n          result = name.destroy(result(\"boolean\", true, name.name));\n        } else if (literal === \"false\") {\n          result = name.destroy(result(\"boolean\", false, name.name));\n        } else if (literal === \"null\") {\n          result = name.destroy(result(\"nullkeyword\", name.name));\n        } else {\n          result.destroy(name);\n          result = name;\n        }\n      } else {\n        // @fixme possible #193 bug\n        result.destroy(name);\n        result = name;\n      }\n    } else if (this.token === this.tok.T_STATIC) {\n      result = this.node(\"staticreference\");\n      const raw = this.text();\n      this.next();\n      result = result(raw);\n    } else {\n      this.expect(\"VARIABLE\");\n    }\n\n    // static mode\n    if (this.token === this.tok.T_DOUBLE_COLON) {\n      result = this.read_static_getter(result, encapsed);\n    }\n\n    return this.recursive_variable_chain_scan(result, read_only, encapsed);\n  },\n\n  // resolves a static call\n  read_static_getter: function (what, encapsed) {\n    const result = this.node(\"staticlookup\");\n    let offset, name;\n    if (this.next().is([this.tok.T_VARIABLE, \"$\"])) {\n      offset = this.read_reference_variable(encapsed);\n    } else if (\n      this.token === this.tok.T_STRING ||\n      this.token === this.tok.T_CLASS ||\n      (this.version >= 700 && this.is(\"IDENTIFIER\"))\n    ) {\n      offset = this.node(\"identifier\");\n      name = this.text();\n      this.next();\n      offset = offset(name);\n    } else if (this.token === \"{\") {\n      offset = this.node(\"literal\");\n      name = this.next().read_expr();\n      this.expect(\"}\") && this.next();\n      offset = offset(\"literal\", name, null);\n      this.expect(\"(\");\n    } else {\n      this.error([this.tok.T_VARIABLE, this.tok.T_STRING]);\n      // graceful mode : set getter as error node and continue\n      offset = this.node(\"identifier\");\n      name = this.text();\n      this.next();\n      offset = offset(name);\n    }\n    return result(what, offset);\n  },\n\n  read_what: function (is_static_lookup = false) {\n    let what = null;\n    let name = null;\n    switch (this.next().token) {\n      case this.tok.T_STRING:\n        what = this.node(\"identifier\");\n        name = this.text();\n        this.next();\n        what = what(name);\n\n        if (is_static_lookup && this.token === this.tok.T_OBJECT_OPERATOR) {\n          this.error();\n        }\n        break;\n      case this.tok.T_VARIABLE:\n        what = this.node(\"variable\");\n        name = this.text().substring(1);\n        this.next();\n        what = what(name, false);\n        break;\n      case \"$\":\n        what = this.node();\n        this.next().expect([\"$\", \"{\", this.tok.T_VARIABLE]);\n        if (this.token === \"{\") {\n          // $obj->${$varname}\n          name = this.next().read_expr();\n          this.expect(\"}\") && this.next();\n          what = what(\"variable\", name, true);\n        } else {\n          // $obj->$$varname\n          name = this.read_expr();\n          what = what(\"variable\", name, false);\n        }\n        break;\n      case \"{\":\n        what = this.node(\"encapsedpart\");\n        name = this.next().read_expr();\n        this.expect(\"}\") && this.next();\n        what = what(name, \"complex\", false);\n        break;\n      default:\n        this.error([this.tok.T_STRING, this.tok.T_VARIABLE, \"$\", \"{\"]);\n        // graceful mode : set what as error mode & continue\n        what = this.node(\"identifier\");\n        name = this.text();\n        this.next();\n        what = what(name);\n        break;\n    }\n\n    return what;\n  },\n\n  recursive_variable_chain_scan: function (result, read_only, encapsed) {\n    let node, offset;\n    recursive_scan_loop: while (this.token != this.EOF) {\n      switch (this.token) {\n        case \"(\":\n          if (read_only) {\n            // @fixme : add more informations & test\n            return result;\n          } else {\n            result = this.node(\"call\")(result, this.read_argument_list());\n          }\n          break;\n        case \"[\":\n        case \"{\": {\n          const backet = this.token;\n          const isSquareBracket = backet === \"[\";\n          node = this.node(\"offsetlookup\");\n          this.next();\n          offset = false;\n          if (encapsed) {\n            offset = this.read_encaps_var_offset();\n            this.expect(isSquareBracket ? \"]\" : \"}\") && this.next();\n          } else {\n            const isCallableVariable = isSquareBracket\n              ? this.token !== \"]\"\n              : this.token !== \"}\";\n            // callable_variable : https://github.com/php/php-src/blob/493524454d66adde84e00d249d607ecd540de99f/Zend/zend_language_parser.y#L1122\n            if (isCallableVariable) {\n              offset = this.read_expr();\n              this.expect(isSquareBracket ? \"]\" : \"}\") && this.next();\n            } else {\n              this.next();\n            }\n          }\n          result = node(result, offset);\n          break;\n        }\n        case this.tok.T_DOUBLE_COLON:\n          // @see https://github.com/glayzzle/php-parser/issues/107#issuecomment-354104574\n          if (\n            result.kind === \"staticlookup\" &&\n            result.offset.kind === \"identifier\"\n          ) {\n            this.error();\n          }\n\n          node = this.node(\"staticlookup\");\n          result = node(result, this.read_what(true));\n\n          // fix 185\n          // static lookup dereferencables are limited to staticlookup over functions\n          /*if (dereferencable && this.token !== \"(\") {\n            this.error(\"(\");\n          }*/\n          break;\n        case this.tok.T_OBJECT_OPERATOR: {\n          node = this.node(\"propertylookup\");\n          result = node(result, this.read_what());\n          break;\n        }\n        case this.tok.T_NULLSAFE_OBJECT_OPERATOR: {\n          node = this.node(\"nullsafepropertylookup\");\n          result = node(result, this.read_what());\n          break;\n        }\n        default:\n          break recursive_scan_loop;\n      }\n    }\n    return result;\n  },\n  /*\n   * https://github.com/php/php-src/blob/493524454d66adde84e00d249d607ecd540de99f/Zend/zend_language_parser.y#L1231\n   */\n  read_encaps_var_offset: function () {\n    let offset = this.node();\n    if (this.token === this.tok.T_STRING) {\n      const text = this.text();\n      this.next();\n      offset = offset(\"identifier\", text);\n    } else if (this.token === this.tok.T_NUM_STRING) {\n      const num = this.text();\n      this.next();\n      offset = offset(\"number\", num, null);\n    } else if (this.token === \"-\") {\n      this.next();\n      const num = -1 * this.text();\n      this.expect(this.tok.T_NUM_STRING) && this.next();\n      offset = offset(\"number\", num, null);\n    } else if (this.token === this.tok.T_VARIABLE) {\n      const name = this.text().substring(1);\n      this.next();\n      offset = offset(\"variable\", name, false);\n    } else {\n      this.expect([\n        this.tok.T_STRING,\n        this.tok.T_NUM_STRING,\n        \"-\",\n        this.tok.T_VARIABLE,\n      ]);\n      // fallback : consider as identifier\n      const text = this.text();\n      this.next();\n      offset = offset(\"identifier\", text);\n    }\n    return offset;\n  },\n  /*\n   * ```ebnf\n   *  reference_variable ::=  simple_variable ('[' OFFSET ']')* | '{' EXPR '}'\n   * ```\n   * <code>\n   *  $foo[123];      // foo is an array ==> gets its entry\n   *  $foo{1};        // foo is a string ==> get the 2nd char offset\n   *  ${'foo'}[123];  // get the dynamic var $foo\n   *  $foo[123]{1};   // gets the 2nd char from the 123 array entry\n   * </code>\n   */\n  read_reference_variable: function (encapsed) {\n    let result = this.read_simple_variable();\n    let offset;\n    while (this.token != this.EOF) {\n      const node = this.node();\n      if (this.token == \"{\" && !encapsed) {\n        // @fixme check coverage, not sure thats working\n        offset = this.next().read_expr();\n        this.expect(\"}\") && this.next();\n        result = node(\"offsetlookup\", result, offset);\n      } else {\n        node.destroy();\n        break;\n      }\n    }\n    return result;\n  },\n  /*\n   * ```ebnf\n   *  simple_variable ::= T_VARIABLE | '$' '{' expr '}' | '$' simple_variable\n   * ```\n   */\n  read_simple_variable: function () {\n    let result = this.node(\"variable\");\n    let name;\n    if (\n      this.expect([this.tok.T_VARIABLE, \"$\"]) &&\n      this.token === this.tok.T_VARIABLE\n    ) {\n      // plain variable name\n      name = this.text().substring(1);\n      this.next();\n      result = result(name, false);\n    } else {\n      if (this.token === \"$\") this.next();\n      // dynamic variable name\n      switch (this.token) {\n        case \"{\": {\n          const expr = this.next().read_expr();\n          this.expect(\"}\") && this.next();\n          result = result(expr, true);\n          break;\n        }\n        case \"$\": // $$$var\n          result = result(this.read_simple_variable(), false);\n          break;\n        case this.tok.T_VARIABLE: {\n          // $$var\n          name = this.text().substring(1);\n          const node = this.node(\"variable\");\n          this.next();\n          result = result(node(name, false), false);\n          break;\n        }\n        default:\n          this.error([\"{\", \"$\", this.tok.T_VARIABLE]);\n          // graceful mode\n          name = this.text();\n          this.next();\n          result = result(name, false);\n      }\n    }\n    return result;\n  },\n};\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Position = require(\"./ast/position\");\n\n/**\n * @private\n */\nfunction isNumber(n) {\n  return n != \".\" && n != \",\" && !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * The PHP Parser class that build the AST tree from the lexer\n *\n * @constructor Parser\n * @memberOf module:php-parser\n * @tutorial Parser\n * @property {Lexer} lexer - current lexer instance\n * @property {AST} ast - the AST factory instance\n * @property {number|string} token - current token\n * @property {boolean} extractDoc - should extract documentation as AST node\n * @property {boolean} extractTokens - should extract each token\n * @property {boolean} suppressErrors - should ignore parsing errors and continue\n * @property {boolean} debug - should output debug informations\n */\nconst Parser = function (lexer, ast) {\n  this.lexer = lexer;\n  this.ast = ast;\n  this.tok = lexer.tok;\n  this.EOF = lexer.EOF;\n  this.token = null;\n  this.prev = null;\n  this.debug = false;\n  this.version = 801;\n  this.extractDoc = false;\n  this.extractTokens = false;\n  this.suppressErrors = false;\n  const mapIt = function (item) {\n    return [item, null];\n  };\n  this.entries = {\n    // reserved_non_modifiers\n    IDENTIFIER: new Map(\n      [\n        this.tok.T_ABSTRACT,\n        this.tok.T_ARRAY,\n        this.tok.T_AS,\n        this.tok.T_BREAK,\n        this.tok.T_CALLABLE,\n        this.tok.T_CASE,\n        this.tok.T_CATCH,\n        this.tok.T_CLASS,\n        this.tok.T_CLASS_C,\n        this.tok.T_CLONE,\n        this.tok.T_CONST,\n        this.tok.T_CONTINUE,\n        this.tok.T_DECLARE,\n        this.tok.T_DEFAULT,\n        this.tok.T_DIR,\n        this.tok.T_DO,\n        this.tok.T_ECHO,\n        this.tok.T_ELSE,\n        this.tok.T_ELSEIF,\n        this.tok.T_EMPTY,\n        this.tok.T_ENDDECLARE,\n        this.tok.T_ENDFOR,\n        this.tok.T_ENDFOREACH,\n        this.tok.T_ENDIF,\n        this.tok.T_ENDSWITCH,\n        this.tok.T_ENDWHILE,\n        this.tok.T_ENUM,\n        this.tok.T_EVAL,\n        this.tok.T_EXIT,\n        this.tok.T_EXTENDS,\n        this.tok.T_FILE,\n        this.tok.T_FINAL,\n        this.tok.T_FINALLY,\n        this.tok.T_FN,\n        this.tok.T_FOR,\n        this.tok.T_FOREACH,\n        this.tok.T_FUNC_C,\n        this.tok.T_FUNCTION,\n        this.tok.T_GLOBAL,\n        this.tok.T_GOTO,\n        this.tok.T_IF,\n        this.tok.T_IMPLEMENTS,\n        this.tok.T_INCLUDE,\n        this.tok.T_INCLUDE_ONCE,\n        this.tok.T_INSTANCEOF,\n        this.tok.T_INSTEADOF,\n        this.tok.T_INTERFACE,\n        this.tok.T_ISSET,\n        this.tok.T_LINE,\n        this.tok.T_LIST,\n        this.tok.T_LOGICAL_AND,\n        this.tok.T_LOGICAL_OR,\n        this.tok.T_LOGICAL_XOR,\n        this.tok.T_MATCH,\n        this.tok.T_METHOD_C,\n        this.tok.T_NAMESPACE,\n        this.tok.T_NEW,\n        this.tok.T_NS_C,\n        this.tok.T_PRINT,\n        this.tok.T_PRIVATE,\n        this.tok.T_PROTECTED,\n        this.tok.T_PUBLIC,\n        this.tok.T_READ_ONLY,\n        this.tok.T_REQUIRE,\n        this.tok.T_REQUIRE_ONCE,\n        this.tok.T_RETURN,\n        this.tok.T_STATIC,\n        this.tok.T_SWITCH,\n        this.tok.T_THROW,\n        this.tok.T_TRAIT,\n        this.tok.T_TRY,\n        this.tok.T_UNSET,\n        this.tok.T_USE,\n        this.tok.T_VAR,\n        this.tok.T_WHILE,\n        this.tok.T_YIELD,\n      ].map(mapIt)\n    ),\n    VARIABLE: new Map(\n      [\n        this.tok.T_VARIABLE,\n        \"$\",\n        \"&\",\n        this.tok.T_STRING,\n        this.tok.T_NAME_RELATIVE,\n        this.tok.T_NAME_QUALIFIED,\n        this.tok.T_NAME_FULLY_QUALIFIED,\n        this.tok.T_NAMESPACE,\n        this.tok.T_STATIC,\n      ].map(mapIt)\n    ),\n    SCALAR: new Map(\n      [\n        this.tok.T_CONSTANT_ENCAPSED_STRING,\n        this.tok.T_START_HEREDOC,\n        this.tok.T_LNUMBER,\n        this.tok.T_DNUMBER,\n        this.tok.T_ARRAY,\n        \"[\",\n        this.tok.T_CLASS_C,\n        this.tok.T_TRAIT_C,\n        this.tok.T_FUNC_C,\n        this.tok.T_METHOD_C,\n        this.tok.T_LINE,\n        this.tok.T_FILE,\n        this.tok.T_DIR,\n        this.tok.T_NS_C,\n        '\"',\n        'b\"',\n        'B\"',\n        \"-\",\n        this.tok.T_NS_SEPARATOR,\n      ].map(mapIt)\n    ),\n    T_MAGIC_CONST: new Map(\n      [\n        this.tok.T_CLASS_C,\n        this.tok.T_TRAIT_C,\n        this.tok.T_FUNC_C,\n        this.tok.T_METHOD_C,\n        this.tok.T_LINE,\n        this.tok.T_FILE,\n        this.tok.T_DIR,\n        this.tok.T_NS_C,\n      ].map(mapIt)\n    ),\n    T_MEMBER_FLAGS: new Map(\n      [\n        this.tok.T_PUBLIC,\n        this.tok.T_PRIVATE,\n        this.tok.T_PROTECTED,\n        this.tok.T_STATIC,\n        this.tok.T_ABSTRACT,\n        this.tok.T_FINAL,\n      ].map(mapIt)\n    ),\n    EOS: new Map([\";\", this.EOF, this.tok.T_INLINE_HTML].map(mapIt)),\n    EXPR: new Map(\n      [\n        \"@\",\n        \"-\",\n        \"+\",\n        \"!\",\n        \"~\",\n        \"(\",\n        \"`\",\n        this.tok.T_LIST,\n        this.tok.T_CLONE,\n        this.tok.T_INC,\n        this.tok.T_DEC,\n        this.tok.T_NEW,\n        this.tok.T_ISSET,\n        this.tok.T_EMPTY,\n        this.tok.T_MATCH,\n        this.tok.T_INCLUDE,\n        this.tok.T_INCLUDE_ONCE,\n        this.tok.T_REQUIRE,\n        this.tok.T_REQUIRE_ONCE,\n        this.tok.T_EVAL,\n        this.tok.T_INT_CAST,\n        this.tok.T_DOUBLE_CAST,\n        this.tok.T_STRING_CAST,\n        this.tok.T_ARRAY_CAST,\n        this.tok.T_OBJECT_CAST,\n        this.tok.T_BOOL_CAST,\n        this.tok.T_UNSET_CAST,\n        this.tok.T_EXIT,\n        this.tok.T_PRINT,\n        this.tok.T_YIELD,\n        this.tok.T_STATIC,\n        this.tok.T_FUNCTION,\n        this.tok.T_FN,\n        // using VARIABLES :\n        this.tok.T_VARIABLE,\n        \"$\",\n        this.tok.T_NS_SEPARATOR,\n        this.tok.T_STRING,\n        this.tok.T_NAME_RELATIVE,\n        this.tok.T_NAME_QUALIFIED,\n        this.tok.T_NAME_FULLY_QUALIFIED,\n        // using SCALAR :\n        this.tok.T_STRING, // @see variable.js line 45 > conflict with variable = shift/reduce :)\n        this.tok.T_CONSTANT_ENCAPSED_STRING,\n        this.tok.T_START_HEREDOC,\n        this.tok.T_LNUMBER,\n        this.tok.T_DNUMBER,\n        this.tok.T_ARRAY,\n        \"[\",\n        this.tok.T_CLASS_C,\n        this.tok.T_TRAIT_C,\n        this.tok.T_FUNC_C,\n        this.tok.T_METHOD_C,\n        this.tok.T_LINE,\n        this.tok.T_FILE,\n        this.tok.T_DIR,\n        this.tok.T_NS_C,\n        '\"',\n        'b\"',\n        'B\"',\n        \"-\",\n        this.tok.T_NS_SEPARATOR,\n      ].map(mapIt)\n    ),\n  };\n};\n\n/**\n * helper : gets a token name\n * @function Parser#getTokenName\n * @memberOf module:php-parser\n */\nParser.prototype.getTokenName = function (token) {\n  if (!isNumber(token)) {\n    return \"'\" + token + \"'\";\n  } else {\n    if (token == this.EOF) return \"the end of file (EOF)\";\n    return this.lexer.engine.tokens.values[token];\n  }\n};\n\n/**\n * main entry point : converts a source code to AST\n * @function Parser#parse\n * @memberOf module:php-parser\n */\nParser.prototype.parse = function (code, filename) {\n  this._errors = [];\n  this.filename = filename || \"eval\";\n  this.currentNamespace = [\"\"];\n  if (this.extractDoc) {\n    this._docs = [];\n  } else {\n    this._docs = null;\n  }\n  if (this.extractTokens) {\n    this._tokens = [];\n  } else {\n    this._tokens = null;\n  }\n  this._docIndex = 0;\n  this._lastNode = null;\n  this.lexer.setInput(code);\n  this.lexer.all_tokens = this.extractTokens;\n  this.lexer.comment_tokens = this.extractDoc;\n  this.length = this.lexer._input.length;\n  this.innerList = false;\n  this.innerListForm = false;\n  const program = this.node(\"program\");\n  const childs = [];\n  this.next();\n  while (this.token != this.EOF) {\n    childs.push(this.read_start());\n  }\n  // append last comment\n  if (\n    childs.length === 0 &&\n    this.extractDoc &&\n    this._docs.length > this._docIndex\n  ) {\n    childs.push(this.node(\"noop\")());\n  }\n  // #176 : register latest position\n  this.prev = [\n    this.lexer.yylloc.last_line,\n    this.lexer.yylloc.last_column,\n    this.lexer.offset,\n  ];\n  const result = program(childs, this._errors, this._docs, this._tokens);\n  if (this.debug) {\n    const errors = this.ast.checkNodes();\n    /* istanbul ignore next */\n    if (errors.length > 0) {\n      errors.forEach(function (error) {\n        if (error.position) {\n          // eslint-disable-next-line no-console\n          console.log(\n            \"Node at line \" +\n              error.position.line +\n              \", column \" +\n              error.position.column\n          );\n        }\n        // eslint-disable-next-line no-console\n        console.log(error.stack.join(\"\\n\"));\n      });\n      throw new Error(\"Some nodes are not closed\");\n    }\n  }\n  return result;\n};\n\n/**\n * Raise an error\n * @function Parser#raiseError\n * @memberOf module:php-parser\n */\nParser.prototype.raiseError = function (message, msgExpect, expect, token) {\n  message += \" on line \" + this.lexer.yylloc.first_line;\n  if (!this.suppressErrors) {\n    const err = new SyntaxError(\n      message,\n      this.filename,\n      this.lexer.yylloc.first_line\n    );\n    err.lineNumber = this.lexer.yylloc.first_line;\n    err.fileName = this.filename;\n    err.columnNumber = this.lexer.yylloc.first_column;\n    throw err;\n  }\n  // Error node :\n  const node = this.ast.prepare(\"error\", null, this)(\n    message,\n    token,\n    this.lexer.yylloc.first_line,\n    expect\n  );\n  this._errors.push(node);\n  return node;\n};\n\n/**\n * handling errors\n * @function Parser#error\n * @memberOf module:php-parser\n */\nParser.prototype.error = function (expect) {\n  let msg = \"Parse Error : syntax error\";\n  let token = this.getTokenName(this.token);\n  let msgExpect = \"\";\n\n  if (this.token !== this.EOF) {\n    if (isNumber(this.token)) {\n      let symbol = this.text();\n      /* istanbul ignore next */\n      if (symbol.length > 10) {\n        symbol = symbol.substring(0, 7) + \"...\";\n      }\n      token = \"'\" + symbol + \"' (\" + token + \")\";\n    }\n    msg += \", unexpected \" + token;\n  }\n  if (expect && !Array.isArray(expect)) {\n    if (isNumber(expect) || expect.length === 1) {\n      msgExpect = \", expecting \" + this.getTokenName(expect);\n    }\n    msg += msgExpect;\n  }\n  return this.raiseError(msg, msgExpect, expect, token);\n};\n\n/**\n * Create a position node from the lexers position\n *\n * @function Parser#position\n * @memberOf module:php-parser\n * @return {Position}\n */\nParser.prototype.position = function () {\n  return new Position(\n    this.lexer.yylloc.first_line,\n    this.lexer.yylloc.first_column,\n    this.lexer.yylloc.first_offset\n  );\n};\n\n/**\n * Creates a new AST node\n * @function Parser#node\n * @memberOf module:php-parser\n */\nParser.prototype.node = function (name) {\n  if (this.extractDoc) {\n    let docs = null;\n    if (this._docIndex < this._docs.length) {\n      docs = this._docs.slice(this._docIndex);\n      this._docIndex = this._docs.length;\n      /* istanbul ignore next */\n      if (this.debug) {\n        // eslint-disable-next-line no-console\n        console.log(new Error(\"Append docs on \" + name));\n        // eslint-disable-next-line no-console\n        console.log(docs);\n      }\n    }\n    const node = this.ast.prepare(name, docs, this);\n    /*\n     * TOKENS :\n     * node1 commentA token commmentB node2 commentC token commentD node3 commentE token\n     *\n     * AST :\n     * structure:S1 [\n     *    left: node1 ( trail: commentA ),\n     *    right: structure:S2 [\n     *       node2 (lead: commentB, trail: commentC),\n     *       node3 (lead: commentD)\n     *    ],\n     *    trail: commentE\n     * ]\n     *\n     * Algorithm :\n     *\n     * Attach the last comments on parent of current node\n     * If a new node is started and the parent has a trailing comment\n     * the move it on previous node\n     *\n     * start S2\n     * start node1\n     * consume node1 & set commentA as trailingComment on S2\n     * start S2\n     * S1 has a trailingComment, attach it on node1\n     * ...\n     * NOTE : As the trailingComment Behavior depends on AST, it will be build on\n     * the AST layer - last child node will keep it's trailingComment nodes\n     */\n    node.postBuild = function (self) {\n      if (this._docIndex < this._docs.length) {\n        if (this._lastNode) {\n          const offset = this.prev[2];\n          let max = this._docIndex;\n          for (; max < this._docs.length; max++) {\n            if (this._docs[max].offset > offset) {\n              break;\n            }\n          }\n          if (max > this._docIndex) {\n            // inject trailing comment on child node\n            this._lastNode.setTrailingComments(\n              this._docs.slice(this._docIndex, max)\n            );\n            this._docIndex = max;\n          }\n        } else if (this.token === this.EOF) {\n          // end of content\n          self.setTrailingComments(this._docs.slice(this._docIndex));\n          this._docIndex = this._docs.length;\n        }\n      }\n      this._lastNode = self;\n    }.bind(this);\n    return node;\n  }\n  return this.ast.prepare(name, null, this);\n};\n\n/**\n * expects an end of statement or end of file\n * @function Parser#expectEndOfStatement\n * @memberOf module:php-parser\n * @return {boolean}\n */\nParser.prototype.expectEndOfStatement = function (node) {\n  if (this.token === \";\") {\n    // include only real ';' statements\n    // https://github.com/glayzzle/php-parser/issues/164\n    if (node && this.lexer.yytext === \";\") {\n      node.includeToken(this);\n    }\n  } else if (this.token !== this.tok.T_INLINE_HTML && this.token !== this.EOF) {\n    this.error(\";\");\n    return false;\n  }\n  this.next();\n  return true;\n};\n\nconst ignoreStack = [\"parser.next\", \"parser.node\", \"parser.showlog\"];\n/**\n * outputs some debug information on current token\n * @private\n * @function Parser#showlog\n * @memberOf module:php-parser\n */\nParser.prototype.showlog = function () {\n  const stack = new Error().stack.split(\"\\n\");\n  let line;\n  for (let offset = 2; offset < stack.length; offset++) {\n    line = stack[offset].trim();\n    let found = false;\n    for (let i = 0; i < ignoreStack.length; i++) {\n      /* istanbul ignore next */\n      if (line.substring(3, 3 + ignoreStack[i].length) === ignoreStack[i]) {\n        found = true;\n        break;\n      }\n    }\n    /* istanbul ignore next */\n    if (!found) {\n      break;\n    }\n  }\n  // eslint-disable-next-line no-console\n  console.log(\n    \"Line \" +\n      this.lexer.yylloc.first_line +\n      \" : \" +\n      this.getTokenName(this.token) +\n      \">\" +\n      this.lexer.yytext +\n      \"<\" +\n      \" @-->\" +\n      line\n  );\n  return this;\n};\n\n/**\n * Force the parser to check the current token.\n *\n * If the current token does not match to expected token,\n * the an error will be raised.\n *\n * If the suppressError mode is activated, then the error will\n * be added to the program error stack and this function will return `false`.\n *\n * @function Parser#expect\n * @memberOf module:php-parser\n * @param {String|Number} token\n * @return {boolean}\n * @throws Error\n */\nParser.prototype.expect = function (token) {\n  if (Array.isArray(token)) {\n    if (token.indexOf(this.token) === -1) {\n      this.error(token);\n      return false;\n    }\n  } else if (this.token != token) {\n    this.error(token);\n    return false;\n  }\n  return true;\n};\n\n/**\n * Returns the current token contents\n * @function Parser#text\n * @memberOf module:php-parser\n * @return {String}\n */\nParser.prototype.text = function () {\n  return this.lexer.yytext;\n};\n\n/**\n * consume the next token\n * @function Parser#next\n * @memberOf module:php-parser\n */\nParser.prototype.next = function () {\n  // prepare the back command\n  if (this.token !== \";\" || this.lexer.yytext === \";\") {\n    // ignore '?>' from automated resolution\n    // https://github.com/glayzzle/php-parser/issues/168\n    this.prev = [\n      this.lexer.yylloc.last_line,\n      this.lexer.yylloc.last_column,\n      this.lexer.offset,\n    ];\n  }\n\n  // eating the token\n  this.lex();\n\n  // showing the debug\n  if (this.debug) {\n    this.showlog();\n  }\n\n  // handling comments\n  if (this.extractDoc) {\n    while (\n      this.token === this.tok.T_COMMENT ||\n      this.token === this.tok.T_DOC_COMMENT\n    ) {\n      // APPEND COMMENTS\n      if (this.token === this.tok.T_COMMENT) {\n        this._docs.push(this.read_comment());\n      } else {\n        this._docs.push(this.read_doc_comment());\n      }\n    }\n  }\n\n  return this;\n};\n\n/**\n * Peek at the next token.\n * @function Parser#peek\n * @memberOf module:php-parser\n * @returns {string|number} Next Token\n */\nParser.prototype.peek = function () {\n  const lexerState = this.lexer.getState();\n  const nextToken = this.lexer.lex();\n  this.lexer.setState(lexerState);\n  return nextToken;\n};\n\n/**\n * Eating a token\n * @function Parser#lex\n * @memberOf module:php-parser\n */\nParser.prototype.lex = function () {\n  // append on token stack\n  if (this.extractTokens) {\n    do {\n      // the token\n      this.token = this.lexer.lex() || /* istanbul ignore next */ this.EOF;\n      if (this.token === this.EOF) return this;\n      let entry = this.lexer.yytext;\n      if (\n        Object.prototype.hasOwnProperty.call(\n          this.lexer.engine.tokens.values,\n          this.token\n        )\n      ) {\n        entry = [\n          this.lexer.engine.tokens.values[this.token],\n          entry,\n          this.lexer.yylloc.first_line,\n          this.lexer.yylloc.first_offset,\n          this.lexer.offset,\n        ];\n      } else {\n        entry = [\n          null,\n          entry,\n          this.lexer.yylloc.first_line,\n          this.lexer.yylloc.first_offset,\n          this.lexer.offset,\n        ];\n      }\n      this._tokens.push(entry);\n      if (this.token === this.tok.T_CLOSE_TAG) {\n        // https://github.com/php/php-src/blob/7ff186434e82ee7be7c59d0db9a976641cf7b09c/Zend/zend_compile.c#L1680\n        this.token = \";\";\n        return this;\n      } else if (this.token === this.tok.T_OPEN_TAG_WITH_ECHO) {\n        this.token = this.tok.T_ECHO;\n        return this;\n      }\n    } while (\n      this.token === this.tok.T_WHITESPACE || // ignore white space\n      (!this.extractDoc &&\n        (this.token === this.tok.T_COMMENT || // ignore single lines comments\n          this.token === this.tok.T_DOC_COMMENT)) || // ignore doc comments\n      // ignore open tags\n      this.token === this.tok.T_OPEN_TAG\n    );\n  } else {\n    this.token = this.lexer.lex() || /* istanbul ignore next */ this.EOF;\n  }\n  return this;\n};\n\n/**\n * Check if token is of specified type\n * @function Parser#is\n * @memberOf module:php-parser\n */\nParser.prototype.is = function (type) {\n  if (Array.isArray(type)) {\n    return type.indexOf(this.token) !== -1;\n  }\n  return this.entries[type].has(this.token);\n};\n\n// extends the parser with syntax files\n[\n  require(\"./parser/array.js\"),\n  require(\"./parser/class.js\"),\n  require(\"./parser/comment.js\"),\n  require(\"./parser/expr.js\"),\n  require(\"./parser/enum.js\"),\n  require(\"./parser/function.js\"),\n  require(\"./parser/if.js\"),\n  require(\"./parser/loops.js\"),\n  require(\"./parser/main.js\"),\n  require(\"./parser/namespace.js\"),\n  require(\"./parser/scalar.js\"),\n  require(\"./parser/statement.js\"),\n  require(\"./parser/switch.js\"),\n  require(\"./parser/try.js\"),\n  require(\"./parser/utils.js\"),\n  require(\"./parser/variable.js\"),\n].forEach(function (ext) {\n  for (const k in ext) {\n    /* istanbul ignore next */\n    if (Object.prototype.hasOwnProperty.call(Parser.prototype, k)) {\n      // @see https://github.com/glayzzle/php-parser/issues/234\n      throw new Error(\"Function \" + k + \" is already defined - collision\");\n    }\n    Parser.prototype[k] = ext[k];\n  }\n});\n\nmodule.exports = Parser;\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\n/**\n * @readonly\n * @memberOf module:php-parser\n *\n * @enum {number}\n **/\nconst TokenNames = {\n  T_HALT_COMPILER: 101,\n  T_USE: 102,\n  T_ENCAPSED_AND_WHITESPACE: 103,\n  T_OBJECT_OPERATOR: 104,\n  T_STRING: 105,\n  T_DOLLAR_OPEN_CURLY_BRACES: 106,\n  T_STRING_VARNAME: 107,\n  T_CURLY_OPEN: 108,\n  T_NUM_STRING: 109,\n  T_ISSET: 110,\n  T_EMPTY: 111,\n  T_INCLUDE: 112,\n  T_INCLUDE_ONCE: 113,\n  T_EVAL: 114,\n  T_REQUIRE: 115,\n  T_REQUIRE_ONCE: 116,\n  T_NAMESPACE: 117,\n  T_NS_SEPARATOR: 118,\n  T_AS: 119,\n  T_IF: 120,\n  T_ENDIF: 121,\n  T_WHILE: 122,\n  T_DO: 123,\n  T_FOR: 124,\n  T_SWITCH: 125,\n  T_BREAK: 126,\n  T_CONTINUE: 127,\n  T_RETURN: 128,\n  T_GLOBAL: 129,\n  T_STATIC: 130,\n  T_ECHO: 131,\n  T_INLINE_HTML: 132,\n  T_UNSET: 133,\n  T_FOREACH: 134,\n  T_DECLARE: 135,\n  T_TRY: 136,\n  T_THROW: 137,\n  T_GOTO: 138,\n  T_FINALLY: 139,\n  T_CATCH: 140,\n  T_ENDDECLARE: 141,\n  T_LIST: 142,\n  T_CLONE: 143,\n  T_PLUS_EQUAL: 144,\n  T_MINUS_EQUAL: 145,\n  T_MUL_EQUAL: 146,\n  T_DIV_EQUAL: 147,\n  T_CONCAT_EQUAL: 148,\n  T_MOD_EQUAL: 149,\n  T_AND_EQUAL: 150,\n  T_OR_EQUAL: 151,\n  T_XOR_EQUAL: 152,\n  T_SL_EQUAL: 153,\n  T_SR_EQUAL: 154,\n  T_INC: 155,\n  T_DEC: 156,\n  T_BOOLEAN_OR: 157,\n  T_BOOLEAN_AND: 158,\n  T_LOGICAL_OR: 159,\n  T_LOGICAL_AND: 160,\n  T_LOGICAL_XOR: 161,\n  T_SL: 162,\n  T_SR: 163,\n  T_IS_IDENTICAL: 164,\n  T_IS_NOT_IDENTICAL: 165,\n  T_IS_EQUAL: 166,\n  T_IS_NOT_EQUAL: 167,\n  T_IS_SMALLER_OR_EQUAL: 168,\n  T_IS_GREATER_OR_EQUAL: 169,\n  T_INSTANCEOF: 170,\n  T_INT_CAST: 171,\n  T_DOUBLE_CAST: 172,\n  T_STRING_CAST: 173,\n  T_ARRAY_CAST: 174,\n  T_OBJECT_CAST: 175,\n  T_BOOL_CAST: 176,\n  T_UNSET_CAST: 177,\n  T_EXIT: 178,\n  T_PRINT: 179,\n  T_YIELD: 180,\n  T_YIELD_FROM: 181,\n  T_FUNCTION: 182,\n  T_DOUBLE_ARROW: 183,\n  T_DOUBLE_COLON: 184,\n  T_ARRAY: 185,\n  T_CALLABLE: 186,\n  T_CLASS: 187,\n  T_ABSTRACT: 188,\n  T_TRAIT: 189,\n  T_FINAL: 190,\n  T_EXTENDS: 191,\n  T_INTERFACE: 192,\n  T_IMPLEMENTS: 193,\n  T_VAR: 194,\n  T_PUBLIC: 195,\n  T_PROTECTED: 196,\n  T_PRIVATE: 197,\n  T_CONST: 198,\n  T_NEW: 199,\n  T_INSTEADOF: 200,\n  T_ELSEIF: 201,\n  T_ELSE: 202,\n  T_ENDSWITCH: 203,\n  T_CASE: 204,\n  T_DEFAULT: 205,\n  T_ENDFOR: 206,\n  T_ENDFOREACH: 207,\n  T_ENDWHILE: 208,\n  T_CONSTANT_ENCAPSED_STRING: 209,\n  T_LNUMBER: 210,\n  T_DNUMBER: 211,\n  T_LINE: 212,\n  T_FILE: 213,\n  T_DIR: 214,\n  T_TRAIT_C: 215,\n  T_METHOD_C: 216,\n  T_FUNC_C: 217,\n  T_NS_C: 218,\n  T_START_HEREDOC: 219,\n  T_END_HEREDOC: 220,\n  T_CLASS_C: 221,\n  T_VARIABLE: 222,\n  T_OPEN_TAG: 223,\n  T_OPEN_TAG_WITH_ECHO: 224,\n  T_CLOSE_TAG: 225,\n  T_WHITESPACE: 226,\n  T_COMMENT: 227,\n  T_DOC_COMMENT: 228,\n  T_ELLIPSIS: 229,\n  T_COALESCE: 230,\n  T_POW: 231,\n  T_POW_EQUAL: 232,\n  T_SPACESHIP: 233,\n  T_COALESCE_EQUAL: 234,\n  T_FN: 235,\n  T_NULLSAFE_OBJECT_OPERATOR: 236,\n  T_MATCH: 237,\n  T_ATTRIBUTE: 238,\n  T_ENUM: 239,\n  T_READ_ONLY: 240,\n  T_NAME_RELATIVE: 241,\n  T_NAME_QUALIFIED: 242,\n  T_NAME_FULLY_QUALIFIED: 243,\n};\n\n/**\n * PHP AST Tokens\n * @readonly\n * @memberOf module:php-parser\n *\n * @type {object}\n * @property {Object.<number, string>} values\n * @property {TokenNames} names\n */\nconst tokens = {\n  values: Object.entries(TokenNames).reduce(\n    (result, [key, value]) => ({ ...result, [value]: key }),\n    {}\n  ),\n  names: TokenNames,\n};\n\nmodule.exports = Object.freeze(tokens);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\n/**\n * Defines the location of the node (with it's source contents as string)\n * @constructor Location\n * @memberOf module:php-parser\n * @property {string|null} source\n * @property {Position} start\n * @property {Position} end\n */\nconst Location = function (source, start, end) {\n  this.source = source;\n  this.start = start;\n  this.end = end;\n};\n\nmodule.exports = Location;\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\n/**\n * A generic AST node\n * @constructor Node\n * @memberOf module:php-parser\n * @property {Location|null} loc\n * @property {CommentBlock[]|Comment[]|null} leadingComments\n * @property {CommentBlock[]|Comment[]|null} trailingComments\n * @property {string} kind\n */\nconst Node = function Node(kind, docs, location) {\n  this.kind = kind;\n  if (docs) {\n    this.leadingComments = docs;\n  }\n  if (location) {\n    this.loc = location;\n  }\n};\n\n/**\n * Attach comments to current node\n * @function Node#setTrailingComments\n * @memberOf module:php-parser\n * @param {*} docs\n */\nNode.prototype.setTrailingComments = function (docs) {\n  this.trailingComments = docs;\n};\n\n/**\n * Destroying an unused node\n * @function Node#destroy\n * @memberOf module:php-parser\n */\nNode.prototype.destroy = function (node) {\n  if (!node) {\n    /* istanbul ignore next */\n    throw new Error(\n      \"Node already initialized, you must swap with another node\"\n    );\n  }\n  if (this.leadingComments) {\n    if (node.leadingComments) {\n      node.leadingComments = Array.concat(\n        this.leadingComments,\n        node.leadingComments\n      );\n    } else {\n      node.leadingComments = this.leadingComments;\n    }\n  }\n  if (this.trailingComments) {\n    if (node.trailingComments) {\n      node.trailingComments = Array.concat(\n        this.trailingComments,\n        node.trailingComments\n      );\n    } else {\n      node.trailingComments = this.trailingComments;\n    }\n  }\n  return node;\n};\n\n/**\n * Includes current token position of the parser\n * @function Node#includeToken\n * @memberOf module:php-parser\n * @param {*} parser\n */\nNode.prototype.includeToken = function (parser) {\n  if (this.loc) {\n    if (this.loc.end) {\n      this.loc.end.line = parser.lexer.yylloc.last_line;\n      this.loc.end.column = parser.lexer.yylloc.last_column;\n      this.loc.end.offset = parser.lexer.offset;\n    }\n    if (parser.ast.withSource) {\n      this.loc.source = parser.lexer._input.substring(\n        this.loc.start.offset,\n        parser.lexer.offset\n      );\n    }\n  }\n  return this;\n};\n\n/**\n * Helper for extending the Node class\n * @function Node.extends\n * @memberOf module:php-parser\n * @param {string} type\n * @param {Function} constructor\n * @return {Function}\n */\nNode.extends = function (type, constructor) {\n  constructor.prototype = Object.create(this.prototype);\n  constructor.extends = this.extends;\n  constructor.prototype.constructor = constructor;\n  constructor.kind = type;\n  return constructor;\n};\n\nmodule.exports = Node;\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"expression\";\n\n/**\n * Any expression node. Since the left-hand side of an assignment may\n * be any expression in general, an expression can also be a pattern.\n * @constructor Expression\n * @memberOf module:php-parser\n * @extends {Node}\n */\nmodule.exports = Node.extends(KIND, function Expression(kind, docs, location) {\n  Node.apply(this, [kind || KIND, docs, location]);\n});\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expr = require(\"./expression\");\nconst KIND = \"array\";\n\n/**\n * Defines an array structure\n * @constructor Array\n * @memberOf module:php-parser\n * @example\n * // PHP code :\n * [1, 'foo' => 'bar', 3]\n *\n * // AST structure :\n * {\n *  \"kind\": \"array\",\n *  \"shortForm\": true\n *  \"items\": [\n *    {\"kind\": \"number\", \"value\": \"1\"},\n *    {\n *      \"kind\": \"entry\",\n *      \"key\": {\"kind\": \"string\", \"value\": \"foo\", \"isDoubleQuote\": false},\n *      \"value\": {\"kind\": \"string\", \"value\": \"bar\", \"isDoubleQuote\": false}\n *    },\n *    {\"kind\": \"number\", \"value\": \"3\"}\n *  ]\n * }\n * @extends {Expression}\n * @property {Array<Entry|Expression|Variable>} items List of array items\n * @property {boolean} shortForm Indicate if the short array syntax is used, ex `[]` instead `array()`\n */\nmodule.exports = Expr.extends(\n  KIND,\n  function Array(shortForm, items, docs, location) {\n    Expr.apply(this, [KIND, docs, location]);\n    this.items = items;\n    this.shortForm = shortForm;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"arrowfunc\";\n\n/**\n * Defines an arrow function (it's like a closure)\n * @constructor ArrowFunc\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Parameter[]} arguments\n * @property {Identifier} type\n * @property {Expression} body\n * @property {boolean} byref\n * @property {boolean} nullable\n * @property {boolean} isStatic\n */\nmodule.exports = Expression.extends(\n  KIND,\n  function Closure(\n    args,\n    byref,\n    body,\n    type,\n    nullable,\n    isStatic,\n    docs,\n    location\n  ) {\n    Expression.apply(this, [KIND, docs, location]);\n    this.arguments = args;\n    this.byref = byref;\n    this.body = body;\n    this.type = type;\n    this.nullable = nullable;\n    this.isStatic = isStatic || false;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"assign\";\n\n/**\n * Assigns a value to the specified target\n * @constructor Assign\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Expression} left\n * @property {Expression} right\n * @property {String} operator\n */\nmodule.exports = Expression.extends(\n  KIND,\n  function Assign(left, right, operator, docs, location) {\n    Expression.apply(this, [KIND, docs, location]);\n    this.left = left;\n    this.right = right;\n    this.operator = operator;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"assignref\";\n\n/**\n * Assigns a value to the specified target\n * @constructor AssignRef\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Expression} left\n * @property {Expression} right\n * @property {String} operator\n */\nmodule.exports = Expression.extends(\n  KIND,\n  function AssignRef(left, right, docs, location) {\n    Expression.apply(this, [KIND, docs, location]);\n    this.left = left;\n    this.right = right;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"attribute\";\n\n/**\n * Attribute Value\n * @memberOf module:php-parser\n * @constructor Attribute\n * @extends {Node}\n * @property {String} name\n * @property {Parameter[]} args\n */\nmodule.exports = Node.extends(\n  KIND,\n  function Attribute(name, args, docs, location) {\n    Node.apply(this, [KIND, docs, location]);\n    this.name = name;\n    this.args = args;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"attrgroup\";\n\n/**\n * Attribute group\n * @memberOf module:php-parser\n * @constructor AttrGroup\n * @extends {Node}\n * @property {Attribute[]} attrs\n */\nmodule.exports = Node.extends(KIND, function AttrGroup(attrs, docs, location) {\n  Node.apply(this, [KIND, docs, location]);\n  this.attrs = attrs || [];\n});\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expr = require(\"./expression\");\nconst KIND = \"operation\";\n\n/**\n * Defines binary operations\n * @constructor Operation\n * @memberOf module:php-parser\n * @extends {Expression}\n */\nmodule.exports = Expr.extends(KIND, function Operation(kind, docs, location) {\n  Expr.apply(this, [kind || KIND, docs, location]);\n});\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Operation = require(\"./operation\");\nconst KIND = \"bin\";\n/**\n * Binary operations\n * @constructor Bin\n * @memberOf module:php-parser\n * @extends {Operation}\n * @property {String} type\n * @property {Expression} left\n * @property {Expression} right\n */\nmodule.exports = Operation.extends(\n  KIND,\n  function Bin(type, left, right, docs, location) {\n    Operation.apply(this, [KIND, docs, location]);\n    this.type = type;\n    this.left = left;\n    this.right = right;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"statement\";\n\n/**\n * Any statement.\n * @constructor Statement\n * @memberOf module:php-parser\n * @extends {Node}\n */\nmodule.exports = Node.extends(KIND, function Statement(kind, docs, location) {\n  Node.apply(this, [kind || KIND, docs, location]);\n});\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"block\";\n\n/**\n * A block statement, i.e., a sequence of statements surrounded by braces.\n * @constructor Block\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Node[]} children\n */\nmodule.exports = Statement.extends(\n  KIND,\n  function Block(kind, children, docs, location) {\n    Statement.apply(this, [kind || KIND, docs, location]);\n    this.children = children.filter(Boolean);\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"literal\";\n\n/**\n * Defines an array structure\n * @constructor Literal\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {string} raw\n * @property {EncapsedPart[]|Node|string|number|boolean|null} value\n */\nmodule.exports = Expression.extends(\n  KIND,\n  function Literal(kind, value, raw, docs, location) {\n    Expression.apply(this, [kind || KIND, docs, location]);\n    this.value = value;\n    if (raw) {\n      this.raw = raw;\n    }\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Literal = require(\"./literal\");\nconst KIND = \"boolean\";\n\n/**\n * Defines a boolean value (true/false)\n * @constructor Boolean\n * @memberOf module:php-parser\n * @extends {Literal}\n * @property {boolean} value\n */\nmodule.exports = Literal.extends(\n  KIND,\n  function Boolean(value, raw, docs, location) {\n    Literal.apply(this, [KIND, value, raw, docs, location]);\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"break\";\n\n/**\n * A break statement\n * @constructor Break\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Number|Null} level\n */\nmodule.exports = Statement.extends(KIND, function Break(level, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.level = level;\n});\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"byref\";\n\n/**\n * Passing by Reference - so the function can modify the variable\n * @constructor ByRef\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {ExpressionStatement} what\n */\nmodule.exports = Expression.extends(KIND, function ByRef(what, docs, location) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.what = what;\n});\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"call\";\n\n/**\n * Executes a call statement\n * @constructor Call\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Identifier|Variable} what\n * @property {Expression[]} arguments\n */\nmodule.exports = Expression.extends(\n  KIND,\n  function Call(what, args, docs, location) {\n    Expression.apply(this, [KIND, docs, location]);\n    this.what = what;\n    this.arguments = args;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"case\";\n\n/**\n * A switch case statement\n * @constructor Case\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Expression|null} test - if null, means that the default case\n * @property {Block|null} body\n */\nmodule.exports = Statement.extends(\n  KIND,\n  function Case(test, body, docs, location) {\n    Statement.apply(this, [KIND, docs, location]);\n    this.test = test;\n    this.body = body;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Operation = require(\"./operation\");\nconst KIND = \"cast\";\n\n/**\n * Binary operations\n * @constructor Cast\n * @memberOf module:php-parser\n * @extends {Operation}\n * @property {String} type\n * @property {String} raw\n * @property {Expression} expr\n */\nmodule.exports = Operation.extends(\n  KIND,\n  function Cast(type, raw, expr, docs, location) {\n    Operation.apply(this, [KIND, docs, location]);\n    this.type = type;\n    this.raw = raw;\n    this.expr = expr;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"catch\";\n\n/**\n * Defines a catch statement\n * @constructor Catch\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Name[]} what\n * @property {Variable} variable\n * @property {Block} body\n * @see http://php.net/manual/en/language.exceptions.php\n */\nmodule.exports = Statement.extends(\n  KIND,\n  function Catch(body, what, variable, docs, location) {\n    Statement.apply(this, [KIND, docs, location]);\n    this.body = body;\n    this.what = what;\n    this.variable = variable;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"declaration\";\n\nconst IS_UNDEFINED = \"\";\nconst IS_PUBLIC = \"public\";\nconst IS_PROTECTED = \"protected\";\nconst IS_PRIVATE = \"private\";\n\n/**\n * A declaration statement (function, class, interface...)\n * @constructor Declaration\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Identifier|string} name\n */\nconst Declaration = Statement.extends(\n  KIND,\n  function Declaration(kind, name, docs, location) {\n    Statement.apply(this, [kind || KIND, docs, location]);\n    this.name = name;\n  }\n);\n\n/**\n * Generic flags parser\n * @function\n * @name Declaration#parseFlags\n * @memberOf module:php-parser\n * @param {Array<number|null>} flags\n * @return {void}\n */\nDeclaration.prototype.parseFlags = function (flags) {\n  this.isAbstract = flags[2] === 1;\n  this.isFinal = flags[2] === 2;\n  if (this.kind !== \"class\") {\n    if (flags[0] === -1) {\n      this.visibility = IS_UNDEFINED;\n    } else if (flags[0] === null) {\n      /* istanbul ignore next */\n      this.visibility = null;\n    } else if (flags[0] === 0) {\n      this.visibility = IS_PUBLIC;\n    } else if (flags[0] === 1) {\n      this.visibility = IS_PROTECTED;\n    } else if (flags[0] === 2) {\n      this.visibility = IS_PRIVATE;\n    }\n    this.isStatic = flags[1] === 1;\n  }\n};\n\nmodule.exports = Declaration;\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Declaration = require(\"./declaration\");\nconst KIND = \"class\";\n\n/**\n * A class definition\n * @constructor Class\n * @memberOf module:php-parser\n * @extends {Declaration}\n * @property {Identifier|null} extends\n * @property {Identifier[]|null} implements\n * @property {Declaration[]} body\n * @property {boolean} isAnonymous\n * @property {boolean} isAbstract\n * @property {boolean} isFinal\n * @property {AttrGroup[]} attrGroups\n */\nmodule.exports = Declaration.extends(\n  KIND,\n  function Class(name, ext, impl, body, flags, docs, location) {\n    Declaration.apply(this, [KIND, name, docs, location]);\n    this.isAnonymous = name ? false : true;\n    this.extends = ext;\n    this.implements = impl;\n    this.body = body;\n    this.attrGroups = [];\n    this.parseFlags(flags);\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"constantstatement\";\n\n/**\n * Declares a constants into the current scope\n * @constructor ConstantStatement\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Constant[]} constants\n */\nmodule.exports = Statement.extends(\n  KIND,\n  function ConstantStatement(kind, constants, docs, location) {\n    Statement.apply(this, [kind || KIND, docs, location]);\n    this.constants = constants;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst ConstantStatement = require(\"./constantstatement\");\nconst KIND = \"classconstant\";\n\nconst IS_UNDEFINED = \"\";\nconst IS_PUBLIC = \"public\";\nconst IS_PROTECTED = \"protected\";\nconst IS_PRIVATE = \"private\";\n\n/**\n * Defines a class/interface/trait constant\n * @constructor ClassConstant\n * @memberOf module:php-parser\n * @extends {ConstantStatement}\n * @property {string} visibility\n * @property {AttrGroup[]} attrGroups\n */\nconst ClassConstant = ConstantStatement.extends(\n  KIND,\n  function ClassConstant(kind, constants, flags, attrGroups, docs, location) {\n    ConstantStatement.apply(this, [kind || KIND, constants, docs, location]);\n    this.parseFlags(flags);\n    this.attrGroups = attrGroups;\n  }\n);\n\n/**\n * Generic flags parser\n * @function\n * @name ClassConstant#parseFlags\n * @memberOf module:php-parser\n * @param {Array<number|null>} flags\n * @return {void}\n */\nClassConstant.prototype.parseFlags = function (flags) {\n  if (flags[0] === -1) {\n    this.visibility = IS_UNDEFINED;\n  } else if (flags[0] === null) {\n    /* istanbul ignore next */\n    this.visibility = null;\n  } else if (flags[0] === 0) {\n    this.visibility = IS_PUBLIC;\n  } else if (flags[0] === 1) {\n    this.visibility = IS_PROTECTED;\n  } else if (flags[0] === 2) {\n    this.visibility = IS_PRIVATE;\n  }\n};\n\nmodule.exports = ClassConstant;\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"clone\";\n\n/**\n * Defines a clone call\n * @constructor Clone\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Expression} what\n */\nmodule.exports = Expression.extends(KIND, function Clone(what, docs, location) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.what = what;\n});\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"closure\";\n\n/**\n * Defines a closure\n * @constructor Closure\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Parameter[]} arguments\n * @property {Variable[]} uses\n * @property {Identifier} type\n * @property {Boolean} byref\n * @property {boolean} nullable\n * @property {Block|null} body\n * @property {boolean} isStatic\n * @property {AttrGroup[]} attrGroups\n */\nmodule.exports = Expression.extends(\n  KIND,\n  function Closure(\n    args,\n    byref,\n    uses,\n    type,\n    nullable,\n    isStatic,\n    docs,\n    location\n  ) {\n    Expression.apply(this, [KIND, docs, location]);\n    this.uses = uses;\n    this.arguments = args;\n    this.byref = byref;\n    this.type = type;\n    this.nullable = nullable;\n    this.isStatic = isStatic || false;\n    this.body = null;\n    this.attrGroups = [];\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\n\n/**\n * Abstract documentation node (ComentLine or CommentBlock)\n * @constructor Comment\n * @memberOf module:php-parser\n * @extends {Node}\n * @property {String} value\n */\nmodule.exports = Node.extends(\n  \"comment\",\n  function Comment(kind, value, docs, location) {\n    Node.apply(this, [kind, docs, location]);\n    this.value = value;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Comment = require(\"./comment\");\nconst KIND = \"commentblock\";\n\n/**\n * A comment block (multiline)\n * @constructor CommentBlock\n * @memberOf module:php-parser\n * @extends {Comment}\n */\nmodule.exports = Comment.extends(\n  KIND,\n  function CommentBlock(value, docs, location) {\n    Comment.apply(this, [KIND, value, docs, location]);\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Comment = require(\"./comment\");\nconst KIND = \"commentline\";\n\n/**\n * A single line comment\n * @constructor CommentLine\n * @memberOf module:php-parser\n * @extends {Comment}\n */\nmodule.exports = Comment.extends(\n  KIND,\n  function CommentLine(value, docs, location) {\n    Comment.apply(this, [KIND, value, docs, location]);\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"constant\";\n\n/**\n * Defines a constant\n * @constructor Constant\n * @memberOf module:php-parser\n * @extends {Node}\n * @property {string} name\n * @property {Node|string|number|boolean|null} value\n */\nmodule.exports = Node.extends(\n  KIND,\n  function Constant(name, value, docs, location) {\n    Node.apply(this, [KIND, docs, location]);\n    this.name = name;\n    this.value = value;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"continue\";\n\n/**\n * A continue statement\n * @constructor Continue\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {number|null} level\n */\nmodule.exports = Statement.extends(\n  KIND,\n  function Continue(level, docs, location) {\n    Statement.apply(this, [KIND, docs, location]);\n    this.level = level;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Block = require(\"./block\");\nconst KIND = \"declare\";\n\n/**\n * The declare construct is used to set execution directives for a block of code\n * @constructor Declare\n * @memberOf module:php-parser\n * @extends {Block}\n * @property {DeclareDirective[]} directives\n * @property {string} mode\n * @see http://php.net/manual/en/control-structures.declare.php\n */\nconst Declare = Block.extends(\n  KIND,\n  function Declare(directives, body, mode, docs, location) {\n    Block.apply(this, [KIND, body, docs, location]);\n    this.directives = directives;\n    this.mode = mode;\n  }\n);\n\n/**\n * The node is declared as a short tag syntax :\n * ```php\n * <?php\n * declare(ticks=1):\n * // some statements\n * enddeclare;\n * ```\n * @constant {String} Declare#MODE_SHORT\n * @memberOf module:php-parser\n */\nDeclare.MODE_SHORT = \"short\";\n\n/**\n * The node is declared bracket enclosed code :\n * ```php\n * <?php\n * declare(ticks=1) {\n * // some statements\n * }\n * ```\n * @constant {String} Declare#MODE_BLOCK\n * @memberOf module:php-parser\n */\nDeclare.MODE_BLOCK = \"block\";\n\n/**\n * The node is declared as a simple statement. In order to make things simpler\n * children of the node are automatically collected until the next\n * declare statement.\n * ```php\n * <?php\n * declare(ticks=1);\n * // some statements\n * declare(ticks=2);\n * // some statements\n * ```\n * @constant {String} Declare#MODE_NONE\n * @memberOf module:php-parser\n */\nDeclare.MODE_NONE = \"none\";\n\nmodule.exports = Declare;\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"declaredirective\";\n\n/**\n * Defines a constant\n * @constructor DeclareDirective\n * @memberOf module:php-parser\n * @extends {Node}\n * @property {Identifier} key\n * @property {Node|string|number|boolean|null} value\n */\nmodule.exports = Node.extends(\n  KIND,\n  function DeclareDirective(key, value, docs, location) {\n    Node.apply(this, [KIND, docs, location]);\n    this.key = key;\n    this.value = value;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"do\";\n\n/**\n * Defines a do/while statement\n * @constructor Do\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Expression} test\n * @property {Block | null} body\n */\nmodule.exports = Statement.extends(\n  KIND,\n  function Do(test, body, docs, location) {\n    Statement.apply(this, [KIND, docs, location]);\n    this.test = test;\n    this.body = body;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"echo\";\n\n/**\n * Defines system based call\n * @constructor Echo\n * @memberOf module:php-parser\n * @property {boolean} shortForm\n * @property {Expression[]} expressions\n * @extends {Statement}\n */\nmodule.exports = Statement.extends(\n  KIND,\n  function Echo(expressions, shortForm, docs, location) {\n    Statement.apply(this, [KIND, docs, location]);\n    this.shortForm = shortForm;\n    this.expressions = expressions;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"empty\";\n\n/**\n * Defines an empty check call\n * @constructor Empty\n * @memberOf module:php-parser\n * @extends {Expression}\n */\nmodule.exports = Expression.extends(\n  KIND,\n  function Empty(expression, docs, location) {\n    Expression.apply(this, [KIND, docs, location]);\n    this.expression = expression;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Literal = require(\"./literal\");\nconst KIND = \"encapsed\";\n\n/**\n * Defines an encapsed string (contains expressions)\n * @constructor Encapsed\n * @memberOf module:php-parser\n * @extends {Literal}\n * @property {String} type - Defines the type of encapsed string (shell, heredoc, string)\n * @property {String|Null} label - The heredoc label, defined only when the type is heredoc\n * @property {EncapsedPart[]} value\n */\nconst Encapsed = Literal.extends(\n  KIND,\n  function Encapsed(value, raw, type, docs, location) {\n    Literal.apply(this, [KIND, value, raw, docs, location]);\n    this.type = type;\n  }\n);\n\n/**\n * The node is a double quote string :\n * ```php\n * <?php\n * echo \"hello $world\";\n * ```\n * @constant {String} Encapsed#TYPE_STRING - `string`\n * @memberOf module:php-parser\n */\nEncapsed.TYPE_STRING = \"string\";\n\n/**\n * The node is a shell execute string :\n * ```php\n * <?php\n * echo `ls -larth $path`;\n * ```\n * @constant {String} Encapsed#TYPE_SHELL - `shell`\n * @memberOf module:php-parser\n */\nEncapsed.TYPE_SHELL = \"shell\";\n\n/**\n * The node is a shell execute string :\n * ```php\n * <?php\n * echo <<<STR\n *  Hello $world\n * STR\n * ;\n * ```\n * @constant {String} Encapsed#TYPE_HEREDOC - `heredoc`\n * @memberOf module:php-parser\n */\nEncapsed.TYPE_HEREDOC = \"heredoc\";\n\n/**\n * The node contains a list of constref / variables / expr :\n * ```php\n * <?php\n * echo $foo->bar_$baz;\n * ```\n * @constant {String} Encapsed#TYPE_OFFSET - `offset`\n * @memberOf module:php-parser\n */\nEncapsed.TYPE_OFFSET = \"offset\";\n\nmodule.exports = Encapsed;\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"encapsedpart\";\n\n/**\n * Part of `Encapsed` node\n * @constructor EncapsedPart\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Expression} expression\n * @property {String} syntax\n * @property {Boolean} curly\n */\nmodule.exports = Expression.extends(\n  KIND,\n  function EncapsedPart(expression, syntax, curly, docs, location) {\n    Expression.apply(this, [KIND, docs, location]);\n    this.expression = expression;\n    this.syntax = syntax;\n    this.curly = curly;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"entry\";\n\n/**\n * An array entry - see [Array](#array)\n * @memberOf module:php-parser\n * @constructor Entry\n * @extends {Expression}\n * @property {Node|null} key The entry key/offset\n * @property {Node} value The entry value\n * @property {Boolean} byRef By reference\n * @property {Boolean} unpack Argument unpacking\n */\nmodule.exports = Expression.extends(\n  KIND,\n  function Entry(key, value, byRef, unpack, docs, location) {\n    Expression.apply(this, [KIND, docs, location]);\n    this.key = key;\n    this.value = value;\n    this.byRef = byRef;\n    this.unpack = unpack;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Declaration = require(\"./declaration\");\nconst KIND = \"enum\";\n\n/**\n * A enum definition\n * @constructor Enum\n * @memberOf module:php-parser\n * @extends {Declaration}\n * @property {Identifier|null} valueType\n * @property {Identifier[]} implements\n * @property {Declaration[]} body\n * @property {AttrGroup[]} attrGroups\n */\nmodule.exports = Declaration.extends(\n  KIND,\n  function Enum(name, valueType, impl, body, docs, location) {\n    Declaration.apply(this, [KIND, name, docs, location]);\n    this.valueType = valueType;\n    this.implements = impl;\n    this.body = body;\n    this.attrGroups = [];\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"enumcase\";\n\n/**\n * Declares a cases into the current scope\n * @constructor EnumCase\n * @memberOf module:php-parser\n * @extends {Node}\n * @property {string} name\n * @property {string|number|null} value\n */\nmodule.exports = Node.extends(\n  KIND,\n  function EnumCase(name, value, docs, location) {\n    Node.apply(this, [KIND, docs, location]);\n    this.name = name;\n    this.value = value;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"error\";\n\n/**\n * Defines an error node (used only on silentMode)\n * @constructor Error\n * @memberOf module:php-parser\n * @extends {Node}\n * @property {string} message\n * @property {number} line\n * @property {number|string} token\n * @property {string|array} expected\n */\nmodule.exports = Node.extends(\n  KIND,\n  function Error(message, token, line, expected, docs, location) {\n    Node.apply(this, [KIND, docs, location]);\n    this.message = message;\n    this.token = token;\n    this.line = line;\n    this.expected = expected;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"eval\";\n\n/**\n * Defines an eval statement\n * @constructor Eval\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Node} source\n */\nmodule.exports = Expression.extends(\n  KIND,\n  function Eval(source, docs, location) {\n    Expression.apply(this, [KIND, docs, location]);\n    this.source = source;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"exit\";\n\n/**\n * Defines an exit / die call\n * @constructor Exit\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Node|null} expression\n * @property {boolean} useDie\n */\nmodule.exports = Expression.extends(\n  KIND,\n  function Exit(expression, useDie, docs, location) {\n    Expression.apply(this, [KIND, docs, location]);\n    this.expression = expression;\n    this.useDie = useDie;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"expressionstatement\";\n\n/**\n * Defines an expression based statement\n * @constructor ExpressionStatement\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Expression} expression\n */\nmodule.exports = Statement.extends(\n  KIND,\n  function ExpressionStatement(expr, docs, location) {\n    Statement.apply(this, [KIND, docs, location]);\n    this.expression = expr;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"for\";\n\n/**\n * Defines a for iterator\n * @constructor For\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Expression[]} init\n * @property {Expression[]} test\n * @property {Expression[]} increment\n * @property {Block | null} body\n * @property {boolean} shortForm\n * @see http://php.net/manual/en/control-structures.for.php\n */\nmodule.exports = Statement.extends(\n  KIND,\n  function For(init, test, increment, body, shortForm, docs, location) {\n    Statement.apply(this, [KIND, docs, location]);\n    this.init = init;\n    this.test = test;\n    this.increment = increment;\n    this.shortForm = shortForm;\n    this.body = body;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"foreach\";\n\n/**\n * Defines a foreach iterator\n * @constructor Foreach\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Expression} source\n * @property {Expression|null} key\n * @property {Expression} value\n * @property {Block | null} body\n * @property {boolean} shortForm\n * @see http://php.net/manual/en/control-structures.foreach.php\n */\nmodule.exports = Statement.extends(\n  KIND,\n  function Foreach(source, key, value, body, shortForm, docs, location) {\n    Statement.apply(this, [KIND, docs, location]);\n    this.source = source;\n    this.key = key;\n    this.value = value;\n    this.shortForm = shortForm;\n    this.body = body;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Declaration = require(\"./declaration\");\nconst KIND = \"function\";\n\n/**\n * Defines a classic function\n * @constructor Function\n * @memberOf module:php-parser\n * @extends {Declaration}\n * @property {Parameter[]} arguments\n * @property {Identifier} type\n * @property {boolean} byref\n * @property {boolean} nullable\n * @property {Block|null} body\n * @property {AttrGroup[]} attrGroups\n */\nmodule.exports = Declaration.extends(\n  KIND,\n  function _Function(name, args, byref, type, nullable, docs, location) {\n    Declaration.apply(this, [KIND, name, docs, location]);\n    this.arguments = args;\n    this.byref = byref;\n    this.type = type;\n    this.nullable = nullable;\n    this.body = null;\n    this.attrGroups = [];\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"global\";\n\n/**\n * Imports a variable from the global scope\n * @constructor Global\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Variable[]} items\n */\nmodule.exports = Statement.extends(\n  KIND,\n  function Global(items, docs, location) {\n    Statement.apply(this, [KIND, docs, location]);\n    this.items = items;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"goto\";\n\n/**\n * Defines goto statement\n * @constructor Goto\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {string} label\n * @see {Label}\n */\nmodule.exports = Statement.extends(KIND, function Goto(label, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.label = label;\n});\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"halt\";\n\n/**\n * Halts the compiler execution\n * @constructor Halt\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {String} after - String after the halt statement\n * @see http://php.net/manual/en/function.halt-compiler.php\n */\nmodule.exports = Statement.extends(KIND, function Halt(after, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.after = after;\n});\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"identifier\";\n\n/**\n * Defines an identifier node\n * @constructor Identifier\n * @memberOf module:php-parser\n * @extends {Node}\n * @property {string} name\n */\nconst Identifier = Node.extends(\n  KIND,\n  function Identifier(name, docs, location) {\n    Node.apply(this, [KIND, docs, location]);\n    this.name = name;\n  }\n);\n\nmodule.exports = Identifier;\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"if\";\n\n/**\n * Defines a if statement\n * @constructor If\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Expression} test\n * @property {Block} body\n * @property {Block|If|null} alternate\n * @property {boolean} shortForm\n */\nmodule.exports = Statement.extends(\n  KIND,\n  function If(test, body, alternate, shortForm, docs, location) {\n    Statement.apply(this, [KIND, docs, location]);\n    this.test = test;\n    this.body = body;\n    this.alternate = alternate;\n    this.shortForm = shortForm;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"include\";\n\n/**\n * Defines system include call\n * @constructor Include\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Node} target\n * @property {boolean} once\n * @property {boolean} require\n */\nmodule.exports = Expression.extends(\n  KIND,\n  function Include(once, require, target, docs, location) {\n    Expression.apply(this, [KIND, docs, location]);\n    this.once = once;\n    this.require = require;\n    this.target = target;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Literal = require(\"./literal\");\nconst KIND = \"inline\";\n\n/**\n * Defines inline html output (treated as echo output)\n * @constructor Inline\n * @memberOf module:php-parser\n * @extends {Literal}\n * @property {string} value\n */\nmodule.exports = Literal.extends(\n  KIND,\n  function Inline(value, raw, docs, location) {\n    Literal.apply(this, [KIND, value, raw, docs, location]);\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Declaration = require(\"./declaration\");\nconst KIND = \"interface\";\n\n/**\n * An interface definition\n * @constructor Interface\n * @memberOf module:php-parser\n * @extends {Declaration}\n * @property {Identifier[]} extends\n * @property {Declaration[]} body\n * @property {AttrGroup[]} attrGroups\n */\nmodule.exports = Declaration.extends(\n  KIND,\n  function Interface(name, ext, body, attrGroups, docs, location) {\n    Declaration.apply(this, [KIND, name, docs, location]);\n    this.extends = ext;\n    this.body = body;\n    this.attrGroups = attrGroups;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Declaration = require(\"./declaration\");\nconst KIND = \"intersectiontype\";\n\n/**\n * A union of types\n * @memberOf module:php-parser\n * @constructor IntersectionType\n * @extends {Declaration}\n * @property {TypeReference[]} types\n */\nmodule.exports = Declaration.extends(\n  KIND,\n  function IntersectionType(types, docs, location) {\n    Declaration.apply(this, [KIND, null, docs, location]);\n    this.types = types;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"isset\";\n\n/**\n * Defines an isset call\n * @constructor Isset\n * @memberOf module:php-parser\n * @extends {Expression}\n */\nmodule.exports = Expression.extends(\n  KIND,\n  function Isset(variables, docs, location) {\n    Expression.apply(this, [KIND, docs, location]);\n    this.variables = variables;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"label\";\n\n/**\n * A label statement (referenced by goto)\n * @constructor Label\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {String} name\n */\nmodule.exports = Statement.extends(KIND, function Label(name, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.name = name;\n});\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"list\";\n\n/**\n * Defines list assignment\n * @constructor List\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {boolean} shortForm\n * @property {Entry[]} items\n */\nmodule.exports = Expression.extends(\n  KIND,\n  function List(items, shortForm, docs, location) {\n    Expression.apply(this, [KIND, docs, location]);\n    this.items = items;\n    this.shortForm = shortForm;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expr = require(\"./expression\");\nconst KIND = \"lookup\";\n\n/**\n * Lookup on an offset in the specified object\n * @constructor Lookup\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Expression} what\n * @property {Expression} offset\n */\nmodule.exports = Expr.extends(\n  KIND,\n  function Lookup(kind, what, offset, docs, location) {\n    Expr.apply(this, [kind || KIND, docs, location]);\n    this.what = what;\n    this.offset = offset;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Literal = require(\"./literal\");\nconst KIND = \"magic\";\n\n/**\n * Defines magic constant\n * @constructor Magic\n * @memberOf module:php-parser\n * @extends {Literal}\n */\nmodule.exports = Literal.extends(\n  KIND,\n  function Magic(value, raw, docs, location) {\n    Literal.apply(this, [KIND, value, raw, docs, location]);\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"match\";\n\n/**\n * Defines a match expression\n * @memberOf module:php-parser\n * @constructor Match\n * @extends {Expression}\n * @property {Expression} cond Condition expression to match against\n * @property {MatchArm[]} arms Arms for comparison\n */\nmodule.exports = Expression.extends(\n  KIND,\n  function Match(cond, arms, docs, location) {\n    Expression.apply(this, [KIND, docs, location]);\n    this.cond = cond;\n    this.arms = arms;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"matcharm\";\n\n/**\n * An array entry - see [Array](#array)\n * @memberOf module:php-parser\n * @constructor MatchArm\n * @extends {Expression}\n * @property {Expression[]|null} conds The match condition expression list - null indicates default arm\n * @property {Expression} body The return value expression\n */\nmodule.exports = Expression.extends(\n  KIND,\n  function MatchArm(conds, body, docs, location) {\n    Expression.apply(this, [KIND, docs, location]);\n    this.conds = conds;\n    this.body = body;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Function_ = require(\"./function\");\nconst KIND = \"method\";\n\n/**\n * Defines a class/interface/trait method\n * @constructor Method\n * @memberOf module:php-parser\n * @extends {Function}\n * @property {boolean} isAbstract\n * @property {boolean} isFinal\n * @property {boolean} isStatic\n * @property {string} visibility\n */\nmodule.exports = Function_.extends(KIND, function Method() {\n  Function_.apply(this, arguments);\n  this.kind = KIND;\n});\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"reference\";\n\n/**\n * Defines a reference node\n * @constructor Reference\n * @memberOf module:php-parser\n * @extends {Node}\n */\nconst Reference = Node.extends(KIND, function Reference(kind, docs, location) {\n  Node.apply(this, [kind || KIND, docs, location]);\n});\n\nmodule.exports = Reference;\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Reference = require(\"./reference\");\nconst KIND = \"name\";\n\n/**\n * Defines a class reference node\n * @constructor Name\n * @memberOf module:php-parser\n * @extends {Reference}\n * @property {string} name\n * @property {string} resolution\n */\nconst Name = Reference.extends(\n  KIND,\n  function Name(name, resolution, docs, location) {\n    Reference.apply(this, [KIND, docs, location]);\n    this.name = name.replace(/\\\\$/, \"\");\n    this.resolution = resolution;\n  }\n);\n\n/**\n * This is an identifier without a namespace separator, such as Foo\n * @constant {String} Name#UNQUALIFIED_NAME\n * @memberOf module:php-parser\n */\nName.UNQUALIFIED_NAME = \"uqn\";\n/**\n * This is an identifier with a namespace separator, such as Foo\\Bar\n * @constant {String} Name#QUALIFIED_NAME\n * @memberOf module:php-parser\n */\nName.QUALIFIED_NAME = \"qn\";\n/**\n * This is an identifier with a namespace separator that begins with\n * a namespace separator, such as \\Foo\\Bar. The namespace \\Foo is also\n * a fully qualified name.\n * @constant {String} Name#FULL_QUALIFIED_NAME\n * @memberOf module:php-parser\n */\nName.FULL_QUALIFIED_NAME = \"fqn\";\n/**\n * This is an identifier starting with namespace, such as namespace\\Foo\\Bar.\n * @constant {String} Name#RELATIVE_NAME\n * @memberOf module:php-parser\n */\nName.RELATIVE_NAME = \"rn\";\n\nmodule.exports = Name;\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Block = require(\"./block\");\nconst KIND = \"namespace\";\n\n/**\n * The main program node\n * @constructor Namespace\n * @memberOf module:php-parser\n * @extends {Block}\n * @property {string} name\n * @property {boolean} withBrackets\n */\nmodule.exports = Block.extends(\n  KIND,\n  function Namespace(name, children, withBrackets, docs, location) {\n    Block.apply(this, [KIND, children, docs, location]);\n    this.name = name;\n    this.withBrackets = withBrackets || false;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"namedargument\";\n\n/**\n * Named arguments.\n * @memberOf module:php-parser\n * @constructor namedargument\n * @extends {Expression}\n * @property {String} name\n * @property {Expression} value\n * @see https://www.php.net/manual/en/functions.arguments.php#functions.named-arguments\n */\nmodule.exports = Expression.extends(\n  KIND,\n  function namedargument(name, value, docs, location) {\n    Expression.apply(this, [KIND, docs, location]);\n    this.name = name;\n    this.value = value;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"new\";\n\n/**\n * Creates a new instance of the specified class\n * @constructor New\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Identifier|Variable|Class} what\n * @property {Variable[]} arguments\n */\nmodule.exports = Expression.extends(\n  KIND,\n  function New(what, args, docs, location) {\n    Expression.apply(this, [KIND, docs, location]);\n    this.what = what;\n    this.arguments = args;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"noop\";\n\n/**\n * Ignore this node, it implies a no operation block, for example :\n * [$foo, $bar, /* here a noop node * /]\n * @constructor Noop\n * @memberOf module:php-parser\n * @extends {Node}\n */\nmodule.exports = Node.extends(KIND, function Noop(docs, location) {\n  Node.apply(this, [KIND, docs, location]);\n});\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Literal = require(\"./literal\");\nconst KIND = \"nowdoc\";\n\n/**\n * Defines a nowdoc string\n * @constructor NowDoc\n * @memberOf module:php-parser\n * @extends {Literal}\n * @property {string} label\n * @property {string} raw\n * @property {string} value\n */\nmodule.exports = Literal.extends(\n  KIND,\n  function Nowdoc(value, raw, label, docs, location) {\n    Literal.apply(this, [KIND, value, raw, docs, location]);\n    this.label = label;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"nullkeyword\";\n\n/**\n * Represents the null keyword\n * @constructor NullKeyword\n * @memberOf module:php-parser\n * @extends {Node}\n */\nmodule.exports = Node.extends(KIND, function NullKeyword(raw, docs, location) {\n  Node.apply(this, [KIND, docs, location]);\n  this.raw = raw;\n});\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Lookup = require(\"./lookup\");\nconst KIND = \"nullsafepropertylookup\";\n\n/**\n * Lookup to an object property\n * @memberOf module:php-parser\n * @constructor NullSafePropertyLookup\n * @extends {Lookup}\n */\nmodule.exports = Lookup.extends(\n  KIND,\n  function NullSafePropertyLookup(what, offset, docs, location) {\n    Lookup.apply(this, [KIND, what, offset, docs, location]);\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Literal = require(\"./literal\");\nconst KIND = \"number\";\n\n/**\n * Defines a numeric value\n * @constructor Number\n * @memberOf module:php-parser\n * @extends {Literal}\n * @property {number} value\n */\nmodule.exports = Literal.extends(\n  KIND,\n  function Number(value, raw, docs, location) {\n    Literal.apply(this, [KIND, value, raw, docs, location]);\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Lookup = require(\"./lookup\");\nconst KIND = \"offsetlookup\";\n\n/**\n * Lookup on an offset in an array\n * @constructor OffsetLookup\n * @memberOf module:php-parser\n * @extends {Lookup}\n */\nmodule.exports = Lookup.extends(\n  KIND,\n  function OffsetLookup(what, offset, docs, location) {\n    Lookup.apply(this, [KIND, what, offset, docs, location]);\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Declaration = require(\"./declaration\");\nconst KIND = \"parameter\";\n\n/**\n * @memberOf module:php-parser\n * @typedef {1} MODIFIER_PUBLIC\n **/\n/**\n * @memberOf module:php-parser\n * @typedef {2} MODIFIER_PROTECTED\n **/\n/**\n * @memberOf module:php-parser\n * @typedef {4} MODIFIER_PRIVATE\n **/\n/**\n * Defines a function parameter\n * @constructor Parameter\n * @memberOf module:php-parser\n * @extends {Declaration}\n * @property {Identifier|null} type\n * @property {Node|null} value\n * @property {boolean} byref\n * @property {boolean} variadic\n * @property {boolean} readonly\n * @property {boolean} nullable\n * @property {AttrGroup[]} attrGroups\n * @property {MODIFIER_PUBLIC|MODIFIER_PROTECTED|MODIFIER_PRIVATE} flags\n */\nmodule.exports = Declaration.extends(\n  KIND,\n  function Parameter(\n    name,\n    type,\n    value,\n    isRef,\n    isVariadic,\n    readonly,\n    nullable,\n    flags,\n    docs,\n    location\n  ) {\n    Declaration.apply(this, [KIND, name, docs, location]);\n    this.value = value;\n    this.type = type;\n    this.byref = isRef;\n    this.variadic = isVariadic;\n    this.readonly = readonly;\n    this.nullable = nullable;\n    this.flags = flags || 0;\n    this.attrGroups = [];\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Reference = require(\"./reference\");\nconst KIND = \"parentreference\";\n\n/**\n * Defines a class reference node\n * @constructor ParentReference\n * @memberOf module:php-parser\n * @extends {Reference}\n */\nconst ParentReference = Reference.extends(\n  KIND,\n  function ParentReference(raw, docs, location) {\n    Reference.apply(this, [KIND, docs, location]);\n    this.raw = raw;\n  }\n);\nmodule.exports = ParentReference;\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Operation = require(\"./operation\");\nconst KIND = \"post\";\n\n/**\n * Defines a post operation `$i++` or `$i--`\n * @constructor Post\n * @memberOf module:php-parser\n * @extends {Operation}\n * @property {String} type\n * @property {Variable} what\n */\nmodule.exports = Operation.extends(\n  KIND,\n  function Post(type, what, docs, location) {\n    Operation.apply(this, [KIND, docs, location]);\n    this.type = type;\n    this.what = what;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Operation = require(\"./operation\");\nconst KIND = \"pre\";\n\n/**\n * Defines a pre operation `++$i` or `--$i`\n * @constructor Pre\n * @memberOf module:php-parser\n * @extends {Operation}\n * @property {String} type\n * @property {Variable} what\n */\nmodule.exports = Operation.extends(\n  KIND,\n  function Pre(type, what, docs, location) {\n    Operation.apply(this, [KIND, docs, location]);\n    this.type = type;\n    this.what = what;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"print\";\n\n/**\n * Outputs\n * @constructor Print\n * @memberOf module:php-parser\n * @extends {Expression}\n */\nmodule.exports = Expression.extends(\n  KIND,\n  function Print(expression, docs, location) {\n    Expression.apply(this, [KIND, docs, location]);\n    this.expression = expression;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Block = require(\"./block\");\nconst KIND = \"program\";\n\n/**\n * The main program node\n * @constructor Program\n * @memberOf module:php-parser\n * @extends {Block}\n * @property {Error[]} errors\n * @property {Comment[]|null} comments\n * @property {String[]|null} tokens\n */\nmodule.exports = Block.extends(\n  KIND,\n  function Program(children, errors, comments, tokens, docs, location) {\n    Block.apply(this, [KIND, children, docs, location]);\n    this.errors = errors;\n    if (comments) {\n      this.comments = comments;\n    }\n    if (tokens) {\n      this.tokens = tokens;\n    }\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"property\";\n\n/**\n * Defines a class property\n * @constructor Property\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {string} name\n * @property {Node|null} value\n * @property {boolean} readonly\n * @property {boolean} nullable\n * @property {Identifier|Array<Identifier>|null} type\n * @property {AttrGroup[]} attrGroups\n */\nmodule.exports = Statement.extends(\n  KIND,\n  function Property(\n    name,\n    value,\n    readonly,\n    nullable,\n    type,\n    attrGroups,\n    docs,\n    location\n  ) {\n    Statement.apply(this, [KIND, docs, location]);\n    this.name = name;\n    this.value = value;\n    this.readonly = readonly;\n    this.nullable = nullable;\n    this.type = type;\n    this.attrGroups = attrGroups;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Lookup = require(\"./lookup\");\nconst KIND = \"propertylookup\";\n\n/**\n * Lookup to an object property\n * @memberOf module:php-parser\n * @constructor PropertyLookup\n * @extends {Lookup}\n */\nmodule.exports = Lookup.extends(\n  KIND,\n  function PropertyLookup(what, offset, docs, location) {\n    Lookup.apply(this, [KIND, what, offset, docs, location]);\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"propertystatement\";\n\nconst IS_UNDEFINED = \"\";\nconst IS_PUBLIC = \"public\";\nconst IS_PROTECTED = \"protected\";\nconst IS_PRIVATE = \"private\";\n\n/**\n * Declares a properties into the current scope\n * @constructor PropertyStatement\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Property[]} properties\n * @property {string|null} visibility\n * @property {boolean} isStatic\n */\nconst PropertyStatement = Statement.extends(\n  KIND,\n  function PropertyStatement(kind, properties, flags, docs, location) {\n    Statement.apply(this, [KIND, docs, location]);\n    this.properties = properties;\n    this.parseFlags(flags);\n  }\n);\n\n/**\n * Generic flags parser\n * @function PropertyStatement#parseFlags\n * @memberOf module:php-parser\n * @param {Array<number|null>} flags\n * @return {void}\n */\nPropertyStatement.prototype.parseFlags = function (flags) {\n  if (flags[0] === -1) {\n    this.visibility = IS_UNDEFINED;\n  } else if (flags[0] === null) {\n    this.visibility = null;\n  } else if (flags[0] === 0) {\n    this.visibility = IS_PUBLIC;\n  } else if (flags[0] === 1) {\n    this.visibility = IS_PROTECTED;\n  } else if (flags[0] === 2) {\n    this.visibility = IS_PRIVATE;\n  }\n\n  this.isStatic = flags[1] === 1;\n};\n\nmodule.exports = PropertyStatement;\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"retif\";\n\n/**\n * Defines a short if statement that returns a value\n * @constructor RetIf\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Expression} test\n * @property {Expression} trueExpr\n * @property {Expression} falseExpr\n */\nmodule.exports = Expression.extends(\n  KIND,\n  function RetIf(test, trueExpr, falseExpr, docs, location) {\n    Expression.apply(this, [KIND, docs, location]);\n    this.test = test;\n    this.trueExpr = trueExpr;\n    this.falseExpr = falseExpr;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"return\";\n\n/**\n * A continue statement\n * @constructor Return\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Expression|null} expr\n */\nmodule.exports = Statement.extends(KIND, function Return(expr, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.expr = expr;\n});\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Reference = require(\"./reference\");\nconst KIND = \"selfreference\";\n\n/**\n * Defines a class reference node\n * @constructor SelfReference\n * @memberOf module:php-parser\n * @extends {Reference}\n */\nconst SelfReference = Reference.extends(\n  KIND,\n  function SelfReference(raw, docs, location) {\n    Reference.apply(this, [KIND, docs, location]);\n    this.raw = raw;\n  }\n);\nmodule.exports = SelfReference;\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"silent\";\n\n/**\n * Avoids to show/log warnings & notices from the inner expression\n * @constructor Silent\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Expression} expr\n */\nmodule.exports = Expression.extends(\n  KIND,\n  function Silent(expr, docs, location) {\n    Expression.apply(this, [KIND, docs, location]);\n    this.expr = expr;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"static\";\n\n/**\n * Declares a static variable into the current scope\n * @constructor Static\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {StaticVariable[]} variables\n */\nmodule.exports = Statement.extends(\n  KIND,\n  function Static(variables, docs, location) {\n    Statement.apply(this, [KIND, docs, location]);\n    this.variables = variables;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"staticvariable\";\n\n/**\n * Defines a constant\n * @constructor StaticVariable\n * @memberOf module:php-parser\n * @extends {Node}\n * @property {Variable} variable\n * @property {Node|string|number|boolean|null} defaultValue\n */\nmodule.exports = Node.extends(\n  KIND,\n  function StaticVariable(variable, defaultValue, docs, location) {\n    Node.apply(this, [KIND, docs, location]);\n    this.variable = variable;\n    this.defaultValue = defaultValue;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Lookup = require(\"./lookup\");\nconst KIND = \"staticlookup\";\n\n/**\n * Lookup to a static property\n * @constructor StaticLookup\n * @memberOf module:php-parser\n * @extends {Lookup}\n */\nmodule.exports = Lookup.extends(\n  KIND,\n  function StaticLookup(what, offset, docs, location) {\n    Lookup.apply(this, [KIND, what, offset, docs, location]);\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Reference = require(\"./reference\");\nconst KIND = \"staticreference\";\n\n/**\n * Defines a class reference node\n * @constructor StaticReference\n * @memberOf module:php-parser\n * @extends {Reference}\n */\nconst StaticReference = Reference.extends(\n  KIND,\n  function StaticReference(raw, docs, location) {\n    Reference.apply(this, [KIND, docs, location]);\n    this.raw = raw;\n  }\n);\nmodule.exports = StaticReference;\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Literal = require(\"./literal\");\nconst KIND = \"string\";\n\n/**\n * Defines a string (simple or double quoted) - chars are already escaped\n * @constructor String\n * @memberOf module:php-parser\n * @extends {Literal}\n * @property {boolean} unicode\n * @property {boolean} isDoubleQuote\n * @see {Encapsed}\n * @property {string} value\n */\nmodule.exports = Literal.extends(\n  KIND,\n  function String(isDoubleQuote, value, unicode, raw, docs, location) {\n    Literal.apply(this, [KIND, value, raw, docs, location]);\n    this.unicode = unicode;\n    this.isDoubleQuote = isDoubleQuote;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"switch\";\n\n/**\n * Defines a switch statement\n * @constructor Switch\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Expression} test\n * @property {Block} body\n * @property {boolean} shortForm\n */\nmodule.exports = Statement.extends(\n  KIND,\n  function Switch(test, body, shortForm, docs, location) {\n    Statement.apply(this, [KIND, docs, location]);\n    this.test = test;\n    this.body = body;\n    this.shortForm = shortForm;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"throw\";\n\n/**\n * Defines a throw statement\n * @constructor Throw\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Expression} what\n */\nmodule.exports = Statement.extends(KIND, function Throw(what, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.what = what;\n});\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Declaration = require(\"./declaration\");\nconst KIND = \"trait\";\n\n/**\n * A trait definition\n * @constructor Trait\n * @memberOf module:php-parser\n * @extends {Declaration}\n * @property {Declaration[]} body\n */\nmodule.exports = Declaration.extends(\n  KIND,\n  function Trait(name, body, docs, location) {\n    Declaration.apply(this, [KIND, name, docs, location]);\n    this.body = body;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"traitalias\";\n\nconst IS_UNDEFINED = \"\";\nconst IS_PUBLIC = \"public\";\nconst IS_PROTECTED = \"protected\";\nconst IS_PRIVATE = \"private\";\n\n/**\n * Defines a trait alias\n * @constructor TraitAlias\n * @memberOf module:php-parser\n * @extends {Node}\n * @property {Identifier|null} trait\n * @property {Identifier} method\n * @property {Identifier|null} as\n * @property {string|null} visibility\n */\nmodule.exports = Node.extends(\n  KIND,\n  function TraitAlias(trait, method, as, flags, docs, location) {\n    Node.apply(this, [KIND, docs, location]);\n    this.trait = trait;\n    this.method = method;\n    this.as = as;\n    this.visibility = IS_UNDEFINED;\n    if (flags) {\n      if (flags[0] === 0) {\n        this.visibility = IS_PUBLIC;\n      } else if (flags[0] === 1) {\n        this.visibility = IS_PROTECTED;\n      } else if (flags[0] === 2) {\n        this.visibility = IS_PRIVATE;\n      }\n    }\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"traitprecedence\";\n\n/**\n * Defines a trait alias\n * @constructor TraitPrecedence\n * @memberOf module:php-parser\n * @extends {Node}\n * @property {Identifier|null} trait\n * @property {Identifier} method\n * @property {Identifier[]} instead\n */\nmodule.exports = Node.extends(\n  KIND,\n  function TraitPrecedence(trait, method, instead, docs, location) {\n    Node.apply(this, [KIND, docs, location]);\n    this.trait = trait;\n    this.method = method;\n    this.instead = instead;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"traituse\";\n\n/**\n * Defines a trait usage\n * @constructor TraitUse\n * @memberOf module:php-parser\n * @extends {Node}\n * @property {Identifier[]} traits\n * @property {Node[]|null} adaptations\n */\nmodule.exports = Node.extends(\n  KIND,\n  function TraitUse(traits, adaptations, docs, location) {\n    Node.apply(this, [KIND, docs, location]);\n    this.traits = traits;\n    this.adaptations = adaptations;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"try\";\n\n/**\n * Defines a try statement\n * @constructor Try\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Block} body\n * @property {Catch[]} catches\n * @property {Block} always\n */\nmodule.exports = Statement.extends(\n  KIND,\n  function Try(body, catches, always, docs, location) {\n    Statement.apply(this, [KIND, docs, location]);\n    this.body = body;\n    this.catches = catches;\n    this.always = always;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Reference = require(\"./reference\");\nconst KIND = \"typereference\";\n\n/**\n * Defines a class reference node\n * @constructor TypeReference\n * @memberOf module:php-parser\n * @extends {Reference}\n * @property {string} name\n */\nconst TypeReference = Reference.extends(\n  KIND,\n  function TypeReference(name, raw, docs, location) {\n    Reference.apply(this, [KIND, docs, location]);\n    this.name = name;\n    this.raw = raw;\n  }\n);\n\nTypeReference.types = [\n  \"int\",\n  \"float\",\n  \"string\",\n  \"bool\",\n  \"object\",\n  \"array\",\n  \"callable\",\n  \"iterable\",\n  \"void\",\n  \"static\",\n];\n\nmodule.exports = TypeReference;\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Operation = require(\"./operation\");\nconst KIND = \"unary\";\n\n/**\n * Unary operations\n * @constructor Unary\n * @memberOf module:php-parser\n * @extends {Operation}\n * @property {string} type\n * @property {Expression} what\n */\nmodule.exports = Operation.extends(\n  KIND,\n  function Unary(type, what, docs, location) {\n    Operation.apply(this, [KIND, docs, location]);\n    this.type = type;\n    this.what = what;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Declaration = require(\"./declaration\");\nconst KIND = \"uniontype\";\n\n/**\n * A union of types\n * @memberOf module:php-parser\n * @constructor UnionType\n * @extends {Declaration}\n * @property {TypeReference[]} types\n */\nmodule.exports = Declaration.extends(\n  KIND,\n  function UnionType(types, docs, location) {\n    Declaration.apply(this, [KIND, null, docs, location]);\n    this.types = types;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"unset\";\n\n/**\n * Deletes references to a list of variables\n * @constructor Unset\n * @memberOf module:php-parser\n * @extends {Statement}\n */\nmodule.exports = Statement.extends(\n  KIND,\n  function Unset(variables, docs, location) {\n    Statement.apply(this, [KIND, docs, location]);\n    this.variables = variables;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"usegroup\";\n\n/**\n * Defines a use statement (with a list of use items)\n * @constructor UseGroup\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {string|null} name\n * @property {string|null} type - Possible value : function, const\n * @property {UseItem[]} item\n * @see {Namespace}\n * @see http://php.net/manual/en/language.namespaces.importing.php\n */\nmodule.exports = Statement.extends(\n  KIND,\n  function UseGroup(name, type, items, docs, location) {\n    Statement.apply(this, [KIND, docs, location]);\n    this.name = name;\n    this.type = type;\n    this.items = items;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"useitem\";\n\n/**\n * Defines a use statement (from namespace)\n * @constructor UseItem\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {string} name\n * @property {string|null} type - Possible value : function, const\n * @property {Identifier|null} alias\n * @see {Namespace}\n * @see http://php.net/manual/en/language.namespaces.importing.php\n */\nconst UseItem = Statement.extends(\n  KIND,\n  function UseItem(name, alias, type, docs, location) {\n    Statement.apply(this, [KIND, docs, location]);\n    this.name = name;\n    this.alias = alias;\n    this.type = type;\n  }\n);\n\n/**\n * Importing a constant\n * @constant {string} UseItem#TYPE_CONST\n * @memberOf module:php-parser\n */\nUseItem.TYPE_CONST = \"const\";\n/**\n * Importing a function\n * @constant {string} UseItem#TYPE_FUNC\n * @memberOf module:php-parser\n */\nUseItem.TYPE_FUNCTION = \"function\";\n\nmodule.exports = UseItem;\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"variable\";\n\n/**\n * Any expression node. Since the left-hand side of an assignment may\n * be any expression in general, an expression can also be a pattern.\n * @constructor Variable\n * @memberOf module:php-parser\n * @extends {Expression}\n * @example\n * // PHP code :\n * $foo\n * // AST output\n * {\n *  \"kind\": \"variable\",\n *  \"name\": \"foo\",\n *  \"curly\": false\n * }\n * @property {string|Node} name The variable name (can be a complex expression when the name is resolved dynamically)\n * @property {boolean} curly Indicate if the name is defined between curlies, ex `${foo}`\n */\nmodule.exports = Expression.extends(\n  KIND,\n  function Variable(name, curly, docs, location) {\n    Expression.apply(this, [KIND, docs, location]);\n    this.name = name;\n    this.curly = curly || false;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"variadic\";\n\n/**\n * Introduce a list of items into the arguments of the call\n * @constructor Variadic\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Array|Expression} what\n * @see https://wiki.php.net/rfc/argument_unpacking\n */\nmodule.exports = Expression.extends(\n  KIND,\n  function variadic(what, docs, location) {\n    Expression.apply(this, [KIND, docs, location]);\n    this.what = what;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"variadicplaceholder\";\n\n/**\n * Defines a variadic placeholder (the ellipsis in PHP 8.1+'s first-class callable syntax)\n * @constructor VariadicPlaceholder\n * @memberOf module:php-parser\n * @extends {Node}\n * @see {Namespace}\n * @see http://php.net/manual/en/language.namespaces.importing.php\n */\nmodule.exports = Node.extends(\n  KIND,\n  function VariadicPlaceholder(docs, location) {\n    Node.apply(this, [KIND, docs, location]);\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"while\";\n\n/**\n * Defines a while statement\n * @constructor While\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Expression} test\n * @property {Block | null} body\n * @property {boolean} shortForm\n */\nmodule.exports = Statement.extends(\n  KIND,\n  function While(test, body, shortForm, docs, location) {\n    Statement.apply(this, [KIND, docs, location]);\n    this.test = test;\n    this.body = body;\n    this.shortForm = shortForm;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"yield\";\n\n/**\n * Defines a yield generator statement\n * @constructor Yield\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Expression|null} value\n * @property {Expression|null} key\n * @see http://php.net/manual/en/language.generators.syntax.php\n */\nmodule.exports = Expression.extends(\n  KIND,\n  function Yield(value, key, docs, location) {\n    Expression.apply(this, [KIND, docs, location]);\n    this.value = value;\n    this.key = key;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"yieldfrom\";\n\n/**\n * Defines a yield from generator statement\n * @constructor YieldFrom\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Expression} value\n * @see http://php.net/manual/en/language.generators.syntax.php\n */\nmodule.exports = Expression.extends(\n  KIND,\n  function YieldFrom(value, docs, location) {\n    Expression.apply(this, [KIND, docs, location]);\n    this.value = value;\n  }\n);\n", "/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Location = require(\"./ast/location\");\nconst Position = require(\"./ast/position\");\n\n/**\n * ## Class hierarchy\n *\n * - [Location](#location)\n * - [Position](#position)\n * - [Node](#node)\n *   - [Noop](#noop)\n *   - [NullKeyword](#nullkeyword)\n *   - [StaticVariable](#staticvariable)\n *   - [EncapsedPart](#encapsedpart)\n *   - [Constant](#constant)\n *   - [Identifier](#identifier)\n *   - [Reference](#reference)\n *     - [TypeReference](#typereference)\n *     - [ParentReference](#parentreference)\n *     - [StaticReference](#staticreference)\n *     - [SelfReference](#selfreference)\n *     - [Name](#name)\n *   - [TraitUse](#traituse)\n *   - [TraitAlias](#traitalias)\n *   - [TraitPrecedence](#traitprecedence)\n *   - [Comment](#comment)\n *     - [CommentLine](#commentline)\n *     - [CommentBlock](#commentblock)\n *   - [Error](#error)\n *   - [Expression](#expression)\n *     - [Entry](#entry)\n *     - [ArrowFunc](#arrowfunc)\n *     - [Closure](#closure)\n *     - [ByRef](#byref)\n *     - [Silent](#silent)\n *     - [RetIf](#retif)\n *     - [New](#new)\n *     - [Include](#include)\n *     - [Call](#call)\n *     - [Eval](#eval)\n *     - [Exit](#exit)\n *     - [Clone](#clone)\n *     - [Assign](#assign)\n *     - [AssignRef](#assignref)\n *     - [Array](#array)\n *     - [List](#list)\n *     - [Variable](#variable)\n *     - [Variadic](#variadic)\n *     - [Yield](#yield)\n *     - [YieldFrom](#yieldfrom)\n *     - [Print](#print)\n *     - [Isset](#isset)\n *     - [Empty](#empty)\n *     - [Lookup](#lookup)\n *       - [PropertyLookup](#propertylookup)\n *       - [StaticLookup](#staticlookup)\n *       - [OffsetLookup](#offsetlookup)\n *     - [Operation](#operation)\n *       - [Pre](#pre)\n *       - [Post](#post)\n *       - [Bin](#bin)\n *       - [Unary](#unary)\n *       - [Cast](#cast)\n *     - [Literal](#literal)\n *       - [Boolean](#boolean)\n *       - [String](#string)\n *       - [Number](#number)\n *       - [Inline](#inline)\n *       - [Magic](#magic)\n *       - [Nowdoc](#nowdoc)\n *       - [Encapsed](#encapsed)\n *   - [Statement](#statement)\n *     - [ConstantStatement](#constantstatement)\n *       - [ClassConstant](#classconstant)\n *     - [Return](#return)\n *     - [Label](#label)\n *     - [Continue](#continue)\n *     - [Case](#case)\n *     - [Break](#break)\n *     - [Echo](#echo)\n *     - [Unset](#unset)\n *     - [Halt](#halt)\n *     - [Declare](#declare)\n *     - [Global](#global)\n *     - [Static](#static)\n *     - [If](#if)\n *     - [Do](#do)\n *     - [While](#while)\n *     - [For](#for)\n *     - [Foreach](#foreach)\n *     - [Switch](#switch)\n *     - [Goto](#goto)\n *     - [Try](#try)\n *     - [Catch](#catch)\n *     - [Throw](#throw)\n *     - [UseGroup](#usegroup)\n *     - [UseItem](#useitem)\n *     - [Block](#block)\n *       - [Program](#program)\n *       - [Namespace](#namespace)\n *     - [PropertyStatement](#propertystatement)\n *     - [Property](#property)\n *     - [Declaration](#declaration)\n *       - [Class](#class)\n *       - [Interface](#interface)\n *       - [Trait](#trait)\n *       - [Function](#function)\n *         - [Method](#method)\n *       - [Parameter](#parameter)\n * ---\n */\n\n/**\n * The AST builder class\n * @constructor AST\n * @memberOf module:php-parser\n * @tutorial AST\n * @property {Boolean} withPositions - Should locate any node (by default false)\n * @property {Boolean} withSource - Should extract the node original code (by default false)\n */\nconst AST = function (withPositions, withSource) {\n  this.withPositions = withPositions;\n  this.withSource = withSource;\n};\n\n// operators in ascending order of precedence\nAST.precedence = {};\n[\n  [\"or\"],\n  [\"xor\"],\n  [\"and\"],\n  [\"=\"],\n  [\"?\"],\n  [\"??\"],\n  [\"||\"],\n  [\"&&\"],\n  [\"|\"],\n  [\"^\"],\n  [\"&\"],\n  [\"==\", \"!=\", \"===\", \"!==\", /* '<>', */ \"<=>\"],\n  [\"<\", \"<=\", \">\", \">=\"],\n  [\"<<\", \">>\"],\n  [\"+\", \"-\", \".\"],\n  [\"*\", \"/\", \"%\"],\n  [\"!\"],\n  [\"instanceof\"],\n  [\"cast\", \"silent\"],\n  [\"**\"],\n  // TODO: [ (array)\n  // TODO: clone, new\n].forEach(function (list, index) {\n  list.forEach(function (operator) {\n    AST.precedence[operator] = index + 1;\n  });\n});\n\n/**\n * @private\n * @function AST#isRightAssociative\n * @memberOf module:php-parser\n * @param operator\n * @return {boolean}\n */\nAST.prototype.isRightAssociative = function (operator) {\n  return operator === \"**\" || operator === \"??\";\n};\n\n/**\n * Change parent node informations after swapping childs\n * @private\n * @function AST#swapLocations\n * @memberOf module:php-parser\n */\nAST.prototype.swapLocations = function (target, first, last, parser) {\n  if (this.withPositions) {\n    target.loc.start = first.loc.start;\n    target.loc.end = last.loc.end;\n    if (this.withSource) {\n      target.loc.source = parser.lexer._input.substring(\n        target.loc.start.offset,\n        target.loc.end.offset\n      );\n    }\n  }\n};\n\n/**\n * Includes locations from first & last into the target\n * @private\n * @function AST#resolveLocations\n * @memberOf module:php-parser\n */\nAST.prototype.resolveLocations = function (target, first, last, parser) {\n  if (this.withPositions) {\n    if (target.loc.start.offset > first.loc.start.offset) {\n      target.loc.start = first.loc.start;\n    }\n    /* istanbul ignore next */\n    if (target.loc.end.offset < last.loc.end.offset) {\n      target.loc.end = last.loc.end;\n    }\n    if (this.withSource) {\n      target.loc.source = parser.lexer._input.substring(\n        target.loc.start.offset,\n        target.loc.end.offset\n      );\n    }\n  }\n};\n\n/**\n * Check and fix precence, by default using right\n * @private\n * @function AST#resolvePrecedence\n * @memberOf module:php-parser\n */\nAST.prototype.resolvePrecedence = function (result, parser) {\n  let buffer, lLevel, rLevel;\n  // handling precendence\n  if (result.kind === \"call\") {\n    // including what argument into location\n    this.resolveLocations(result, result.what, result, parser);\n  } else if (\n    result.kind === \"propertylookup\" ||\n    result.kind === \"staticlookup\" ||\n    (result.kind === \"offsetlookup\" && result.offset)\n  ) {\n    // including what argument into location\n    this.resolveLocations(result, result.what, result.offset, parser);\n  } else if (result.kind === \"bin\") {\n    if (result.right && !result.right.parenthesizedExpression) {\n      if (result.right.kind === \"bin\") {\n        lLevel = AST.precedence[result.type];\n        rLevel = AST.precedence[result.right.type];\n        if (\n          lLevel &&\n          rLevel &&\n          rLevel <= lLevel &&\n          (result.type !== result.right.type ||\n            !this.isRightAssociative(result.type))\n        ) {\n          // https://github.com/glayzzle/php-parser/issues/79\n          // shift precedence\n          buffer = result.right;\n          result.right = result.right.left;\n          this.swapLocations(result, result.left, result.right, parser);\n          buffer.left = this.resolvePrecedence(result, parser);\n          this.swapLocations(buffer, buffer.left, buffer.right, parser);\n          result = buffer;\n        }\n      } else if (result.right.kind === \"retif\") {\n        lLevel = AST.precedence[result.type];\n        rLevel = AST.precedence[\"?\"];\n        if (lLevel && rLevel && rLevel <= lLevel) {\n          buffer = result.right;\n          result.right = result.right.test;\n          this.swapLocations(result, result.left, result.right, parser);\n          buffer.test = this.resolvePrecedence(result, parser);\n          this.swapLocations(buffer, buffer.test, buffer.falseExpr, parser);\n          result = buffer;\n        }\n      }\n    }\n  } else if (\n    (result.kind === \"silent\" || result.kind === \"cast\") &&\n    result.expr &&\n    !result.expr.parenthesizedExpression\n  ) {\n    // https://github.com/glayzzle/php-parser/issues/172\n    if (result.expr.kind === \"bin\") {\n      buffer = result.expr;\n      result.expr = result.expr.left;\n      this.swapLocations(result, result, result.expr, parser);\n      buffer.left = this.resolvePrecedence(result, parser);\n      this.swapLocations(buffer, buffer.left, buffer.right, parser);\n      result = buffer;\n    } else if (result.expr.kind === \"retif\") {\n      buffer = result.expr;\n      result.expr = result.expr.test;\n      this.swapLocations(result, result, result.expr, parser);\n      buffer.test = this.resolvePrecedence(result, parser);\n      this.swapLocations(buffer, buffer.test, buffer.falseExpr, parser);\n      result = buffer;\n    }\n  } else if (result.kind === \"unary\") {\n    // https://github.com/glayzzle/php-parser/issues/75\n    if (result.what && !result.what.parenthesizedExpression) {\n      // unary precedence is always lower\n      if (result.what.kind === \"bin\") {\n        buffer = result.what;\n        result.what = result.what.left;\n        this.swapLocations(result, result, result.what, parser);\n        buffer.left = this.resolvePrecedence(result, parser);\n        this.swapLocations(buffer, buffer.left, buffer.right, parser);\n        result = buffer;\n      } else if (result.what.kind === \"retif\") {\n        buffer = result.what;\n        result.what = result.what.test;\n        this.swapLocations(result, result, result.what, parser);\n        buffer.test = this.resolvePrecedence(result, parser);\n        this.swapLocations(buffer, buffer.test, buffer.falseExpr, parser);\n        result = buffer;\n      }\n    }\n  } else if (result.kind === \"retif\") {\n    // https://github.com/glayzzle/php-parser/issues/77\n    if (\n      result.falseExpr &&\n      result.falseExpr.kind === \"retif\" &&\n      !result.falseExpr.parenthesizedExpression\n    ) {\n      buffer = result.falseExpr;\n      result.falseExpr = buffer.test;\n      this.swapLocations(result, result.test, result.falseExpr, parser);\n      buffer.test = this.resolvePrecedence(result, parser);\n      this.swapLocations(buffer, buffer.test, buffer.falseExpr, parser);\n      result = buffer;\n    }\n  } else if (result.kind === \"assign\") {\n    // https://github.com/glayzzle/php-parser/issues/81\n    if (\n      result.right &&\n      result.right.kind === \"bin\" &&\n      !result.right.parenthesizedExpression\n    ) {\n      lLevel = AST.precedence[\"=\"];\n      rLevel = AST.precedence[result.right.type];\n      // only shifts with and, xor, or\n      if (lLevel && rLevel && rLevel < lLevel) {\n        buffer = result.right;\n        result.right = result.right.left;\n        buffer.left = result;\n        this.swapLocations(buffer, buffer.left, result.right, parser);\n        result = buffer;\n      }\n    }\n  } else if (result.kind === \"expressionstatement\") {\n    this.swapLocations(result, result.expression, result, parser);\n  }\n  return result;\n};\n\n/**\n * Prepares an AST node\n * @private\n * @function AST#prepare\n * @memberOf module:php-parser\n * @param {String|null} kind - Defines the node type\n * @param {*} docs - (if null, the kind must be passed at the function call)\n * @param {Parser} parser - The parser instance (use for extracting locations)\n * @return {Function}\n */\nAST.prototype.prepare = function (kind, docs, parser) {\n  let start = null;\n  if (this.withPositions || this.withSource) {\n    start = parser.position();\n  }\n  const self = this;\n  // returns the node\n  const result = function () {\n    let location = null;\n    const args = Array.prototype.slice.call(arguments);\n    args.push(docs);\n    if (self.withPositions || self.withSource) {\n      let src = null;\n      if (self.withSource) {\n        src = parser.lexer._input.substring(start.offset, parser.prev[2]);\n      }\n      // if with source, need location on swapLocations function\n      location = new Location(\n        src,\n        start,\n        new Position(parser.prev[0], parser.prev[1], parser.prev[2])\n      );\n      // last argument is always the location\n      args.push(location);\n    }\n    // handle lazy kind definitions\n    if (!kind) {\n      kind = args.shift();\n    }\n    // build the object\n    const node = self[kind];\n    if (typeof node !== \"function\") {\n      throw new Error('Undefined node \"' + kind + '\"');\n    }\n    const astNode = Object.create(node.prototype);\n    node.apply(astNode, args);\n    result.instance = astNode;\n    /* istanbul ignore next */\n    if (result.trailingComments) {\n      // buffer of trailingComments\n      astNode.trailingComments = result.trailingComments;\n    }\n    if (typeof result.postBuild === \"function\") {\n      result.postBuild(astNode);\n    }\n    if (parser.debug) {\n      delete self.stack[result.stackUid];\n    }\n    return self.resolvePrecedence(astNode, parser);\n  };\n  if (parser.debug) {\n    if (!this.stack) {\n      this.stack = {};\n      this.stackUid = 1;\n    }\n    this.stack[++this.stackUid] = {\n      position: start,\n      stack: new Error().stack.split(\"\\n\").slice(3, 5),\n    };\n    result.stackUid = this.stackUid;\n  }\n\n  /**\n   * Sets a list of trailing comments\n   * @private\n   * @param {*} docs\n   */\n  result.setTrailingComments = function (docs) {\n    if (result.instance) {\n      // already created\n      result.instance.setTrailingComments(docs);\n    } else {\n      result.trailingComments = docs;\n    }\n  };\n\n  /**\n   * Release a node without using it on the AST\n   * @private\n   * @param {*} target\n   */\n  result.destroy = function (target) {\n    if (docs) {\n      // release current docs stack\n      if (target) {\n        if (!target.leadingComments) {\n          target.leadingComments = docs;\n        } else {\n          target.leadingComments = docs.concat(target.leadingComments);\n        }\n      } else {\n        parser._docIndex = parser._docs.length - docs.length;\n      }\n    }\n    if (parser.debug) {\n      delete self.stack[result.stackUid];\n    }\n  };\n  return result;\n};\n\nAST.prototype.checkNodes = function () {\n  const errors = [];\n  for (const k in this.stack) {\n    if (Object.prototype.hasOwnProperty.call(this.stack, k)) {\n      this.stack[k].key = k;\n      errors.push(this.stack[k]);\n    }\n  }\n  this.stack = {};\n  return errors;\n};\n\n// Define all AST nodes\n[\n  require(\"./ast/array\"),\n  require(\"./ast/arrowfunc\"),\n  require(\"./ast/assign\"),\n  require(\"./ast/assignref\"),\n  require(\"./ast/attribute\"),\n  require(\"./ast/attrgroup\"),\n  require(\"./ast/bin\"),\n  require(\"./ast/block\"),\n  require(\"./ast/boolean\"),\n  require(\"./ast/break\"),\n  require(\"./ast/byref\"),\n  require(\"./ast/call\"),\n  require(\"./ast/case\"),\n  require(\"./ast/cast\"),\n  require(\"./ast/catch\"),\n  require(\"./ast/class\"),\n  require(\"./ast/classconstant\"),\n  require(\"./ast/clone\"),\n  require(\"./ast/closure\"),\n  require(\"./ast/comment\"),\n  require(\"./ast/commentblock\"),\n  require(\"./ast/commentline\"),\n  require(\"./ast/constant\"),\n  require(\"./ast/constantstatement\"),\n  require(\"./ast/continue\"),\n  require(\"./ast/declaration\"),\n  require(\"./ast/declare\"),\n  require(\"./ast/declaredirective\"),\n  require(\"./ast/do\"),\n  require(\"./ast/echo\"),\n  require(\"./ast/empty\"),\n  require(\"./ast/encapsed\"),\n  require(\"./ast/encapsedpart\"),\n  require(\"./ast/entry\"),\n  require(\"./ast/enum\"),\n  require(\"./ast/enumcase\"),\n  require(\"./ast/error\"),\n  require(\"./ast/eval\"),\n  require(\"./ast/exit\"),\n  require(\"./ast/expression\"),\n  require(\"./ast/expressionstatement\"),\n  require(\"./ast/for\"),\n  require(\"./ast/foreach\"),\n  require(\"./ast/function\"),\n  require(\"./ast/global\"),\n  require(\"./ast/goto\"),\n  require(\"./ast/halt\"),\n  require(\"./ast/identifier\"),\n  require(\"./ast/if\"),\n  require(\"./ast/include\"),\n  require(\"./ast/inline\"),\n  require(\"./ast/interface\"),\n  require(\"./ast/intersectiontype\"),\n  require(\"./ast/isset\"),\n  require(\"./ast/label\"),\n  require(\"./ast/list\"),\n  require(\"./ast/literal\"),\n  require(\"./ast/lookup\"),\n  require(\"./ast/magic\"),\n  require(\"./ast/match\"),\n  require(\"./ast/matcharm\"),\n  require(\"./ast/method\"),\n  require(\"./ast/name\"),\n  require(\"./ast/namespace\"),\n  require(\"./ast/namedargument\"),\n  require(\"./ast/new\"),\n  require(\"./ast/node\"),\n  require(\"./ast/noop\"),\n  require(\"./ast/nowdoc\"),\n  require(\"./ast/nullkeyword\"),\n  require(\"./ast/nullsafepropertylookup\"),\n  require(\"./ast/number\"),\n  require(\"./ast/offsetlookup\"),\n  require(\"./ast/operation\"),\n  require(\"./ast/parameter\"),\n  require(\"./ast/parentreference\"),\n  require(\"./ast/post\"),\n  require(\"./ast/pre\"),\n  require(\"./ast/print\"),\n  require(\"./ast/program\"),\n  require(\"./ast/property\"),\n  require(\"./ast/propertylookup\"),\n  require(\"./ast/propertystatement\"),\n  require(\"./ast/reference\"),\n  require(\"./ast/retif\"),\n  require(\"./ast/return\"),\n  require(\"./ast/selfreference\"),\n  require(\"./ast/silent\"),\n  require(\"./ast/statement\"),\n  require(\"./ast/static\"),\n  require(\"./ast/staticvariable\"),\n  require(\"./ast/staticlookup\"),\n  require(\"./ast/staticreference\"),\n  require(\"./ast/string\"),\n  require(\"./ast/switch\"),\n  require(\"./ast/throw\"),\n  require(\"./ast/trait\"),\n  require(\"./ast/traitalias\"),\n  require(\"./ast/traitprecedence\"),\n  require(\"./ast/traituse\"),\n  require(\"./ast/try\"),\n  require(\"./ast/typereference\"),\n  require(\"./ast/unary\"),\n  require(\"./ast/uniontype\"),\n  require(\"./ast/unset\"),\n  require(\"./ast/usegroup\"),\n  require(\"./ast/useitem\"),\n  require(\"./ast/variable\"),\n  require(\"./ast/variadic\"),\n  require(\"./ast/variadicplaceholder\"),\n  require(\"./ast/while\"),\n  require(\"./ast/yield\"),\n  require(\"./ast/yieldfrom\"),\n].forEach(function (ctor) {\n  AST.prototype[ctor.kind] = ctor;\n});\n\nmodule.exports = AST;\n", "/**\n * Copyright (C) 2020 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst lexer = require(\"./lexer\");\nconst parser = require(\"./parser\");\nconst tokens = require(\"./tokens\");\nconst AST = require(\"./ast\");\n\n/**\n * @private\n */\nfunction combine(src, to) {\n  const keys = Object.keys(src);\n  let i = keys.length;\n  while (i--) {\n    const k = keys[i];\n    const val = src[k];\n    if (val === null) {\n      delete to[k];\n    } else if (typeof val === \"function\") {\n      to[k] = val.bind(to);\n    } else if (Array.isArray(val)) {\n      to[k] = Array.isArray(to[k]) ? to[k].concat(val) : val;\n    } else if (typeof val === \"object\") {\n      to[k] = typeof to[k] === \"object\" ? combine(val, to[k]) : val;\n    } else {\n      to[k] = val;\n    }\n  }\n  return to;\n}\n\n/**\n * Initialise a new parser instance with the specified options\n *\n * @class\n * @memberOf module:php-parser\n * @tutorial Engine\n * @example\n * var parser = require('php-parser');\n * var instance = new parser({\n *   parser: {\n *     extractDoc: true,\n *     suppressErrors: true,\n *     version: 704 // or '7.4'\n *   },\n *   ast: {\n *     withPositions: true\n *   },\n *   lexer: {\n *     short_tags: true,\n *     asp_tags: true\n *   }\n * });\n *\n * var evalAST = instance.parseEval('some php code');\n * var codeAST = instance.parseCode('<?php some php code', 'foo.php');\n * var tokens = instance.tokenGetAll('<?php some php code');\n *\n * @param {Object} options - List of options\n * @property {Lexer} lexer\n * @property {Parser} parser\n * @property {AST} ast\n * @property {Object} tokens\n */\nconst Engine = function (options) {\n  if (typeof this === \"function\") {\n    return new this(options);\n  }\n  this.tokens = tokens;\n  this.lexer = new lexer(this);\n  this.ast = new AST();\n  this.parser = new parser(this.lexer, this.ast);\n  if (options && typeof options === \"object\") {\n    // disable php7 from lexer if already disabled from parser\n    if (options.parser) {\n      if (!options.lexer) {\n        options.lexer = {};\n      }\n      if (options.parser.version) {\n        if (typeof options.parser.version === \"string\") {\n          let version = options.parser.version.split(\".\");\n          version = parseInt(version[0]) * 100 + parseInt(version[1]);\n          if (isNaN(version)) {\n            throw new Error(\"Bad version number : \" + options.parser.version);\n          } else {\n            options.parser.version = version;\n          }\n        } else if (typeof options.parser.version !== \"number\") {\n          throw new Error(\"Expecting a number for version\");\n        }\n        if (options.parser.version < 500 || options.parser.version > 900) {\n          throw new Error(\"Can only handle versions between 5.x to 8.x\");\n        }\n      }\n    }\n    combine(options, this);\n\n    // same version flags based on parser options\n    this.lexer.version = this.parser.version;\n  }\n};\n\n/**\n * Check if the inpyt is a buffer or a string\n * @private\n * @param  {Buffer|String} buffer Input value that can be either a buffer or a string\n * @return {String}   Returns the string from input\n */\nconst getStringBuffer = function (buffer) {\n  return typeof buffer.write === \"function\" ? buffer.toString() : buffer;\n};\n\n/**\n * Creates a new instance (Helper)\n * @param {Object} options\n * @return {Engine}\n * @private\n */\nEngine.create = function (options) {\n  return new Engine(options);\n};\n\n/**\n * Evaluate the buffer\n * @private\n */\nEngine.parseEval = function (buffer, options) {\n  const self = new Engine(options);\n  return self.parseEval(buffer);\n};\n\n/**\n * Parse an evaluating mode string (no need to open php tags)\n * @param {String} buffer\n * @return {Program}\n */\nEngine.prototype.parseEval = function (buffer) {\n  this.lexer.mode_eval = true;\n  this.lexer.all_tokens = false;\n  buffer = getStringBuffer(buffer);\n  return this.parser.parse(buffer, \"eval\");\n};\n\n/**\n * Static function that parse a php code with open/close tags\n * @private\n */\nEngine.parseCode = function (buffer, filename, options) {\n  if (typeof filename === \"object\" && !options) {\n    // retro-compatibility\n    options = filename;\n    filename = \"unknown\";\n  }\n  const self = new Engine(options);\n  return self.parseCode(buffer, filename);\n};\n\n/**\n * Function that parse a php code with open/close tags\n *\n * Sample code :\n * ```php\n * <?php $x = 1;\n * ```\n *\n * Usage :\n * ```js\n * var parser = require('php-parser');\n * var phpParser = new parser({\n *   // some options\n * });\n * var ast = phpParser.parseCode('...php code...', 'foo.php');\n * ```\n * @param {String} buffer - The code to be parsed\n * @param {String} filename - Filename\n * @return {Program}\n */\nEngine.prototype.parseCode = function (buffer, filename) {\n  this.lexer.mode_eval = false;\n  this.lexer.all_tokens = false;\n  buffer = getStringBuffer(buffer);\n  return this.parser.parse(buffer, filename);\n};\n\n/**\n * Split the buffer into tokens\n * @private\n */\nEngine.tokenGetAll = function (buffer, options) {\n  const self = new Engine(options);\n  return self.tokenGetAll(buffer);\n};\n\n/**\n * Extract tokens from the specified buffer.\n * > Note that the output tokens are *STRICLY* similar to PHP function `token_get_all`\n * @param {string} buffer\n * @return {Array<string|string[]>} - Each item can be a string or an array with following informations [token_name, text, line_number]\n */\nEngine.prototype.tokenGetAll = function (buffer) {\n  this.lexer.mode_eval = false;\n  this.lexer.all_tokens = true;\n  buffer = getStringBuffer(buffer);\n  const EOF = this.lexer.EOF;\n  const names = this.tokens.values;\n  this.lexer.setInput(buffer);\n  let token = this.lexer.lex() || EOF;\n  const result = [];\n  while (token != EOF) {\n    let entry = this.lexer.yytext;\n    if (Object.prototype.hasOwnProperty.call(names, token)) {\n      entry = [names[token], entry, this.lexer.yylloc.first_line];\n    }\n    result.push(entry);\n    token = this.lexer.lex() || EOF;\n  }\n  return result;\n};\n\n/** @module php-parser */\n\n// exports the function\nmodule.exports = Engine;\n\n// makes libraries public\nmodule.exports.tokens = tokens;\nmodule.exports.lexer = lexer;\nmodule.exports.AST = AST;\nmodule.exports.parser = parser;\nmodule.exports.combine = combine;\nmodule.exports.Engine = Engine;\n\n// allow the default export in index.d.ts\nmodule.exports.default = Engine;\n", "// The module 'vscode' contains the VS Code extensibility API\r\n\r\n// Import the module and reference it with the alias vscode in your code below\r\n//const vscode = require('vscode');\r\nimport * as vscode from 'vscode';\r\nimport { Disposable } from \"vscode\";\r\nimport { deleteError_logs } from './deleteError_logs';\r\nimport { runTheFunctionBasedOnShortcut } from './runTheFunctionBasedOnShortcut';\r\n\r\n// this method is called when your extension is activated\r\n// your extension is activated the very first time the command is executed\r\n\r\n/**\r\n * @param {vscode.ExtensionContext} context\r\n */\r\nfunction activate(context: { subscriptions: Disposable[]; }): void {\r\n    const errorLog: Disposable = vscode.commands.registerCommand(\"extension.betterPhpErrorLogger\", (args: string): void => {\r\n        if (args === undefined) {\r\n            args = \"\";\r\n        }\r\n\r\n        runTheFunctionBasedOnShortcut(args);\r\n    });\r\n\r\n    const printWithCallStack: Disposable = vscode.commands.registerCommand(\"extension.betterPhpErrorLogger.printWithCallStack\", (args: string): void => {\r\n        if (args === undefined) {\r\n            args = \"printWithCallStack\";\r\n        }\r\n\r\n        runTheFunctionBasedOnShortcut(args);\r\n    });\r\n\r\n    const varDumpVariable: Disposable = vscode.commands.registerCommand(\"extension.betterPhpErrorLogger.varDumpVariable\", (args: string): void => {\r\n        if (args === undefined) {\r\n            args = \"varDumpVariable\";\r\n        }\r\n\r\n        runTheFunctionBasedOnShortcut(args);\r\n    });\r\n\r\n    const useEchoInstead: Disposable = vscode.commands.registerCommand(\"extension.betterPhpErrorLogger.useEchoInstead\", (args: string): void => {\r\n        if (args === undefined) {\r\n            args = \"useEchoInstead\";\r\n        }\r\n\r\n        runTheFunctionBasedOnShortcut(args);\r\n    });\r\n\r\n    const deleteErrorLogs: Disposable = vscode.commands.registerCommand(\"extension.betterPhpErrorLogger.deleteErrorLogs\", (): void => {\r\n        deleteError_logs();\r\n    });\r\n\r\n    const printCurrentOutputBuffer: Disposable = vscode.commands.registerCommand(\"extension.betterPhpErrorLogger.printCurrentOutputBuffer\", (args: string): void => {\r\n        if (args === undefined) {\r\n            args = \"printCurrentOutputBuffer\";\r\n        }\r\n\r\n        runTheFunctionBasedOnShortcut(args);\r\n    });\r\n\r\n    const printCurrentOutputBufferAndCallStack: Disposable = vscode.commands.registerCommand(\"extension.betterPhpErrorLogger.printCurrentOutputBufferWithCallStack\", (args: string): void => {\r\n        if (args === undefined) {\r\n            args = \"printCurrentOutputBufferWithCallStack\";\r\n        }\r\n\r\n        runTheFunctionBasedOnShortcut(args);\r\n    });\r\n\r\n    const printCurrentOutputBufferVarDump: Disposable = vscode.commands.registerCommand(\"extension.betterPhpErrorLogger.printCurrentOutputBufferVarDump\", (args: string): void => {\r\n        if (args === undefined) {\r\n            args = \"printCurrentOutputBufferVarDump\";\r\n        }\r\n\r\n        runTheFunctionBasedOnShortcut(args);\r\n    });\r\n\r\n    const printCurrentOutputBufferUseEcho: Disposable = vscode.commands.registerCommand(\"extension.betterPhpErrorLogger.printCurrentOutputBufferUseEcho\", (args: string): void => {\r\n\r\n        if (args === undefined) {\r\n            args = \"printCurrentOutputBufferUseEcho\";\r\n        }\r\n\r\n        runTheFunctionBasedOnShortcut(args);\r\n    });\r\n\r\n    context.subscriptions.push(errorLog);\r\n    context.subscriptions.push(printWithCallStack);\r\n    context.subscriptions.push(varDumpVariable);\r\n    context.subscriptions.push(useEchoInstead);\r\n    context.subscriptions.push(deleteErrorLogs);\r\n    context.subscriptions.push(printCurrentOutputBuffer);\r\n    context.subscriptions.push(printCurrentOutputBufferAndCallStack);\r\n    context.subscriptions.push(printCurrentOutputBufferVarDump);\r\n    context.subscriptions.push(printCurrentOutputBufferUseEcho);\r\n\r\n}\r\n\r\nexports.activate = activate;\r\n\r\n// this method is called when your extension is deactivated\r\nfunction deactivate() { }\r\n\r\nmodule.exports = {\r\n    activate,\r\n    deactivate\r\n}\r\n\r\n\r\n", "import * as vscode from 'vscode';\r\nimport { TextEditor } from \"vscode\";\r\n\r\nexport function deleteError_logs() {\r\n\r\n    const configurations = vscode.workspace.getConfiguration('betterPhpErrorLogger');\r\n    // /\\berror_log\\b\\s*\\(.*?(?=;)\\;/g To delete error_logs()\r\n    // /\\bob_start\\b\\s*\\(\\s*\\)\\s*\\;\\s*\\bvar_dump\\b\\s*\\(.*\\s*\\$\\bvar_dump_variable\\b\\s*\\=\\s*\\brtrim\\b\\s*\\(\\s*\\bob_get_clean\\b\\(\\s*\\)\\s*\\)\\s*\\;/g To delete ob_start() and var_dump($var_dump_variable)\r\n    const editor: TextEditor | undefined = vscode.window.activeTextEditor;\r\n\r\n    if (!editor) {\r\n        return;\r\n    }\r\n\r\n    const document = editor.document;\r\n\r\n    //Get all text in editor.\r\n    const text = document.getText();\r\n    let newText = text;\r\n\r\n    if (!text.includes(\"error_log\") &&\r\n        !text.includes(\"var_dump\") &&\r\n        !text.includes(\"echo\") &&\r\n        !text.includes(configurations.defaultVariable.name) &&\r\n        !text.includes(configurations.defaultVariable.value)) {\r\n        vscode.window.showErrorMessage(`Nothing to delete.`);\r\n\r\n        //MessageController.get(this.editor)?.showMessage(loc.rejectReason, position);\r\n        return;\r\n    }\r\n\r\n    if (text.includes(\"error_log\")) {\r\n        newText = newText.replace(/\\r?\\n?\\berror_log\\b\\s*\\(.*?(?=;)\\;\\r?\\n?/g, ``);\r\n    }\r\n\r\n    if (text.includes(\"var_dump\")) {\r\n        newText = newText.replace(/\\r?\\n?\\bob_start\\b\\s*\\(\\s*\\)\\s*\\;\\s*\\bvar_dump\\b\\s*\\(.*\\s*\\$\\bvar_dump_variable\\b\\s*\\=\\s*\\brtrim\\b\\s*\\(\\s*\\bob_get_clean\\b\\(\\s*\\)\\s*\\)\\s*\\;\\n?/g, ``);\r\n        newText = newText.replace(/\\bvar_dump\\b\\s*\\(.*?(?=;)\\;\\r?\\n?/g, ``);\r\n    }\r\n\r\n    // if (text.includes(\"echo\")) {\r\n    //     newText = newText.replace(/\\r?\\n?\\becho\\b\\s*\\(.*\\<\\s*br\\s*>\\*?.*?(?=;);\\r?\\n?/g, ``);\r\n    // }\r\n\r\n    if (text.includes(configurations.defaultVariable.name && configurations.defaultVariable.value)) {\r\n        newText = newText.replace(new RegExp(`\\r?\\n?\\\\${configurations.defaultVariable.name}\\\\s*=\\\\s*${configurations.defaultVariable.value}\\\\s*\\;\\r?\\n?`, 'g'), ``);\r\n    }\r\n\r\n    if (newText === text) {\r\n        vscode.window.showErrorMessage(`Nothing to delete.`);\r\n        return;\r\n    }\r\n\r\n\r\n    //Get postion of last char on last line\r\n    const lastLine = document.lineCount - 1;\r\n    const lastLineLastChar = document.lineAt(lastLine).range.end.character;\r\n\r\n    editor.edit((editBuilder): void => {\r\n        editBuilder.replace(new vscode.Range(0, 0, lastLine, lastLineLastChar), newText);\r\n    });\r\n}\r\n", "import * as vscode from 'vscode';\r\nimport { TextEditor, TextEditorEdit } from \"vscode\";\r\nimport { symbolFinderLoop } from \"./symbolFinderLoop\";\r\nimport { getIndentation } from \"./getIndentation\";\r\nimport { isBalanced } from \"./isBalanced\";\r\nimport { getSelectionType } from './getSelectionType';\r\n\r\n\r\nexport function runTheFunctionBasedOnShortcut(args: string) {\r\n    const editor: TextEditor | undefined = vscode.window.activeTextEditor;\r\n    if (!editor) {\r\n        return;\r\n    }\r\n\r\n    const document = editor.document;\r\n    if (document.languageId !== \"php\") {\r\n        return;\r\n    }\r\n\r\n    const configurations = vscode.workspace.getConfiguration('betterPhpErrorLogger');\r\n\r\n\r\n    //Get all selected text\r\n    //const allSelectedText = editor.selections.map(selection => document.getText(selection));\r\n\r\n    const selection = editor.selection;\r\n    let selectedVar: string = document.getText(selection);\r\n    const selectionType = getSelectionType(document.fileName, selection, selectedVar, document.getText());\r\n\r\n    let selectedVarString = selectedVar.replaceAll(`'`, ``).replaceAll(`\"`, ``);\r\n    let selectedLine = selection.active.line;\r\n    const indentation = getIndentation(editor, document, selectedLine);\r\n\r\n    //Check if the keyboard args are set and and get the opposite of settings if they are set else use settings from configuration\r\n    const useEchoInstead: string = (args === `useEchoInstead` || args === 'printCurrentOutputBufferUseEcho') ? !configurations.useEchoInstead : configurations.useEchoInstead;\r\n    const printWithCallStack: string = (args === `printWithCallStack` || args === 'printCurrentOutputBufferWithCallStack') ? !configurations.printWithCallStack.printWithCallStack : configurations.printWithCallStack.printWithCallStack;\r\n    const varDumpVariable: string = (args === `varDumpVariable` || args === 'printCurrentOutputBufferVarDump') ? !configurations.varDumpVariable : configurations.varDumpVariable;\r\n\r\n    let position = 1;\r\n\r\n    // Change selectedVarString and selectedVar if outputbuffer is being printed.\r\n    const printCurrentOutputBuffer = [\"printCurrentOutputBuffer\", 'printCurrentOutputBufferUseEcho', 'printCurrentOutputBufferWithCallStack', 'printCurrentOutputBufferVarDump'];\r\n    selectedVarString = printCurrentOutputBuffer.includes(args) ? \"Output buffer\" : selectedVarString;\r\n    selectedVar = printCurrentOutputBuffer.includes(args) ? \"ob_get_contents()\" : selectedVar;\r\n    position = printCurrentOutputBuffer.includes(args) ? 0 : position;\r\n\r\n    let errorLogString = `error_log`;\r\n    let newLine = ``;\r\n\r\n\r\n    //Check if the braces in the selected variable are balanced\r\n    if (!isBalanced(selectedVar)) {\r\n        vscode.window.showErrorMessage(`Braces in the selected value are not balanced`);\r\n        return;\r\n    }\r\n    //Check if the selected variable not includes ;\r\n    if (selectedVar.includes(';')) {\r\n        vscode.window.showErrorMessage(`The selected value can not include ;`);\r\n        return;\r\n    }\r\n\r\n\r\n    const selectionTypeToSelectedLine: {\r\n        [key: string]: number;\r\n    } = {\r\n        //If { is not on same line as function call, then move to the line with the {\r\n        //Find first occurence of { after function parameter.\r\n        'function_parameter': symbolFinderLoop(document, selectedLine - 1, '{'),\r\n\r\n        //First occurence of { after the variable, then first occurence of } after.\r\n        'switch_variable': symbolFinderLoop(document, symbolFinderLoop(document, selectedLine - 1, '{') + 2, '}'),\r\n\r\n        //Find first occurence of ; after an assigned variable.\r\n        'assigned_variable': symbolFinderLoop(document, selectedLine, ';'),\r\n    }\r\n\r\n    selectedLine = selectionTypeToSelectedLine[selectionType] || selectedLine;\r\n\r\n\r\n    editor.edit((editBuilder: TextEditorEdit) => {\r\n\r\n        // Check if the selected variable is empty, if so, get the default selected variable\r\n        if (selectedVar.trim().length === 0) {\r\n            selectedVarString = configurations.defaultVariable.name;\r\n            selectedVar = configurations.defaultVariable.value;\r\n            position = 0;\r\n        }\r\n\r\n        let parantheseLeft = `(`;\r\n        let parantheseRight = `)`;\r\n\r\n        if (useEchoInstead) {\r\n            errorLogString = `echo`;\r\n            newLine = ` . \"<br>\"`;\r\n            parantheseLeft = ` `;\r\n            parantheseRight = ``;\r\n        }\r\n\r\n        // let varDumpString = `\\${\"${selectedVar.replaceAll(`'`, ``).replaceAll(`\"`, ``).replaceAll(`$`, `\uD83D\uDCB2`)}\"}`;\r\n\r\n\r\n        let outbutbufferVariable = `$_ob`;\r\n        if (varDumpVariable) {\r\n            let varDumpSelectedVar = `var_dump(${selectedVar})`;\r\n\r\n            if (!useEchoInstead) {\r\n\r\n                let ob_start = `${indentation}ob_start();\\n`;\r\n\r\n                if (printCurrentOutputBuffer.includes(args)) {\r\n                    varDumpSelectedVar = `var_dump(${outbutbufferVariable}=${selectedVar})`;\r\n                    ob_start = ``;\r\n                }\r\n                // let varDumpNewVar = `$var_dump`;\r\n                editBuilder.insert(\r\n                    new vscode.Position(selectedLine + position, 0),\r\n                    `${ob_start}${indentation}${varDumpSelectedVar};\\n`\r\n                    //+\r\n                    // `${indentation}${varDumpNewVar} = rtrim(ob_get_clean()); \\n`\r\n                );\r\n                selectedVar = 'rtrim(ob_get_clean())';\r\n            } else {\r\n                selectedVar = varDumpSelectedVar;\r\n            }\r\n        }\r\n\r\n        configurations.errorLogs.forEach((errorLog: string): void => {\r\n            //selectedVar = selectedVar.replaceAll('$$', '\\$$$$$');\r\n\r\n            errorLog = errorLog.replaceAll(\"${selectedVarString}\", selectedVarString).replaceAll(\"${selectedVar}\", selectedVar);\r\n\r\n            if (varDumpVariable && useEchoInstead) {\r\n\r\n                //Get index of all selecedVAr\r\n                let selectedVarIndexes = [];\r\n                let selectedVarIndex = errorLog.indexOf(selectedVar);\r\n                while (selectedVarIndex !== -1) {\r\n                    selectedVarIndexes.push(selectedVarIndex);\r\n                    selectedVarIndex = errorLog.indexOf(selectedVar, selectedVarIndex + 1);\r\n                }\r\n\r\n                selectedVarIndexes.forEach(selectedVarIndex => {\r\n\r\n                    //Get last period before selectedVar in errorLog\r\n                    let lastPeriod = errorLog.lastIndexOf('.', selectedVarIndex);\r\n\r\n                    // Replace it with a comma if found\r\n                    if (lastPeriod !== -1) {\r\n                        errorLog = `${errorLog.substring(0, lastPeriod)},${errorLog.substring(lastPeriod + 1)}`;\r\n                    }\r\n                })\r\n            }\r\n\r\n            editBuilder.insert(\r\n                new vscode.Position(selectedLine + position, 0),\r\n                `${indentation}${errorLogString}${parantheseLeft}${errorLog}${newLine}${parantheseRight}; \\n`\r\n            );\r\n        });\r\n\r\n        if (printCurrentOutputBuffer.includes(args) && varDumpVariable) {\r\n            editBuilder.insert(\r\n                new vscode.Position(selectedLine + position, 0),\r\n                `echo ${outbutbufferVariable}; \\n`\r\n            );\r\n        }\r\n\r\n\r\n        if (printWithCallStack) {\r\n            let getTrace = `getTrace`;\r\n\r\n            if (!configurations.printWithCallStack.printCallStackAsArray) {\r\n                getTrace += `AsString`;\r\n            }\r\n\r\n            editBuilder.insert(\r\n                new vscode.Position(selectedLine + position, 0),\r\n                `${indentation}${errorLogString}${parantheseLeft} (new \\\\Exception()) -> ${getTrace}()${newLine}${parantheseRight}; \\n`\r\n            );\r\n        }\r\n\r\n    });\r\n}", "import { TextDocument } from \"vscode\";\r\n\r\n\r\nexport function symbolFinderLoop(document: TextDocument, selectedLine: number, symbol: string): number {\r\n    let symbolPosition = selectedLine;\r\n    for (let i = selectedLine; i < document.lineCount; i++) {\r\n        const lineText = document.lineAt(i).text;\r\n        if (lineText.includes(symbol)) {\r\n            symbolPosition = i;\r\n            break;\r\n        }\r\n    }\r\n    return symbolPosition;\r\n}\r\n", "import { TextDocument, TextEditor } from \"vscode\";\r\n\r\n\r\nexport function getIndentation(editor: TextEditor, document: TextDocument, selectedLine: number): string {\r\n    const selectedLineChars = document.lineAt(selectedLine).text.split('');\r\n    let indentLevel = 0;\r\n    let tabs = false;\r\n    let indentation = '';\r\n\r\n    if (selectedLineChars[0] === '\\t') {\r\n        tabs = true;\r\n    }\r\n\r\n    if (tabs) {\r\n        for (const [i, char] of selectedLineChars.entries()) {\r\n            // exit loop if not first index and not the same as previous char\r\n            if (i !== 0 && selectedLineChars[i] !== selectedLineChars[i - 1]) {\r\n                break;\r\n            }\r\n            if (char === \"\\t\") {\r\n                indentLevel++;\r\n            }\r\n        }\r\n\r\n        indentation = '\\t'.repeat(indentLevel);\r\n    } else {\r\n        for (const [i, char] of selectedLineChars.entries()) {\r\n            // exit loop if not first index and not the same as previous char\r\n            if (i !== 0 && selectedLineChars[i] !== selectedLineChars[i - 1]) {\r\n                break;\r\n            }\r\n            if (char === ' ') {\r\n                indentLevel++;\r\n            }\r\n        }\r\n\r\n        indentation = ' '.repeat(indentLevel);\r\n    }\r\n\r\n    return indentation;\r\n}\r\n", "//Check if string braces are balanced\r\n\r\nexport function isBalanced(string: string): boolean {\r\n    let stack: string[] = [];\r\n    let openBraces = [\"(\", \"[\", \"{\"];\r\n    let closeBraces = [\")\", \"]\", \"}\"];\r\n    let braceMap = {\r\n        \"(\": \")\",\r\n        \"[\": \"]\",\r\n        \"{\": \"}\"\r\n    };\r\n\r\n    for (let i = 0; i < string.length; i++) {\r\n        let char = string[i];\r\n        if (openBraces.includes(char)) {\r\n            stack.push(char);\r\n        } else if (closeBraces.includes(char)) {\r\n            let last = stack.pop() as '(' | '[' | '{';\r\n            if (braceMap[last] !== char) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return stack.length === 0;\r\n}\r\n", "import { Selection, TextDocument } from \"vscode\";\r\n// initialize the php parser factory class\r\nimport fs from 'fs';\r\n//import path from 'path';\r\nimport { Engine } from 'php-parser';\r\n\r\nexport const getSelectionType = (file: string, selection: Selection, selectedVarName: string, phpFile: string) => {\r\n    // initialize a new parser instance\r\n    const parser = new Engine({\r\n        // some options :\r\n        parser: {\r\n            extractDoc: true,\r\n            php7: true\r\n        },\r\n        ast: {\r\n            withPositions: true\r\n        }\r\n    });\r\n\r\n    //remove first dollar sign from selected variable name\r\n    selectedVarName = selectedVarName.replace('$', '');\r\n\r\n\r\n    //selectedVar position line start and end\r\n    const selectionStartLine = selection.start.line + 1;\r\n    const selectionStartCharacter = selection.start.character;\r\n    const selectionEndLine = selection.end.line + 1;\r\n    const selectionEndCharacter = selection.end.character;\r\n\r\n\r\n    const correctPosition = (startLine: Number, startColumn: Number, endLine: Number, endColumn: Number) => {\r\n        return (startLine === selectionStartLine && startColumn === selectionStartCharacter && endLine === selectionEndLine && endColumn === selectionEndCharacter);\r\n    }\r\n\r\n    //read currentfile with php-parser\r\n    //const phpFile = fs.readFileSync(file, 'utf8');\r\n    const parsedphpFile = parser.parseCode(phpFile, file);\r\n    let selectionType = ``;\r\n\r\n    //loop through all the children of the parsed php file\r\n    parsedphpFile.children.forEach((child: any) => {\r\n        if (child.kind === `function`) {\r\n            if (child.arguments.length > 0) {\r\n                child.arguments.forEach((argument: any) => {\r\n                    if (argument.name.name === selectedVarName && correctPosition(argument.loc.start.line, argument.loc.start.column, argument.loc.end.line, argument.loc.end.column)) {\r\n                        selectionType = `function_parameter`;\r\n                    }\r\n                });\r\n            }\r\n        } else if (child.kind === `switch`) {\r\n            if (child.test.name === selectedVarName && correctPosition(child.test.loc.start.line, child.test.loc.start.column, child.test.loc.end.line, child.test.loc.end.column)) {\r\n                selectionType = `switch_variable`;\r\n            }\r\n        } else if (child.kind === `expressionstatement`) {\r\n            if (child.expression.kind === `assign`) {\r\n                if (child.expression.left.name === selectedVarName && correctPosition(child.expression.left.loc.start.line, child.expression.left.loc.start.column, child.expression.left.loc.end.line, child.expression.left.loc.end.column)) {\r\n                    selectionType = `assigned_variable`;\r\n                }\r\n            }\r\n        }\r\n        // else if (child.kind === `return`) {\r\n        //     if (correctPosition(child.expr.loc.start.line, child.expr.loc.start.column, child.expr.loc.end.line, child.expr.loc.end.column)) {\r\n        //         selectionType = `return`;\r\n        //     }\r\n        // } else if (child.kind === `foreach`) {\r\n        //     if (correctPosition(child.source.loc.start.line, child.source.loc.start.column, child.source.loc.end.line, child.source.loc.end.column)\r\n        //         || correctPosition(child.key.loc.start.line, child.key.loc.start.column, child.key.loc.end.line, child.key.loc.end.column)\r\n        //         || correctPosition(child.value.loc.start.line, child.value.loc.start.column, child.value.loc.end.line, child.value.loc.end.column)) {\r\n        //         selectionType = `foreach_variable`;\r\n        //     }\r\n        // } else if (child.kind === `if`) {\r\n        //     if (child.test.kind !== `bin`) {\r\n        //         if (correctPosition(child.test.loc.start.line, child.test.loc.start.column, child.test.loc.end.line, child.test.loc.end.column)) {\r\n        //             selectionType = `if_variable`;\r\n        //         }\r\n        //     } else {\r\n        //         //Test all variables in the if statement for correct position.\r\n        //         //If inside test location is found, set selectionType to if_variable\r\n        //         if (child.test.loc.start.line <= selectionStartLine && child.test.loc.end.line >= selectionEndLine) {\r\n        //             selectionType = `if_variable`;\r\n        //         }\r\n\r\n        //     }\r\n\r\n        // }\r\n    });\r\n\r\n    // parsedphpFile.children.forEach((child: any) => {\r\n    //     if (child.loc.start.line <= selectionStartLine && child.loc.end.line >= selectionEndLine) {\r\n    //         console.log(child.kind)\r\n    //     }\r\n    // });\r\n\r\n\r\n\r\n    // //Find if if parameter or foreach parameter, do the same as function parameter\r\n    // //Find if value is after return\r\n    // //Make positioning work on anonymous functions\r\n\r\n    // console.log(parsedphpFile);\r\n    // console.log(selectionType);\r\n\r\n    return selectionType;\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA,mDAAAA,UAAAC,SAAA;AAAA;AAOA,IAAAA,QAAO,UAAU;AAAA,MACf,gBAAgB;AAAA,MAChB,oBAAoB,CAAC;AAAA,MACrB,mBAAmB,WAAY;AAC7B,YAAI,KAAK,KAAK,MAAM;AACpB,YAAI,KAAK,cAAc,GAAG;AACxB,aAAG;AACD,iBAAK,KAAK,MAAM;AAAA,UAClB,SAAS,KAAK,cAAc;AAC5B,eAAK,MAAM,CAAC;AACZ,iBAAO;AAAA,QACT;AACA,gBAAQ,IAAI;AAAA,UACV,KAAK;AACH,gBAAI,KAAK,mBAAmB,KAAK,oBAAoB,GAAG;AACtD,qBAAO,KAAK,mBAAmB,KAAK;AACpC,mBAAK;AACL,mBAAK,SAAS;AAAA,YAChB,OAAO;AAEL,mBAAK,mBAAmB,KAAK;AAAA,YAC/B;AACA,mBAAO;AAAA,UACT,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AACH,mBAAO,KAAK,cAAc;AAAA,UAC5B,KAAK;AACH,iBAAK,mBAAmB,KAAK;AAC7B,mBAAO;AAAA,UACT,KAAK;AACH,mBAAO;AAAA,UACT,KAAK;AACH,mBAAO,KAAK,iBAAiB;AAAA,UAC/B,KAAK;AACH,mBAAO,KAAK,2BAA2B;AAAA,UACzC,KAAK;AACH,gBAAI,KAAK,OAAO,KAAK,YAAY,KAAK;AACpC,qBAAO,KAAK,UAAU;AAAA,YACxB,WAAW,KAAK,OAAO,KAAK,YAAY,KAAK;AAC3C,mBAAK,MAAM;AACX,qBAAO,KAAK,cAAc;AAAA,YAC5B,OAAO;AACL,qBAAO,KAAK,cAAc;AAAA,YAC5B;AAAA,QACJ;AACA,YAAI,KAAK,eAAe,KAAK,OAAO,MAAM;AACxC,iBAAO,KAAK,SAAS,KAAK,MAAM;AAC9B,kBAAMC,MAAK,KAAK,MAAM;AACtB,gBAAI,EAAE,KAAK,SAAS,KAAKA,QAAO,OAAO;AACrC,kBAAIA;AAAI,qBAAK,MAAM,CAAC;AACpB;AAAA,YACF;AAAA,UACF;AACA,iBAAO,KAAK,SAAS;AAAA,QACvB,WAAW,KAAK,OAAO,GAAG;AACxB,iBAAO,KAAK,YAAY;AAAA,QAC1B;AAGA,cAAM,IAAI;AAAA,UACR,0BAA0B,eAAe,KAAK,oBAAoB,KAAK;AAAA,QACzE;AAAA,MACF;AAAA,IACF;AAAA;AAAA;;;ACnFA;AAAA,kDAAAC,UAAAC,SAAA;AAAA;AAOA,IAAAA,QAAO,UAAU;AAAA,MAIf,WAAW,WAAY;AACrB,eAAO,KAAK,SAAS,KAAK,MAAM;AAC9B,gBAAM,KAAK,KAAK,MAAM;AACtB,cAAI,OAAO,QAAQ,OAAO,MAAM;AAC9B,mBAAO,KAAK,IAAI;AAAA,UAClB,WACE,OAAO,OACP,CAAC,KAAK,cACN,KAAK,OAAO,KAAK,YAAY,KAC7B;AACA,iBAAK,MAAM,CAAC;AACZ,mBAAO,KAAK,IAAI;AAAA,UAClB,WACE,OAAO,OACP,KAAK,cACL,KAAK,OAAO,KAAK,YAAY,KAC7B;AACA,iBAAK,MAAM,CAAC;AACZ,mBAAO,KAAK,IAAI;AAAA,UAClB;AAAA,QACF;AACA,eAAO,KAAK,IAAI;AAAA,MAClB;AAAA,MAIA,eAAe,WAAY;AACzB,YAAI,KAAK,KAAK,MAAM;AACpB,YAAI,QAAQ,KAAK,IAAI;AACrB,YAAI,OAAO,KAAK;AAEd,eAAK,KAAK,MAAM;AAChB,cAAI,KAAK,cAAc,GAAG;AAExB,oBAAQ,KAAK,IAAI;AAAA,UACnB;AACA,cAAI,OAAO,KAAK;AACd,mBAAO;AAAA,UACT,OAAO;AACL,iBAAK,MAAM,CAAC;AAAA,UACd;AAAA,QACF;AACA,eAAO,KAAK,SAAS,KAAK,MAAM;AAC9B,eAAK,KAAK,MAAM;AAChB,cAAI,OAAO,OAAO,KAAK,OAAO,KAAK,YAAY,KAAK;AAClD,iBAAK,MAAM;AACX;AAAA,UACF;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAAA,IACF;AAAA;AAAA;;;AC9DA;AAAA,iDAAAC,UAAAC,SAAA;AAAA;AAOA,IAAAA,QAAO,UAAU;AAAA,MACf,aAAa,WAAY;AACvB,YACE,KAAK,eAAe,SAAS,KAC7B,KAAK,eAAe,KAAK,eAAe,SAAS,OAAO,WACxD;AAEA,eAAK,SAAS;AAAA,QAChB,OAAO;AACL,eAAK,MAAM,iBAAiB;AAAA,QAC9B;AACA,eAAO;AAAA,MACT;AAAA,MACA,cAAc,WAAY;AACxB,eAAO,KAAK,SAAS,KAAK,MAAM;AAC9B,cAAI,KAAK,KAAK,MAAM;AACpB,cAAI,MAAM,KAAK;AACb,iBAAK,KAAK,MAAM,CAAC;AACjB,gBAAI,MAAM,KAAK;AACb,kBAAI,KAAK,SAAS,IAAI,GAAG;AACvB,qBAAK,MAAM,CAAC,EACT,YAAY,KAAK,IAAI,sBAAsB,CAAC,EAC5C,YAAY;AACf;AAAA,cACF,WAAW,KAAK,iBAAiB,MAAM,GAAG;AACxC,qBAAK,KAAK,OAAO,KAAK,SAAS;AAC/B,oBAAI,OAAO,OAAO,OAAO,OAAQ,OAAO,QAAQ,OAAO,MAAM;AAC3D,uBAAK,MAAM,CAAC,EAAE,YAAY,KAAK,IAAI,YAAY,CAAC,EAAE,YAAY;AAC9D;AAAA,gBACF;AAAA,cACF;AACA,kBAAI,KAAK,YAAY;AACnB,qBAAK,MAAM,CAAC,EAAE,YAAY,KAAK,IAAI,YAAY,CAAC,EAAE,YAAY;AAC9D;AAAA,cACF;AAAA,YACF,WAAW,KAAK,YAAY,MAAM,KAAK;AACrC,kBAAI,KAAK,SAAS,IAAI,GAAG;AACvB,qBAAK,aAAa;AAClB,qBAAK,MAAM,CAAC,EACT,YAAY,KAAK,IAAI,sBAAsB,CAAC,EAC5C,YAAY;AACf;AAAA,cACF,OAAO;AACL,qBAAK,aAAa;AAClB,qBAAK,MAAM,CAAC,EAAE,YAAY,KAAK,IAAI,YAAY,CAAC,EAAE,YAAY;AAC9D;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,QACF;AACA,YAAI,KAAK,OAAO,SAAS,GAAG;AAC1B,iBAAO,KAAK,IAAI;AAAA,QAClB,OAAO;AACL,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AAAA;AAAA;;;AC/DA;AAAA,iDAAAC,UAAAC,SAAA;AAAA;AAQA,QAAI,qBAAqB;AACzB,QAAI,kBAAkB;AACtB,QAAI,QAAQ,QAAQ,OAAO;AACzB,2BAAqB;AACrB,wBAAkB;AAAA,IACpB;AAEA,IAAAA,QAAO,UAAU;AAAA,MACf,aAAa,WAAY;AACvB,YAAI,KAAK,KAAK,OAAO;AACrB,YAAI,WAAW,OAAO;AACtB,YAAI,OAAO,KAAK;AACd,eAAK,KAAK,MAAM;AAEhB,cAAI,OAAO,OAAO,OAAO,KAAK;AAC5B,iBAAK,KAAK,MAAM;AAChB,gBAAI,OAAO,OAAO,KAAK,OAAO,GAAG;AAC/B,qBAAO,KAAK,aAAa;AAAA,YAC3B,OAAO;AACL,mBAAK,MAAM,KAAK,IAAI,CAAC;AAAA,YACvB;AAAA,UAEF,WAAW,OAAO,OAAO,OAAO,KAAK;AACnC,iBAAK,KAAK,MAAM;AAChB,gBAAK,OAAO,OAAO,OAAO,OAAQ,OAAO,KAAK;AAC5C,qBAAO,KAAK,aAAa;AAAA,YAC3B,OAAO;AACL,mBAAK,MAAM,KAAK,IAAI,CAAC;AAAA,YACvB;AAAA,UACF,WAAW,OAAO,OAAO,OAAO,KAAK;AACnC,iBAAK,KAAK,MAAM;AAChB,gBAAI,OAAO,OAAO,KAAK,SAAS,GAAG;AACjC,qBAAO,KAAK,aAAa;AAAA,YAC3B,OAAO;AACL,mBAAK,MAAM,KAAK,IAAI,CAAC;AAAA,YACvB;AAAA,UACF,WAAW,CAAC,KAAK,OAAO,GAAG;AACzB,gBAAI;AAAI,mBAAK,MAAM,CAAC;AAAA,UACtB;AAAA,QACF;AAEA,eAAO,KAAK,SAAS,KAAK,MAAM;AAC9B,gBAAM,OAAO;AACb,eAAK,KAAK,MAAM;AAEhB,cAAI,OAAO,KAAK;AACd,gBAAI,SAAS,KAAK;AAEhB,mBAAK,MAAM,CAAC;AACZ;AAAA,YACF;AACA,gBAAI,SAAS,KAAK;AAEhB,mBAAK,MAAM,CAAC;AACZ;AAAA,YACF;AACA,gBAAI,SAAS,OAAO,SAAS,KAAK;AAEhC,mBAAK,MAAM,CAAC;AACZ;AAAA,YACF;AAAA,UACF,WAAW,OAAO,KAAK;AACrB,gBAAI,UAAU;AAEZ,mBAAK,MAAM,CAAC;AACZ;AAAA,YACF;AACA,gBAAI,SAAS,KAAK;AAEhB,mBAAK,MAAM,CAAC;AACZ;AAAA,YACF;AACA,uBAAW;AACX;AAAA,UACF,WAAW,OAAO,OAAO,OAAO,KAAK;AACnC,gBAAI,SAAS,KAAK;AAEhB,mBAAK,MAAM,CAAC;AACZ;AAAA,YACF;AACA,gBAAI,OAAO;AACX,iBAAK,KAAK,MAAM;AAChB,gBAAI,OAAO,OAAO,OAAO,KAAK;AAE5B,qBAAO;AACP,mBAAK,KAAK,MAAM;AAAA,YAClB;AACA,gBAAI,KAAK,aAAa,GAAG;AACvB,mBAAK,aAAa;AAClB,qBAAO,KAAK,IAAI;AAAA,YAClB;AACA,iBAAK,MAAM,KAAK,OAAO,OAAO,CAAC;AAC/B;AAAA,UACF;AAEA,cAAI,CAAC,KAAK,OAAO,GAAG;AAElB,gBAAI;AAAI,mBAAK,MAAM,CAAC;AACpB;AAAA,UACF;AAAA,QACF;AAEA,YAAI,UAAU;AACZ,iBAAO,KAAK,IAAI;AAAA,QAClB,WAAW,KAAK,OAAO,SAAS,qBAAqB,GAAG;AACtD,iBAAO,KAAK,IAAI;AAAA,QAClB,OAAO;AACL,cACE,KAAK,OAAO,SAAS,sBACpB,KAAK,OAAO,UAAU,sBACrB,KAAK,SAAS,iBAChB;AACA,mBAAO,KAAK,IAAI;AAAA,UAClB;AACA,iBAAO,KAAK,IAAI;AAAA,QAClB;AAAA,MACF;AAAA,MAEA,cAAc,WAAY;AACxB,eAAO,KAAK,SAAS,KAAK,MAAM;AAC9B,gBAAM,KAAK,KAAK,MAAM;AACtB,cAAI,CAAC,KAAK,OAAO,GAAG;AAClB,gBAAI;AAAI,mBAAK,MAAM,CAAC;AACpB;AAAA,UACF;AAAA,QACF;AACA,eAAO,KAAK,IAAI;AAAA,MAClB;AAAA,MAEA,cAAc,WAAY;AACxB,eAAO,KAAK,SAAS,KAAK,MAAM;AAC9B,gBAAM,KAAK,KAAK,MAAM;AACtB,cAAI,CAAC,KAAK,OAAO,GAAG;AAClB,gBAAI;AAAI,mBAAK,MAAM,CAAC;AACpB;AAAA,UACF;AAAA,QACF;AACA,eAAO,KAAK,IAAI;AAAA,MAClB;AAAA,MAEA,cAAc,WAAY;AACxB,YAAI;AACJ,eAAO,KAAK,SAAS,KAAK,MAAM;AAC9B,eAAK,KAAK,MAAM;AAChB,cAAI,OAAO,OAAO,OAAO,OAAO,OAAO,KAAK;AAC1C,gBAAI;AAAI,mBAAK,MAAM,CAAC;AACpB;AAAA,UACF;AAAA,QACF;AACA,eAAO,KAAK,IAAI;AAAA,MAClB;AAAA,MAEA,cAAc,WAAY;AACxB,eAAO,KAAK,SAAS,KAAK,MAAM;AAC9B,gBAAM,KAAK,KAAK,MAAM;AACtB,cAAI,CAAC,KAAK,SAAS,GAAG;AACpB,gBAAI;AAAI,mBAAK,MAAM,CAAC;AACpB;AAAA,UACF;AAAA,QACF;AACA,eAAO,KAAK,IAAI;AAAA,MAClB;AAAA,IACF;AAAA;AAAA;;;AC1KA;AAAA,kDAAAC,UAAAC,SAAA;AAAA;AAOA,IAAAA,QAAO,UAAU;AAAA,MACf,8BAA8B,WAAY;AACxC,YAAI,KAAK,KAAK,MAAM;AACpB,YAAI,OAAO,KAAK;AACd,eAAK,KAAK,MAAM;AAChB,cAAI,OAAO,KAAK;AAEd,mBAAO,KAAK,IAAI;AAAA,UAClB;AACA,cAAI;AAAI,iBAAK,MAAM,CAAC;AAAA,QACtB,WAAW,KAAK,cAAc,GAAG;AAC/B,iBAAO,KAAK,IAAI;AAAA,QAClB,WAAW,KAAK,eAAe,GAAG;AAEhC,eAAK,cAAc;AACnB,eAAK,SAAS;AACd,iBAAO,KAAK,IAAI;AAAA,QAClB;AAEA,aAAK,SAAS;AACd,YAAI;AAAI,eAAK,MAAM,CAAC;AACpB,eAAO;AAAA,MACT;AAAA,MACA,6BAA6B,WAAY;AACvC,YAAI,KAAK,KAAK,MAAM;AAGpB,aAAK,SAAS;AACd,aAAK,MAAM,iBAAiB;AAE5B,YAAI,KAAK,eAAe,GAAG;AACzB,eAAK,cAAc;AACnB,eAAK,KAAK,MAAM;AAChB,cAAI,OAAO,OAAO,OAAO,KAAK;AAC5B,iBAAK,MAAM,CAAC;AACZ,mBAAO,KAAK,IAAI;AAAA,UAClB,OAAO;AAEL,iBAAK,MAAM,KAAK,OAAO,MAAM;AAAA,UAC/B;AAAA,QACF,OAAO;AAEL,cAAI;AAAI,iBAAK,MAAM,CAAC;AAAA,QACtB;AAEA,eAAO;AAAA,MACT;AAAA,MACA,oBAAoB,WAAY;AAC9B,cAAM,KAAK,KAAK,MAAM;AACtB,YAAI,KAAK,aAAa,GAAG;AACvB,eAAK,YAAY;AACjB,iBAAO,KAAK,IAAI;AAAA,QAClB,WAAW,OAAO,KAAK;AACrB,eAAK,SAAS;AACd,iBAAO;AAAA,QACT,WAAW,OAAO,KAAK;AACrB,eAAK,MAAM;AACX,cAAI,KAAK,eAAe,GAAG;AACzB,iBAAK,cAAc;AACnB,mBAAO,KAAK,IAAI;AAAA,UAClB,OAAO;AAEL,kBAAM,IAAI,MAAM,qBAAqB;AAAA,UACvC;AAAA,QACF,WAAW,KAAK,eAAe,GAAG;AAChC,eAAK,cAAc;AACnB,iBAAO,KAAK,IAAI;AAAA,QAClB,WACE,KAAK,cAAc,KACnB,OAAO,QACP,OAAO,OACP,OAAO,KACP;AACA,iBAAO,KAAK,IAAI;AAAA,QAClB,WACE,OAAO,OACP,OAAO,OACP,OAAO,OACP,OAAO,OACP,OAAO,OACP,KAAK,SAAS,GACd;AACA,iBAAO;AAAA,QACT,OAAO;AAEL,gBAAM,IAAI,MAAM,qBAAqB;AAAA,QACvC;AAAA,MACF;AAAA,IACF;AAAA;AAAA;;;AC/FA;AAAA,mDAAAC,UAAAC,SAAA;AAAA;AAOA,IAAAA,QAAO,UAAU;AAAA,MACf,sBAAsB,WAAY;AAChC,YAAI,KAAK,KAAK,MAAM;AACpB,gBAAQ,IAAI;AAAA,UACV,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AACH,mBAAO,KAAK,aAAa;AAAA,UAC3B,KAAK;AACH,gBAAI,KAAK,WAAW,OAAO,KAAK,OAAO,KAAK,YAAY,KAAK;AAC3D,mBAAK,MAAM;AACX,mBAAK,mBAAmB,EAAE,KAAK,kBAAkB;AACjD,mBAAK,MAAM,cAAc;AACzB,qBAAO,KAAK,IAAI;AAAA,YAClB;AACA,mBAAO,KAAK,UAAU;AAAA,UACxB,KAAK;AACH,gBAAI,KAAK,OAAO,KAAK,YAAY,KAAK;AACpC,qBAAO,KAAK,UAAU;AAAA,YACxB,WAAW,KAAK,OAAO,KAAK,YAAY,KAAK;AAC3C,mBAAK,MAAM;AACX,qBAAO,KAAK,cAAc;AAAA,YAC5B;AACA,mBAAO,KAAK,cAAc;AAAA,UAC5B,KAAK;AACH,mBAAO,KAAK,2BAA2B;AAAA,UACzC,KAAK;AACH,mBAAO,KAAK,iBAAiB;AAAA,UAC/B,KAAK;AACH,iBAAK,MAAM,cAAc;AACzB,mBAAO;AAAA,UACT,KAAK;AACH,gBAAI,CAAC,KAAK,cAAc,KAAK,SAAS,GAAG,GAAG;AAC1C,mBAAK,MAAM;AACX,oBAAM,SAAS,KAAK,OAAO,KAAK;AAChC,kBAAI,WAAW,QAAQ,WAAW;AAAM,qBAAK,MAAM;AACnD,kBAAI,KAAK,eAAe,SAAS,GAAG;AAClC,qBAAK,MAAM,SAAS;AAAA,cACtB;AACA,qBAAO,KAAK,IAAI;AAAA,YAClB;AACA,mBAAO,KAAK,cAAc;AAAA,UAC5B,KAAK;AACH,gBAAI,KAAK,cAAc,KAAK,OAAO,KAAK,YAAY,KAAK;AACvD,mBAAK,MAAM;AACX,mBAAK,KAAK,OAAO,KAAK;AACtB,kBAAI,OAAO,QAAQ,OAAO,MAAM;AAC9B,qBAAK,MAAM;AAAA,cACb;AACA,mBAAK,aAAa;AAClB,kBAAI,KAAK,eAAe,SAAS,GAAG;AAClC,qBAAK,MAAM,SAAS;AAAA,cACtB;AACA,qBAAO,KAAK,IAAI;AAAA,YAClB;AACA,mBAAO,KAAK,cAAc;AAAA,UAC5B,KAAK;AACH,iBAAK,MAAM,iBAAiB;AAC5B,mBAAO;AAAA,UACT,KAAK;AACH,gBAAI,KAAK,eAAe,SAAS,GAAG;AAElC,mBAAK,SAAS;AAAA,YAChB;AACA,mBAAO;AAAA,UACT;AACE,gBAAI,OAAO,KAAK;AACd,mBAAK,KAAK,MAAM;AAChB,kBAAI,KAAK,aAAa,GAAG;AACvB,uBAAO,KAAK,YAAY;AAAA,cAC1B,OAAO;AACL,oBAAI;AAAI,uBAAK,MAAM,CAAC;AAAA,cACtB;AAAA,YACF;AACA,gBAAI,KAAK,aAAa,GAAG;AACvB,qBAAO,KAAK,YAAY;AAAA,YAC1B,WAAW,KAAK,eAAe,GAAG;AAChC,qBAAO,KAAK,cAAc,EAAE,SAAS;AAAA,YACvC,WAAW,KAAK,SAAS,GAAG;AAC1B,qBAAO,KAAK,cAAc;AAAA,YAC5B;AAAA,QACJ;AACA,cAAM,IAAI;AAAA,UACR,4BACE,KACA,eACA,KAAK,WACL,cACA,KAAK,SACL;AAAA,QACJ;AAAA,MACF;AAAA,MAEA,cAAc,WAAY;AACxB,eAAO,KAAK,SAAS,KAAK,MAAM;AAC9B,gBAAM,KAAK,KAAK,MAAM;AACtB,cAAI,OAAO,OAAO,OAAO,OAAQ,OAAO,QAAQ,OAAO,MAAM;AAC3D;AAAA,UACF;AACA,cAAI;AAAI,iBAAK,MAAM,CAAC;AACpB;AAAA,QACF;AACA,eAAO,KAAK,IAAI;AAAA,MAClB;AAAA,IACF;AAAA;AAAA;;;ACjHA;AAAA,iDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,UAAU,CAAC,MAAM,IAAI;AAC3B,QAAM,sBAAsB,CAAC,MAAM,MAAM,GAAG;AAC5C,QAAM,yBAAyB,oBAAoB,OAAO;AAAA,MACxD;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAED,IAAAA,QAAO,UAAU;AAAA,MACf,4BAA4B,WAAY;AACtC,YAAI;AACJ,eAAO,KAAK,SAAS,KAAK,MAAM;AAC9B,eAAK,KAAK,MAAM;AAChB,cAAI,MAAM,MAAM;AACd,iBAAK,MAAM;AAAA,UACb,WAAW,MAAM,KAAK;AACpB;AAAA,UACF;AAAA,QACF;AACA,eAAO,KAAK,IAAI;AAAA,MAClB;AAAA,MAEA,YAAY,WAAY;AACtB,cAAM,SAAS,KAAK;AACpB,YACE,KAAK,OAAO,KAAK,SAAS,OAAO,OACjC,KAAK,OAAO,KAAK,YAAY,OAC7B,KAAK,OAAO,KAAK,SAAS,OAAO,KACjC;AACA,eAAK,UAAU;AAGf,cAAI,KAAK,YAAY,GAAG;AACtB,mBAAO,KAAK,SAAS,KAAK,MAAM;AAC9B,mBAAK;AACL,kBAAI,CAAC,KAAK,YAAY,GAAG;AACvB;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAGA,cAAI,QAAQ,KAAK,OAAO,KAAK,SAAS;AACtC,cAAI,UAAU,OAAO,UAAU,KAAK;AAClC,iBAAK;AAAA,UACP,OAAO;AACL,oBAAQ;AAAA,UACV;AAGA,cAAI,KAAK,eAAe,GAAG;AACzB,gBAAI,WAAW,KAAK,SAAS;AAC7B,mBAAO,KAAK,SAAS,KAAK,MAAM;AAC9B,mBAAK;AACL,kBAAI,CAAC,KAAK,SAAS,GAAG;AACpB;AAAA,cACF;AAAA,YACF;AACA,kBAAM,UAAU,KAAK,OAAO,UAAU,UAAU,KAAK,SAAS,CAAC;AAC/D,gBAAI,CAAC,SAAS,UAAU,KAAK,OAAO,KAAK,SAAS,IAAI;AAEpD,kBAAI;AAAO,qBAAK;AAEhB,kBAAI,QAAQ,SAAS,KAAK,OAAO,KAAK,SAAS,EAAE,GAAG;AAElD,qBAAK,cAAc,QAAQ;AAC3B,qBAAK,cAAc,SAAS,QAAQ;AACpC,qBAAK,cAAc,WAAW;AAC9B,2BAAW,KAAK,SAAS;AACzB,qBAAK,SAAS;AACd,qBAAK,QAAQ,QAAQ;AACrB,oBAAI,UAAU,KAAK;AACjB,uBAAK,MAAM,WAAW;AAAA,gBACxB,OAAO;AACL,uBAAK,MAAM,YAAY;AAAA,gBACzB;AAEA,qBAAK,kBAAkB;AACvB,uBAAO,KAAK,IAAI;AAAA,cAClB;AAAA,YACF;AAAA,UACF;AAAA,QACF;AACA,aAAK,SAAS;AACd,eAAO;AAAA,MACT;AAAA,MACA,kBAAkB,WAAY;AAC5B,YAAI;AACJ,eAAO,KAAK,SAAS,KAAK,MAAM;AAC9B,eAAK,KAAK,MAAM;AAChB,cAAI,MAAM,MAAM;AACd,iBAAK,MAAM;AAAA,UACb,WAAW,MAAM,KAAK;AACpB;AAAA,UACF,WAAW,MAAM,KAAK;AACpB,iBAAK,KAAK,MAAM;AAChB,gBAAI,MAAM,OAAO,KAAK,eAAe,GAAG;AACtC,mBAAK,MAAM,CAAC;AACZ;AAAA,YACF;AACA,gBAAI;AAAI,mBAAK,MAAM,CAAC;AAAA,UACtB,WAAW,MAAM,KAAK;AACpB,iBAAK,KAAK,MAAM;AAChB,gBAAI,MAAM,KAAK;AACb,mBAAK,MAAM,CAAC;AACZ;AAAA,YACF;AACA,gBAAI;AAAI,mBAAK,MAAM,CAAC;AAAA,UACtB;AAAA,QACF;AACA,YAAI,MAAM,KAAK;AACb,iBAAO,KAAK,IAAI;AAAA,QAClB,OAAO;AACL,cAAI,SAAS;AACb,cAAI,KAAK,OAAO,OAAO,OAAO,KAAK,OAAO,OAAO,KAAK;AACpD,qBAAS;AAAA,UACX;AACA,cAAI,KAAK,OAAO,SAAS,GAAG;AAC1B,iBAAK;AAAA,cACH,KAAK,IAAI;AAAA,cACT,KAAK,OAAO,SAAS;AAAA,YACvB;AAAA,UACF;AACA,eAAK,MAAM,KAAK,OAAO,SAAS,MAAM;AACtC,eAAK,MAAM,kBAAkB;AAC7B,iBAAO,KAAK;AAAA,QACd;AAAA,MACF;AAAA,MAGA,aAAa,SAAU,QAAQ,sBAAsB;AAMnD,cAAM,UAAU,KAAK,OAAO,SAAS;AACrC,YAAI,CAAC,QAAQ,SAAS,OAAO,GAAG;AAC9B,iBAAO;AAAA,QACT;AAGA,YAAI,0BAA0B;AAC9B,YAAI,wBAAwB;AAE5B,YAAI,cAAc;AAClB,YAAI,aAAa,KAAK,OAAO,SAAS;AAEtC,YAAI,KAAK,WAAW,KAAK;AACvB,iBAAO,eAAe,OAAQ,eAAe,KAAK;AAChD,gBAAI,eAAe,KAAK;AACtB,wCAA0B;AAAA,YAC5B,WAAW,eAAe,KAAM;AAC9B,sCAAwB;AAAA,YAC1B;AAEA,yBAAa,KAAK,OAAO,SAAS;AAClC;AAAA,UACF;AAGA,mBAAS,SAAS;AAGlB,cAAI,QAAQ,SAAS,KAAK,OAAO,SAAS,EAAE,GAAG;AAC7C,mBAAO;AAAA,UACT;AAAA,QACF;AAEA,YACE,KAAK,OAAO;AAAA,UACV,SAAS;AAAA,UACT,SAAS,IAAI,KAAK,cAAc;AAAA,QAClC,MAAM,KAAK,cAAc,OACzB;AACA,gBAAM,KAAK,KAAK,OAAO,SAAS,IAAI,KAAK,cAAc;AACvD,eACG,KAAK,WAAW,MACb,yBACA,qBACF,SAAS,EAAE,GACb;AACA,gBAAI,sBAAsB;AACxB,mBAAK,QAAQ,WAAW;AAExB,kBAAI,2BAA2B,uBAAuB;AACpD,sBAAM,IAAI;AAAA,kBACR,mEACE,KAAK,WACL,cACA,KAAK,SACL;AAAA,gBACJ;AAAA,cACF;AAAA,YACF,OAAO;AAEL,mBAAK,cAAc,cAAc;AACjC,mBAAK,cAAc,0BAA0B;AAC7C,mBAAK,cAAc,oBAAoB;AAAA,YACzC;AACA,mBAAO;AAAA,UACT;AAAA,QACF;AAEA,eAAO;AAAA,MACT;AAAA,MAMA,mBAAmB,WAAY;AAE7B,aAAK,cAAc,0BAA0B;AAC7C,aAAK,cAAc,cAAc;AACjC,aAAK,cAAc,oBAAoB;AACvC,YAAI,SAAS,KAAK,SAAS;AAE3B,eAAO,SAAS,KAAK,OAAO,QAAQ;AAElC,cAAI,KAAK,YAAY,QAAQ,KAAK,GAAG;AACnC;AAAA,UACF;AAEA,cAAI,CAAC,QAAQ,SAAS,KAAK,OAAO,SAAS,EAAE,GAAG;AAE9C,mBACE,CAAC,QAAQ,SAAS,KAAK,OAAO,SAAS,KACvC,SAAS,KAAK,OAAO,QACrB;AAAA,YAEF;AAAA,UACF;AAEA;AAAA,QACF;AAAA,MACF;AAAA,MAEA,gBAAgB,WAAY;AAE1B,YAAI,KAAK,YAAY,KAAK,QAAQ,IAAI,GAAG;AAEvC,eAAK,QAAQ,KAAK,cAAc,MAAM;AACtC,eAAK,SAAS;AACd,iBAAO,KAAK,IAAI;AAAA,QAClB;AAEA,YAAI,KAAK,KAAK,OAAO,KAAK,SAAS;AACnC,eAAO,KAAK,SAAS,KAAK,MAAM;AAC9B,cAAI,QAAQ,SAAS,EAAE,GAAG;AACxB,iBAAK,KAAK,MAAM;AAChB,gBAAI,KAAK,YAAY,KAAK,QAAQ,IAAI,GAAG;AACvC,mBAAK,MAAM,CAAC,EAAE,SAAS;AACvB,mBAAK,YAAY,KAAK,IAAI,eAAe,KAAK,cAAc,MAAM;AAClE,qBAAO,KAAK,IAAI;AAAA,YAClB;AAAA,UACF,OAAO;AACL,iBAAK,KAAK,MAAM;AAAA,UAClB;AAAA,QACF;AAEA,eAAO,KAAK,IAAI;AAAA,MAClB;AAAA,MAEA,iBAAiB,WAAY;AAE3B,YAAI,KAAK,KAAK,MAAM;AACpB,YAAI,KAAK,YAAY,KAAK,QAAQ,IAAI,GAAG;AACvC,eAAK,QAAQ,KAAK,cAAc,SAAS,CAAC;AAC1C,eAAK,SAAS;AACd,iBAAO,KAAK,IAAI;AAAA,QAClB;AAEA,eAAO,KAAK,SAAS,KAAK,MAAM;AAC9B,cAAI,OAAO,MAAM;AACf,iBAAK,KAAK,MAAM;AAChB,gBAAI,CAAC,QAAQ,SAAS,EAAE,GAAG;AACzB,mBAAK,KAAK,MAAM;AAAA,YAClB;AAAA,UACF;AAEA,cAAI,QAAQ,SAAS,EAAE,GAAG;AACxB,iBAAK,KAAK,MAAM;AAChB,gBAAI,KAAK,YAAY,KAAK,QAAQ,IAAI,GAAG;AACvC,mBAAK,MAAM,CAAC,EAAE,SAAS;AACvB,mBAAK,YAAY,KAAK,IAAI,eAAe,KAAK,cAAc,MAAM;AAClE,qBAAO,KAAK,IAAI;AAAA,YAClB;AAAA,UACF,WAAW,OAAO,KAAK;AACrB,iBAAK,KAAK,MAAM;AAChB,gBAAI,OAAO,KAAK;AAEd,mBAAK,MAAM,wBAAwB;AACnC,kBAAI,KAAK,OAAO,SAAS,GAAG;AAC1B,qBAAK,YAAY,KAAK,IAAI,4BAA4B,CAAC;AACvD,qBAAK,MAAM,CAAC;AACZ,uBAAO,KAAK,IAAI;AAAA,cAClB,OAAO;AACL,uBAAO,KAAK,IAAI;AAAA,cAClB;AAAA,YACF,WAAW,KAAK,eAAe,GAAG;AAEhC,oBAAM,WAAW,KAAK;AACtB,oBAAM,OAAO,KAAK,iBAAiB;AACnC,kBAAI,KAAK,OAAO,SAAS,KAAK,SAAS,WAAW,GAAG;AACnD,qBAAK,YAAY,MAAM,KAAK,SAAS,WAAW,CAAC;AACjD,qBAAK,MAAM,KAAK,SAAS,WAAW,CAAC;AACrC,uBAAO,KAAK,IAAI;AAAA,cAClB,OAAO;AACL,uBAAO;AAAA,cACT;AAAA,YAEF;AAAA,UACF,WAAW,OAAO,KAAK;AACrB,iBAAK,KAAK,MAAM;AAChB,gBAAI,OAAO,KAAK;AAEd,mBAAK,MAAM,iBAAiB;AAC5B,kBAAI,KAAK,OAAO,SAAS,GAAG;AAC1B,qBAAK,YAAY,KAAK,IAAI,cAAc,CAAC;AACzC,qBAAK,MAAM,CAAC;AACZ,uBAAO,KAAK,IAAI;AAAA,cAClB,OAAO;AACL,qBAAK,MAAM,CAAC;AACZ,uBAAO,KAAK,IAAI;AAAA,cAClB;AAAA,YACF;AAAA,UACF,OAAO;AACL,iBAAK,KAAK,MAAM;AAAA,UAClB;AAAA,QACF;AAGA,eAAO,KAAK,IAAI;AAAA,MAClB;AAAA,MAEA,kBAAkB,WAAY;AAC5B,aAAK,cAAc;AACnB,cAAM,KAAK,KAAK,MAAM;AACtB,YAAI,MAAM,KAAK;AACb,eAAK,MAAM,CAAC;AACZ,eAAK,MAAM,eAAe;AAC1B,iBAAO,KAAK,IAAI;AAAA,QAClB,WAAW,OAAO,KAAK;AACrB,cAAI,KAAK,MAAM,MAAM,KAAK;AACxB,iBAAK,MAAM;AACX,gBAAI,KAAK,eAAe,GAAG;AACzB,mBAAK,MAAM,yBAAyB;AAAA,YACtC;AACA,iBAAK,MAAM,CAAC;AACZ,mBAAO,KAAK,IAAI;AAAA,UAClB,OAAO;AACL,iBAAK,MAAM,CAAC;AAAA,UACd;AAAA,QACF,OAAO;AACL,cAAI;AAAI,iBAAK,MAAM,CAAC;AAAA,QACtB;AACA,eAAO,KAAK,IAAI;AAAA,MAClB;AAAA,MAEA,mBAAmB,WAAY;AAC7B,YAAI,KAAK,KAAK,MAAM;AACpB,YAAI,OAAO,KAAK;AACd,eAAK,KAAK,MAAM;AAChB,cAAI,OAAO,KAAK;AACd,iBAAK,MAAM,wBAAwB;AACnC,mBAAO,KAAK,IAAI;AAAA,UAClB,WAAW,KAAK,eAAe,GAAG;AAChC,kBAAM,MAAM,KAAK,iBAAiB;AAClC,mBAAO;AAAA,UACT;AAAA,QACF,WAAW,OAAO,KAAK;AACrB,cAAI,KAAK,OAAO,KAAK,YAAY,KAAK;AACpC,iBAAK,MAAM,iBAAiB;AAC5B,mBAAO,KAAK,IAAI;AAAA,UAClB;AAAA,QACF,WAAW,OAAO,KAAK;AACrB,eAAK,SAAS;AACd,iBAAO;AAAA,QACT;AAGA,eAAO,KAAK,SAAS,KAAK,MAAM;AAC9B,cAAI,OAAO,MAAM;AACf,iBAAK,MAAM;AAAA,UACb,WAAW,OAAO,KAAK;AACrB,iBAAK,MAAM,CAAC;AACZ,iBAAK,SAAS;AACd,iBAAK,YAAY,KAAK,CAAC;AACvB;AAAA,UACF,WAAW,OAAO,KAAK;AACrB,iBAAK,KAAK,MAAM;AAChB,gBAAI,OAAO,KAAK;AACd,mBAAK,MAAM,wBAAwB;AACnC,kBAAI,KAAK,OAAO,SAAS,GAAG;AAC1B,qBAAK,YAAY,KAAK,IAAI,4BAA4B,CAAC;AACvD,qBAAK,MAAM,CAAC;AACZ,uBAAO,KAAK,IAAI;AAAA,cAClB,OAAO;AACL,uBAAO,KAAK,IAAI;AAAA,cAClB;AAAA,YACF,WAAW,KAAK,eAAe,GAAG;AAEhC,oBAAM,WAAW,KAAK;AACtB,oBAAM,OAAO,KAAK,iBAAiB;AACnC,kBAAI,KAAK,OAAO,SAAS,KAAK,SAAS,WAAW,GAAG;AACnD,qBAAK,YAAY,MAAM,KAAK,SAAS,WAAW,CAAC;AACjD,qBAAK,MAAM,KAAK,SAAS,WAAW,CAAC;AACrC,uBAAO,KAAK,IAAI;AAAA,cAClB,OAAO;AACL,uBAAO;AAAA,cACT;AAAA,YACF;AACA;AAAA,UACF,WAAW,OAAO,KAAK;AACrB,iBAAK,KAAK,MAAM;AAChB,gBAAI,OAAO,KAAK;AAEd,mBAAK,MAAM,iBAAiB;AAC5B,kBAAI,KAAK,OAAO,SAAS,GAAG;AAC1B,qBAAK,YAAY,KAAK,IAAI,cAAc,CAAC;AACzC,qBAAK,MAAM,CAAC;AACZ,uBAAO,KAAK,IAAI;AAAA,cAClB,OAAO;AACL,qBAAK,MAAM,CAAC;AACZ,uBAAO,KAAK,IAAI;AAAA,cAClB;AAAA,YACF;AACA;AAAA,UACF;AACA,eAAK,KAAK,MAAM;AAAA,QAClB;AACA,eAAO,KAAK,IAAI;AAAA,MAClB;AAAA,MAEA,uBAAuB,WAAY;AACjC,YAAI,KAAK,KAAK,MAAM;AACpB,YAAI,OAAO,KAAK;AACd,eAAK,KAAK,MAAM;AAChB,cAAI,OAAO,KAAK;AACd,iBAAK,MAAM,wBAAwB;AACnC,mBAAO,KAAK,IAAI;AAAA,UAClB,WAAW,KAAK,eAAe,GAAG;AAChC,kBAAM,MAAM,KAAK,iBAAiB;AAClC,mBAAO;AAAA,UACT;AAAA,QACF,WAAW,OAAO,KAAK;AACrB,cAAI,KAAK,OAAO,KAAK,YAAY,KAAK;AACpC,iBAAK,MAAM,iBAAiB;AAC5B,mBAAO,KAAK,IAAI;AAAA,UAClB;AAAA,QACF,WAAW,OAAO,KAAK;AACrB,eAAK,SAAS;AACd,iBAAO;AAAA,QACT;AAGA,eAAO,KAAK,SAAS,KAAK,MAAM;AAC9B,cAAI,OAAO,MAAM;AACf,iBAAK,MAAM;AAAA,UACb,WAAW,OAAO,KAAK;AACrB,iBAAK,MAAM,CAAC;AACZ,iBAAK,SAAS;AACd,iBAAK,YAAY,KAAK,CAAC;AACvB;AAAA,UACF,WAAW,OAAO,KAAK;AACrB,iBAAK,KAAK,MAAM;AAChB,gBAAI,OAAO,KAAK;AACd,mBAAK,MAAM,wBAAwB;AACnC,kBAAI,KAAK,OAAO,SAAS,GAAG;AAC1B,qBAAK,YAAY,KAAK,IAAI,4BAA4B,CAAC;AACvD,qBAAK,MAAM,CAAC;AACZ,uBAAO,KAAK,IAAI;AAAA,cAClB,OAAO;AACL,uBAAO,KAAK,IAAI;AAAA,cAClB;AAAA,YACF,WAAW,KAAK,eAAe,GAAG;AAEhC,oBAAM,WAAW,KAAK;AACtB,oBAAM,OAAO,KAAK,iBAAiB;AACnC,kBAAI,KAAK,OAAO,SAAS,KAAK,SAAS,WAAW,GAAG;AACnD,qBAAK,YAAY,MAAM,KAAK,SAAS,WAAW,CAAC;AACjD,qBAAK,MAAM,KAAK,SAAS,WAAW,CAAC;AACrC,uBAAO,KAAK,IAAI;AAAA,cAClB,OAAO;AACL,uBAAO;AAAA,cACT;AAAA,YACF;AACA,gBAAI;AAAI,mBAAK,MAAM,CAAC;AAAA,UACtB,WAAW,OAAO,KAAK;AACrB,iBAAK,KAAK,MAAM;AAChB,gBAAI,OAAO,KAAK;AAEd,mBAAK,MAAM,iBAAiB;AAC5B,kBAAI,KAAK,OAAO,SAAS,GAAG;AAC1B,qBAAK,YAAY,KAAK,IAAI,cAAc,CAAC;AACzC,qBAAK,MAAM,CAAC;AACZ,uBAAO,KAAK,IAAI;AAAA,cAClB,OAAO;AAEL,qBAAK,MAAM,CAAC;AACZ,uBAAO,KAAK,IAAI;AAAA,cAClB;AAAA,YACF;AACA,gBAAI;AAAI,mBAAK,MAAM,CAAC;AAAA,UACtB;AACA,eAAK,KAAK,MAAM;AAAA,QAClB;AACA,eAAO,KAAK,IAAI;AAAA,MAClB;AAAA,IACF;AAAA;AAAA;;;AC1gBA;AAAA,gDAAAC,UAAAC,SAAA;AAAA;AAOA,IAAAA,QAAO,UAAU;AAAA,MACf,UAAU,WAAY;AACpB,cAAM,QAAQ,KAAK,OAAO,YAAY;AACtC,YAAI,KAAK,KAAK,SAAS;AACvB,YAAI,OAAO,OAAO,UAAU;AAC1B,cAAI,UAAU,SAAS;AACrB,gBAAI,KAAK,WAAW,OAAO,KAAK,SAAS,OAAO,GAAG;AACjD,mBAAK,QAAQ,CAAC;AACd,mBAAK,KAAK,IAAI;AAAA,YAChB,OAAO;AACL,mBAAK,KAAK,IAAI;AAAA,YAChB;AAAA,UACF,OAAO;AACL,iBAAK,KAAK,IAAI;AACd,gBAAI,UAAU,OAAO,UAAU,KAAK;AAClC,oBAAM,KAAK,KAAK,MAAM;AACtB,kBAAI,OAAO,KAAK;AACd,uBAAO,KAAK,iBAAiB;AAAA,cAC/B,WAAW,OAAO,KAAK;AACrB,uBAAO,KAAK,2BAA2B;AAAA,cACzC,WAAW,IAAI;AACb,qBAAK,MAAM,CAAC;AAAA,cACd;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAGA,YAAI,OAAO,KAAK,IAAI,QAAQ;AAC1B,cAAI,KAAK,UAAU,KAAK;AACtB,mBAAO,KAAK,IAAI;AAAA,UAClB;AACA,gBAAM,UAAU,KAAK;AACrB,cAAI,KAAK,KAAK,MAAM;AACpB,iBAAO,MAAM,KAAK;AAChB,iBAAK,KAAK,MAAM;AAAA,UAClB;AACA,cAAI,SAAS;AACb,cAAI,KAAK,eAAe,GAAG;AACzB,mBAAO,KAAK,SAAS,GAAG;AACtB,oBAAM,KAAK,MAAM;AAAA,YACnB;AACA,kBAAM,QAAQ,GAAG,MAAM,GAAG,EAAE,EAAE,YAAY;AAC1C,qBAAS,UAAU,aAAa,UAAU;AAAA,UAC5C;AAEA,eAAK,MAAM,KAAK,SAAS,OAAO;AAChC,iBAAO,SAAS,KAAK,IAAI,SAAS,KAAK,IAAI;AAAA,QAC7C;AAEA,YAAI,KAAK,SAAS,KAAK,QAAQ,OAAO,KAAK,IAAI,cAAc;AAE3D,cAAI,KAAK,KAAK,MAAM;AACpB,cAAI,OAAO,MAAM;AACf,iBACE,UAAU,cACN,KAAK,IAAI,kBACT,KAAK,IAAI;AACf,eAAG;AACD,kBAAI,KAAK,OAAO,KAAK,YAAY,KAAK;AAEpC,qBAAK,MAAM;AACX;AAAA,cACF;AAEA,mBAAK,cAAc;AACnB,mBAAK,KAAK,MAAM;AAAA,YAClB,SAAS,OAAO;AAAA,UAClB;AAEA,cAAI,IAAI;AACN,iBAAK,MAAM,CAAC;AAAA,UACd;AAAA,QACF;AAEA,eAAO;AAAA,MACT;AAAA,MAEA,eAAe,WAAY;AACzB,cAAM,KAAK,KAAK,OAAO,KAAK,SAAS;AACrC,cAAM,KAAK,KAAK,eAAe;AAC/B,YAAI,IAAI;AACN,iBAAO,GAAG,MAAM,MAAM,CAAC,CAAC;AAAA,QAC1B,OAAO;AACL,iBAAO,KAAK;AAAA,QACd;AAAA,MACF;AAAA,MAEA,gBAAgB;AAAA,QACd,GAAG,WAAY;AACb,eAAK;AACL,cAAI,KAAK,eAAe,GAAG;AACzB,iBAAK;AACL,iBAAK,cAAc;AACnB,mBAAO,KAAK,IAAI;AAAA,UAClB,OAAO;AACL,iBAAK;AACL,mBAAO;AAAA,UACT;AAAA,QACF;AAAA,QACA,KAAK,WAAY;AACf,gBAAM,QAAQ,KAAK,OAAO,KAAK;AAC/B,cAAI,UAAU,KAAK;AACjB,iBAAK,MAAM,yBAAyB,EAAE,MAAM;AAC5C,mBAAO,KAAK,IAAI;AAAA,UAClB,WAAW,UAAU,KAAK;AACxB,iBAAK,MAAM;AACX,mBAAO,KAAK,IAAI;AAAA,UAClB,WAAW,UAAU,KAAK;AACxB,iBAAK,MAAM;AACX,mBAAO,KAAK,IAAI;AAAA,UAClB;AACA,iBAAO;AAAA,QACT;AAAA,QACA,MAAM,WAAY;AAChB,cAAI,KAAK,SAAS,KAAK,MAAM;AAC3B,iBAAK,MAAM;AACX,gBAAI,KAAK,eAAe,GAAG;AACzB,kBAAI;AACJ,iBAAG;AACD,oBAAI,KAAK,OAAO,KAAK,YAAY,KAAK;AAEpC,uBAAK,MAAM;AACX;AAAA,gBACF;AAEA,qBAAK,cAAc;AACnB,qBAAK,KAAK,MAAM;AAAA,cAClB,SAAS,OAAO;AAEhB,mBAAK,MAAM,CAAC;AAEZ,qBAAO,KAAK,IAAI;AAAA,YAClB,OAAO;AACL,mBAAK,MAAM,CAAC;AAAA,YACd;AAAA,UACF;AACA,iBAAO,KAAK,IAAI;AAAA,QAClB;AAAA,QACA,KAAK,WAAY;AACf,cAAI,KAAK,OAAO,KAAK,YAAY,KAAK;AACpC,iBAAK,MAAM;AACX,mBAAO,KAAK,IAAI;AAAA,UAClB;AACA,iBAAO;AAAA,QACT;AAAA,QACA,KAAK,WAAY;AACf,cAAI,KAAK,OAAO,KAAK,YAAY,KAAK;AACpC,iBAAK,MAAM;AACX,mBAAO,KAAK,IAAI;AAAA,UAClB,OAAO;AACL,mBAAO;AAAA,UACT;AAAA,QACF;AAAA,QACA,KAAK,WAAY;AACf,gBAAM,UAAU,KAAK;AACrB,eAAK,MAAM;AACX,cAAI,KAAK,YAAY,GAAG;AACtB,iBAAK,iBAAiB,EAAE,MAAM;AAAA,UAChC;AACA,cAAI,KAAK,eAAe,GAAG;AACzB,kBAAM,QAAQ,KAAK,OAAO;AAC1B,iBAAK,cAAc;AACnB,kBAAM,YAAY,KAAK,OAAO,UAAU,QAAQ,CAAC,EAAE,YAAY;AAC/D,kBAAM,SAAS,KAAK,aAAa;AACjC,gBAAI,OAAO,WAAW,UAAU;AAC9B,mBAAK,MAAM;AACX,kBAAI,KAAK,YAAY,GAAG;AACtB,qBAAK,iBAAiB,EAAE,MAAM;AAAA,cAChC;AACA,kBAAI,KAAK,OAAO,KAAK,SAAS,OAAO,KAAK;AACxC,uBAAO;AAAA,cACT;AAAA,YACF;AAAA,UACF;AAEA,eAAK,MAAM,KAAK,SAAS,OAAO;AAChC,iBAAO;AAAA,QACT;AAAA,QACA,KAAK,WAAY;AACf,gBAAM,QAAQ,KAAK,OAAO,KAAK;AAC/B,cAAI,UAAU,KAAK;AACjB,iBAAK,MAAM;AACX,mBAAO,KAAK,IAAI;AAAA,UAClB,WAAW,UAAU,KAAK;AACxB,gBAAI,KAAK,OAAO,KAAK,SAAS,OAAO,KAAK;AACxC,mBAAK,QAAQ,CAAC;AACd,qBAAO,KAAK,IAAI;AAAA,YAClB,OAAO;AACL,mBAAK,MAAM;AACX,qBAAO,KAAK,IAAI;AAAA,YAClB;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAAA,QACA,KAAK,WAAY;AACf,gBAAM,QAAQ,KAAK,OAAO,KAAK;AAC/B,cAAI,UAAU,KAAK;AACjB,iBAAK,MAAM;AACX,mBAAO,KAAK,IAAI;AAAA,UAClB,WAAW,UAAU,KAAK;AACxB,iBAAK,MAAM;AACX,mBAAO,KAAK,IAAI;AAAA,UAClB;AACA,iBAAO;AAAA,QACT;AAAA,QACA,KAAK,WAAY;AACf,cAAI,KAAK,OAAO,KAAK,YAAY,KAAK;AACpC,gBAAI,KAAK,OAAO,KAAK,SAAS,OAAO,KAAK;AACxC,mBAAK,QAAQ,CAAC;AACd,qBAAO,KAAK,IAAI;AAAA,YAClB,OAAO;AACL,mBAAK,MAAM;AACX,qBAAO,KAAK,IAAI;AAAA,YAClB;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAAA,QACA,KAAK,WAAY;AACf,cAAI,KAAK,WAAW,OAAO,KAAK,OAAO,KAAK,YAAY,KAAK;AAC3D,gBAAI,KAAK,WAAW,OAAO,KAAK,OAAO,KAAK,SAAS,OAAO,KAAK;AAC/D,mBAAK,QAAQ,CAAC;AACd,qBAAO,KAAK,IAAI;AAAA,YAClB,OAAO;AACL,mBAAK,MAAM;AACX,qBAAO,KAAK,IAAI;AAAA,YAClB;AAAA,UACF;AACA,cACE,KAAK,WAAW,OAChB,KAAK,OAAO,KAAK,YAAY,OAC7B,KAAK,OAAO,KAAK,SAAS,OAAO,KACjC;AACA,iBAAK,QAAQ,CAAC;AACd,mBAAO,KAAK,IAAI;AAAA,UAClB;AACA,iBAAO;AAAA,QACT;AAAA,QACA,KAAK,WAAY;AACf,cAAI,QAAQ,KAAK,OAAO,KAAK;AAC7B,cAAI,UAAU,KAAK;AACjB,oBAAQ,KAAK,OAAO,KAAK,SAAS;AAClC,gBAAI,UAAU,KAAK;AACjB,mBAAK,QAAQ,CAAC;AACd,qBAAO,KAAK,IAAI;AAAA,YAClB,WAAW,UAAU,KAAK;AACxB,kBAAI,KAAK,WAAW,GAAG;AACrB,uBAAO,KAAK,IAAI;AAAA,cAClB;AAAA,YACF;AACA,iBAAK,MAAM;AACX,mBAAO,KAAK,IAAI;AAAA,UAClB,WAAW,UAAU,KAAK;AACxB,iBAAK,MAAM;AACX,gBAAI,KAAK,WAAW,OAAO,KAAK,OAAO,KAAK,YAAY,KAAK;AAC3D,mBAAK,MAAM;AACX,qBAAO,KAAK,IAAI;AAAA,YAClB,OAAO;AACL,qBAAO,KAAK,IAAI;AAAA,YAClB;AAAA,UACF,WAAW,UAAU,KAAK;AACxB,iBAAK,MAAM;AACX,mBAAO,KAAK,IAAI;AAAA,UAClB;AACA,iBAAO;AAAA,QACT;AAAA,QACA,KAAK,WAAY;AACf,cAAI,QAAQ,KAAK,OAAO,KAAK;AAC7B,cAAI,UAAU,KAAK;AACjB,iBAAK,MAAM;AACX,mBAAO,KAAK,IAAI;AAAA,UAClB,WAAW,UAAU,KAAK;AACxB,oBAAQ,KAAK,OAAO,KAAK,SAAS;AAClC,gBAAI,UAAU,KAAK;AACjB,mBAAK,QAAQ,CAAC;AACd,qBAAO,KAAK,IAAI;AAAA,YAClB,OAAO;AACL,mBAAK,MAAM;AACX,qBAAO,KAAK,IAAI;AAAA,YAClB;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAAA,QACA,KAAK,WAAY;AACf,gBAAM,QAAQ,KAAK,OAAO,KAAK;AAC/B,cAAI,UAAU,KAAK;AACjB,iBAAK,MAAM;AACX,mBAAO,KAAK,IAAI;AAAA,UAClB,WAAW,UAAU,KAAK;AACxB,iBAAK,MAAM;AACX,gBAAI,KAAK,OAAO,KAAK,YAAY,KAAK;AACpC,mBAAK,MAAM;AACX,qBAAO,KAAK,IAAI;AAAA,YAClB,OAAO;AACL,qBAAO,KAAK,IAAI;AAAA,YAClB;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAAA,QACA,KAAK,WAAY;AACf,gBAAM,QAAQ,KAAK,OAAO,KAAK;AAC/B,cAAI,UAAU,KAAK;AACjB,iBAAK,MAAM;AACX,mBAAO,KAAK,IAAI;AAAA,UAClB,WAAW,UAAU,OAAO,KAAK,OAAO,KAAK,SAAS,OAAO,KAAK;AAChE,iBAAK,QAAQ,CAAC;AACd,mBAAO,KAAK,IAAI;AAAA,UAClB;AACA,iBAAO;AAAA,QACT;AAAA,QACA,KAAK,WAAY;AACf,cAAI,KAAK,OAAO,KAAK,YAAY,KAAK;AACpC,iBAAK,MAAM;AACX,mBAAO,KAAK,IAAI;AAAA,UAClB;AACA,iBAAO;AAAA,QACT;AAAA,QACA,KAAK,WAAY;AACf,gBAAM,QAAQ,KAAK,OAAO,KAAK;AAC/B,cAAI,UAAU,KAAK;AACjB,iBAAK,MAAM;AACX,mBAAO,KAAK,IAAI;AAAA,UAClB,WAAW,UAAU,KAAK;AACxB,iBAAK,MAAM;AACX,mBAAO,KAAK,IAAI;AAAA,UAClB;AACA,iBAAO;AAAA,QACT;AAAA,QACA,KAAK,WAAY;AACf,gBAAM,QAAQ,KAAK,OAAO,KAAK;AAC/B,cAAI,UAAU,KAAK;AACjB,iBAAK,MAAM;AACX,mBAAO,KAAK,IAAI;AAAA,UAClB,WAAW,UAAU,KAAK;AACxB,iBAAK,MAAM;AACX,mBAAO,KAAK,IAAI;AAAA,UAClB;AACA,iBAAO;AAAA,QACT;AAAA,QACA,KAAK,WAAY;AACf,cAAI,KAAK,OAAO,KAAK,YAAY,KAAK;AACpC,iBAAK,MAAM;AACX,mBAAO,KAAK,IAAI;AAAA,UAClB;AACA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AAAA;AAAA;;;AClWA;AAAA,+CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,SAAS;AAEf,IAAAA,QAAO,UAAU;AAAA,MAEf,QAAQ,WAAY;AAClB,cAAM,KAAK,KAAK,OAAO,WAAW,KAAK,SAAS,CAAC;AACjD,eAAQ,KAAK,MAAM,KAAK,MAAO,OAAO;AAAA,MACxC;AAAA,MAGA,cAAc,WAAY;AACxB,cAAM,KAAK,KAAK,OAAO,WAAW,KAAK,SAAS,CAAC;AACjD,eAAO,KAAK,MAAM,KAAK;AAAA,MACzB;AAAA,MAGA,UAAU,WAAY;AACpB,cAAM,KAAK,KAAK,OAAO,WAAW,KAAK,SAAS,CAAC;AACjD,eACG,KAAK,MAAM,KAAK,OAChB,KAAK,MAAM,KAAK,MACjB,OAAO,MACN,KAAK,MAAM,KAAK,MACjB,KAAK;AAAA,MAET;AAAA,MAGA,gBAAgB,WAAY;AAC1B,cAAM,KAAK,KAAK,OAAO,WAAW,KAAK,SAAS,CAAC;AAEjD,YAAI,KAAK,MAAM,KAAK;AAAI,iBAAO;AAE/B,YAAI,KAAK,MAAM,KAAK;AAAK,iBAAO;AAEhC,YAAI,OAAO;AAAI,iBAAO;AAEtB,YAAI,KAAK;AAAK,iBAAO;AAErB,eAAO;AAAA,MACT;AAAA,MAGA,eAAe,WAAY;AACzB,eAAO,KAAK,SAAS,KAAK,MAAM;AAC9B,gBAAM,KAAK,KAAK,MAAM;AACtB,cAAI,CAAC,KAAK,SAAS,GAAG;AACpB,gBAAI;AAAI,mBAAK,MAAM,CAAC;AACpB;AAAA,UACF;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAAA,MAGA,UAAU,WAAY;AACpB,cAAM,KAAK,KAAK,OAAO,KAAK,SAAS;AACrC,eAAO,OAAO,QAAQ,EAAE,MAAM;AAAA,MAChC;AAAA,MAEA,eAAe,WAAY;AACzB,cAAM,KAAK,KAAK,OAAO,KAAK,SAAS;AACrC,eAAO,OAAO,OAAO,OAAO,OAAQ,OAAO,QAAQ,OAAO;AAAA,MAC5D;AAAA,MAEA,aAAa,WAAY;AACvB,cAAM,KAAK,KAAK,OAAO,KAAK,SAAS;AACrC,eAAO,OAAO,OAAO,OAAO;AAAA,MAC9B;AAAA,MAEA,kBAAkB,WAAY;AAC5B,eAAO,KAAK,SAAS,KAAK,MAAM;AAC9B,gBAAM,KAAK,KAAK,MAAM;AACtB,cAAI,CAAC,KAAK,YAAY,GAAG;AACvB,gBAAI;AAAI,mBAAK,MAAM,CAAC;AACpB;AAAA,UACF;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAAA,MAEA,QAAQ,WAAY;AAClB,cAAM,KAAK,KAAK,OAAO,WAAW,KAAK,SAAS,CAAC;AAEjD,YAAI,KAAK,MAAM,KAAK;AAAI,iBAAO;AAE/B,YAAI,KAAK,MAAM,KAAK;AAAI,iBAAO;AAE/B,YAAI,KAAK,MAAM,KAAK;AAAK,iBAAO;AAEhC,YAAI,OAAO;AAAI,iBAAO;AAEtB,eAAO;AAAA,MACT;AAAA,MAEA,UAAU,WAAY;AACpB,cAAM,KAAK,KAAK,OAAO,WAAW,KAAK,SAAS,CAAC;AAEjD,YAAI,KAAK,MAAM,KAAK;AAAI,iBAAO;AAE/B,YAAI,OAAO;AAAI,iBAAO;AAEtB,eAAO;AAAA,MACT;AAAA,IACF;AAAA;AAAA;;;AC/GA;AAAA,yCAAAC,UAAAC,SAAA;AAAA;AAsBA,QAAM,QAAQ,SAAU,QAAQ;AAC9B,WAAK,SAAS;AACd,WAAK,MAAM,KAAK,OAAO,OAAO;AAC9B,WAAK,MAAM;AACX,WAAK,QAAQ;AACb,WAAK,aAAa;AAClB,WAAK,iBAAiB;AACtB,WAAK,YAAY;AACjB,WAAK,WAAW;AAChB,WAAK,aAAa;AAClB,WAAK,UAAU;AACf,WAAK,YAAY;AACjB,WAAK,WAAW;AAAA,QACd,WAAW,KAAK,IAAI;AAAA,QACpB,WAAW,KAAK,IAAI;AAAA,QACpB,cAAc,KAAK,IAAI;AAAA,QACvB,YAAY,KAAK,IAAI;AAAA,QACrB,UAAU,KAAK,IAAI;AAAA,QACnB,UAAU,KAAK,IAAI;AAAA,QACnB,SAAS,KAAK,IAAI;AAAA,QAClB,eAAe,KAAK,IAAI;AAAA,QACxB,MAAM,KAAK,IAAI;AAAA,QACf,KAAK,KAAK,IAAI;AAAA,QACd,UAAU,KAAK,IAAI;AAAA,QACnB,OAAO,KAAK,IAAI;AAAA,QAChB,QAAQ,KAAK,IAAI;AAAA,QACjB,KAAK,KAAK,IAAI;AAAA,QACd,OAAO,KAAK,IAAI;AAAA,QAChB,SAAS,KAAK,IAAI;AAAA,QAClB,OAAO,KAAK,IAAI;AAAA,QAChB,IAAI,KAAK,IAAI;AAAA,QACb,QAAQ,KAAK,IAAI;AAAA,QACjB,OAAO,KAAK,IAAI;AAAA,QAChB,MAAM,KAAK,IAAI;AAAA,QACf,OAAO,KAAK,IAAI;AAAA,QAChB,UAAU,KAAK,IAAI;AAAA,QACnB,IAAI,KAAK,IAAI;AAAA,QACb,KAAK,KAAK,IAAI;AAAA,QACd,QAAQ,KAAK,IAAI;AAAA,QACjB,SAAS,KAAK,IAAI;AAAA,QAClB,YAAY,KAAK,IAAI;AAAA,QACrB,SAAS,KAAK,IAAI;AAAA,QAClB,YAAY,KAAK,IAAI;AAAA,QACrB,YAAY,KAAK,IAAI;AAAA,QACrB,IAAI,KAAK,IAAI;AAAA,QACb,QAAQ,KAAK,IAAI;AAAA,QACjB,WAAW,KAAK,IAAI;AAAA,QACpB,MAAM,KAAK,IAAI;AAAA,QACf,SAAS,KAAK,IAAI;AAAA,QAClB,OAAO,KAAK,IAAI;AAAA,QAChB,UAAU,KAAK,IAAI;AAAA,QACnB,MAAM,KAAK,IAAI;AAAA,QACf,MAAM,KAAK,IAAI;AAAA,QACf,OAAO,KAAK,IAAI;AAAA,QAChB,OAAO,KAAK,IAAI;AAAA,QAChB,WAAW,KAAK,IAAI;AAAA,QACpB,OAAO,KAAK,IAAI;AAAA,QAChB,MAAM,KAAK,IAAI;AAAA,QACf,SAAS,KAAK,IAAI;AAAA,QAClB,YAAY,KAAK,IAAI;AAAA,QACrB,KAAK,KAAK,IAAI;AAAA,QACd,OAAO,KAAK,IAAI;AAAA,QAChB,KAAK,KAAK,IAAI;AAAA,QACd,MAAM,KAAK,IAAI;AAAA,QACf,SAAS,KAAK,IAAI;AAAA,QAClB,cAAc,KAAK,IAAI;AAAA,QACvB,SAAS,KAAK,IAAI;AAAA,QAClB,cAAc,KAAK,IAAI;AAAA,QACvB,WAAW,KAAK,IAAI;AAAA,QACpB,KAAK,KAAK,IAAI;AAAA,QACd,WAAW,KAAK,IAAI;AAAA,QACpB,QAAQ,KAAK,IAAI;AAAA,QACjB,OAAO,KAAK,IAAI;AAAA,QAChB,OAAO,KAAK,IAAI;AAAA,QAChB,iBAAiB,KAAK,IAAI;AAAA,QAC1B,QAAQ,KAAK,IAAI;AAAA,QACjB,UAAU,KAAK,IAAI;AAAA,QACnB,OAAO,KAAK,IAAI;AAAA,QAChB,SAAS,KAAK,IAAI;AAAA,QAClB,WAAW,KAAK,IAAI;AAAA,QACpB,QAAQ,KAAK,IAAI;AAAA,QACjB,OAAO,KAAK,IAAI;AAAA,QAChB,MAAM,KAAK,IAAI;AAAA,QACf,OAAO,KAAK,IAAI;AAAA,QAChB,UAAU,KAAK,IAAI;AAAA,QACnB,IAAI,KAAK,IAAI;AAAA,QACb,KAAK,KAAK,IAAI;AAAA,QACd,KAAK,KAAK,IAAI;AAAA,QACd,OAAO,KAAK,IAAI;AAAA,QAChB,UAAU,KAAK,IAAI;AAAA,MACrB;AACA,WAAK,eAAe;AAAA,QAClB,KAAK,KAAK,IAAI;AAAA,QACd,SAAS,KAAK,IAAI;AAAA,QAClB,MAAM,KAAK,IAAI;AAAA,QACf,QAAQ,KAAK,IAAI;AAAA,QACjB,OAAO,KAAK,IAAI;AAAA,QAChB,QAAQ,KAAK,IAAI;AAAA,QACjB,QAAQ,KAAK,IAAI;AAAA,QACjB,OAAO,KAAK,IAAI;AAAA,QAChB,QAAQ,KAAK,IAAI;AAAA,QACjB,MAAM,KAAK,IAAI;AAAA,QACf,SAAS,KAAK,IAAI;AAAA,QAClB,OAAO,KAAK,IAAI;AAAA,MAClB;AAAA,IACF;AAOA,UAAM,UAAU,WAAW,SAAU,OAAO;AAC1C,WAAK,SAAS;AACd,WAAK,OAAO,MAAM;AAClB,WAAK,WAAW;AAChB,WAAK,SAAS;AACd,WAAK,YAAY;AACjB,WAAK,SAAS;AACd,WAAK,SAAS;AAAA,QACZ,cAAc;AAAA,QACd,YAAY;AAAA,QACZ,cAAc;AAAA,QACd,aAAa;AAAA,QACb,WAAW;AAAA,QACX,aAAa;AAAA,QACb,WAAW;AAAA,QACX,aAAa;AAAA,MACf;AACA,WAAK,SAAS,CAAC;AACf,UAAI,KAAK,UAAU,KAAK;AACtB,aAAK,SAAS,KAAK,KAAK,IAAI;AAAA,MAC9B,OAAO;AACL,eAAO,KAAK,SAAS;AAAA,MACvB;AACA,WAAK,OAAO,KAAK,UAAU,KAAK;AAChC,UAAI,CAAC,KAAK,cAAc,KAAK,WAAW;AACtC,aAAK,iBAAiB,CAAC,SAAS;AAChC,aAAK,MAAM,iBAAiB;AAAA,MAC9B,OAAO;AACL,aAAK,iBAAiB,CAAC;AACvB,aAAK,MAAM,SAAS;AAAA,MACtB;AAGA,WAAK,gBAAgB;AAAA,QACnB,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,aAAa;AAAA,QACb,yBAAyB;AAAA,QACzB,UAAU;AAAA,QAOV,mBAAmB;AAAA,QAGnB,UAAU,WAAY;AACpB,eAAK;AAAA,QACP;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAOA,UAAM,UAAU,QAAQ,WAAY;AAClC,YAAM,KAAK,KAAK,OAAO,KAAK;AAC5B,UAAI,CAAC;AAAI,eAAO;AAChB,WAAK,UAAU;AACf,WAAK;AACL,UAAI,OAAO,QAAQ,KAAK,OAAO,KAAK,YAAY,MAAM;AACpD,aAAK,UAAU;AACf,aAAK;AAAA,MACP;AACA,UAAI,OAAO,QAAQ,OAAO,MAAM;AAC9B,aAAK,OAAO,YAAY,EAAE,KAAK;AAC/B,aAAK,YAAY,KAAK,OAAO;AAC7B,aAAK,OAAO,cAAc;AAAA,MAC5B,OAAO;AACL,aAAK,OAAO;AAAA,MACd;AACA,aAAO;AAAA,IACT;AAOA,UAAM,UAAU,QAAQ,SAAU,MAAM;AACtC,UAAI,SAAS,GAAG;AAEd,aAAK;AACL,YACE,KAAK,OAAO,KAAK,YAAY,QAC7B,KAAK,OAAO,KAAK,SAAS,OAAO,MACjC;AACA,eAAK;AACL;AAAA,QACF;AACA,YACE,KAAK,OAAO,KAAK,YAAY,QAC7B,KAAK,OAAO,KAAK,YAAY,MAC7B;AACA,eAAK,OAAO;AACZ,eAAK;AACL,eAAK,OAAO,cAAc,KAAK;AAAA,QACjC,OAAO;AACL,eAAK,OAAO;AAAA,QACd;AACA,aAAK,SAAS,KAAK,OAAO,UAAU,GAAG,KAAK,OAAO,SAAS,IAAI;AAAA,MAClE,WAAW,OAAO,GAAG;AACnB,aAAK,UAAU;AACf,YAAI,OAAO,KAAK,OAAO,QAAQ;AAC7B,eAAK,SAAS,KAAK,OAAO,UAAU,GAAG,KAAK,OAAO,SAAS,IAAI;AAEhE,eAAK,OAAO,YAAY,KAAK,OAAO;AACpC,eAAK,OAAO,cAAc,KAAK,YAAY,KAAK,OAAO;AACvD,mBAAS,IAAI,GAAG,IAAI,KAAK,OAAO,QAAQ,KAAK;AAC3C,gBAAI,IAAI,KAAK,OAAO;AACpB,gBAAI,MAAM,MAAM;AACd,kBAAI,KAAK,OAAO,EAAE;AAClB,mBAAK,YAAY,KAAK,OAAO;AAC7B,mBAAK,OAAO;AACZ,mBAAK,OAAO,cAAc;AAC1B,kBAAI,MAAM,MAAM;AACd,oBAAI,MAAM,MAAM;AACd,uBAAK,OAAO;AAAA,gBACd,OAAO;AACL,uBAAK,OAAO;AAAA,gBACd;AAAA,cACF;AAAA,YACF,WAAW,MAAM,MAAM;AACrB,mBAAK,YAAY,KAAK,OAAO;AAC7B,mBAAK,OAAO;AACZ,mBAAK,OAAO,cAAc;AAAA,YAC5B,OAAO;AACL,mBAAK,OAAO;AAAA,YACd;AAAA,UACF;AACA,eAAK,WAAW,KAAK,OAAO;AAAA,QAC9B,OAAO;AAEL,eAAK,SAAS;AACd,eAAK,OAAO,YAAY,KAAK,WAAW,KAAK,OAAO;AACpD,eAAK,OAAO,cAAc,KAAK,OAAO;AAAA,QACxC;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AASA,UAAM,UAAU,WAAW,SAAU,MAAM;AACzC,aAAO,SAAS,KAAK,MAAM,KAAK,MAAM;AAAA,IACxC;AASA,UAAM,UAAU,mBAAmB,SAAU,MAAM;AACjD,aAAO,SAAS,KAAK,MAAM,KAAK,MAAM,EAAE,YAAY;AAAA,IACtD;AASA,UAAM,UAAU,QAAQ,SAAU,MAAM;AACtC,UAAI,OAAO,KAAK,OAAO,UAAU,KAAK,QAAQ,KAAK,SAAS,IAAI;AAChE,UACE,KAAK,KAAK,SAAS,OAAO,QAC1B,KAAK,OAAO,KAAK,SAAS,OAAO,OAAO,MACxC;AACA,gBAAQ;AAAA,MACV;AACA,aAAO;AAAA,IACT;AASA,UAAM,UAAU,UAAU,SAAU,MAAM;AACxC,eAAS,IAAI,GAAG,IAAI,MAAM,KAAK;AAC7B,cAAM,KAAK,KAAK,OAAO,KAAK;AAC5B,YAAI,CAAC;AAAI;AACT,aAAK,UAAU;AACf,aAAK;AACL,YAAI,OAAO,QAAQ,KAAK,OAAO,KAAK,YAAY,MAAM;AACpD,eAAK,UAAU;AACf,eAAK;AACL;AAAA,QACF;AACA,YAAI,OAAO,QAAQ,OAAO,MAAM;AAC9B,eAAK,OAAO,YAAY,EAAE,KAAK;AAC/B,eAAK,YAAY,KAAK,OAAO;AAC7B,eAAK,OAAO,cAAc;AAAA,QAC5B,OAAO;AACL,eAAK,OAAO;AAAA,QACd;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAOA,UAAM,UAAU,WAAW,WAAY;AACrC,aAAO;AAAA,QACL,QAAQ,KAAK;AAAA,QACb,QAAQ,KAAK;AAAA,QACb,UAAU,KAAK;AAAA,QACf,WAAW,KAAK;AAAA,QAChB,QAAQ;AAAA,UACN,cAAc,KAAK,OAAO;AAAA,UAC1B,YAAY,KAAK,OAAO;AAAA,UACxB,cAAc,KAAK,OAAO;AAAA,UAC1B,WAAW,KAAK,OAAO;AAAA,UACvB,aAAa,KAAK,OAAO;AAAA,QAC3B;AAAA,QACA,eAAe,KAAK;AAAA,MACtB;AAAA,IACF;AAOA,UAAM,UAAU,WAAW,SAAU,OAAO;AAC1C,WAAK,SAAS,MAAM;AACpB,WAAK,SAAS,MAAM;AACpB,WAAK,WAAW,MAAM;AACtB,WAAK,YAAY,MAAM;AACvB,WAAK,SAAS,MAAM;AACpB,UAAI,MAAM,eAAe;AACvB,aAAK,gBAAgB,MAAM;AAAA,MAC7B;AACA,aAAO;AAAA,IACT;AAUA,UAAM,UAAU,cAAc,SAAU,OAAO,OAAO;AACpD,WAAK,OAAO,KAAK,CAAC,OAAO,KAAK,CAAC;AAC/B,aAAO;AAAA,IACT;AAQA,UAAM,UAAU,MAAM,WAAY;AAChC,WAAK,OAAO,cAAc,KAAK;AAC/B,WAAK,OAAO,YAAY,KAAK,OAAO;AACpC,WAAK,OAAO,cAAc,KAAK,OAAO;AACtC,UAAI,QAAQ,KAAK,KAAK,KAAK,KAAK,IAAI;AACpC,UAAI,CAAC,KAAK,YAAY;AACpB,eACE,UAAU,KAAK,IAAI,gBAClB,CAAC,KAAK,mBACJ,UAAU,KAAK,IAAI,aAClB,UAAU,KAAK,IAAI,kBAEvB,UAAU,KAAK,IAAI,YACnB;AACA,kBAAQ,KAAK,KAAK,KAAK,KAAK,IAAI;AAAA,QAClC;AACA,YAAI,SAAS,KAAK,IAAI,sBAAsB;AAG1C,iBAAO,KAAK,IAAI;AAAA,QAClB,WAAW,UAAU,KAAK,IAAI,aAAa;AAEzC,iBAAO;AAAA,QACT;AAAA,MACF;AACA,UAAI,CAAC,KAAK,OAAO,aAAa;AAC5B,aAAK,OAAO,cAAc,KAAK,OAAO;AACtC,aAAK,OAAO,YAAY,KAAK,OAAO;AACpC,aAAK,OAAO,cAAc,KAAK,OAAO;AAAA,MACxC;AAIA,aAAO;AAAA,IACT;AASA,UAAM,UAAU,QAAQ,SAAU,WAAW;AAC3C,WAAK,eAAe,KAAK,SAAS;AAClC,WAAK,eAAe;AACpB,WAAK,UAAU,KAAK,UAAU;AAE9B,UAAI,OAAO,KAAK,YAAY,YAAY;AACtC,cAAM,IAAI,MAAM,gCAAgC,YAAY,GAAG;AAAA,MACjE;AACA,aAAO;AAAA,IACT;AAQA,UAAM,UAAU,WAAW,WAAY;AACrC,YAAM,IAAI,KAAK,eAAe,SAAS;AACvC,YAAM,YAAY,IAAI,IAAI,KAAK,eAAe,IAAI,IAAI,KAAK,eAAe;AAC1E,WAAK,eAAe,KAAK,eAAe,KAAK,eAAe,SAAS;AACrE,WAAK,UAAU,KAAK,UAAU,KAAK;AAEnC,UAAI,OAAO,KAAK,YAAY,YAAY;AACtC,cAAM,IAAI,MAAM,gCAAgC,KAAK,eAAe,GAAG;AAAA,MACzE;AACA,aAAO;AAAA,IACT;AAQA,UAAM,UAAU,OAAO,WAAY;AACjC,UAAI;AACJ,UAAI,CAAC,KAAK,QAAQ;AAChB,aAAK,OAAO;AAAA,MACd;AACA,WAAK,OAAO,eAAe,KAAK;AAChC,WAAK,OAAO,aAAa,KAAK,OAAO;AACrC,WAAK,OAAO,eAAe,KAAK,OAAO;AACvC,WAAK,SAAS;AACd,UAAI,KAAK,MAAM;AACb,aAAK,OAAO,cAAc,KAAK,OAAO;AACtC,aAAK,OAAO,YAAY,KAAK,OAAO;AACpC,aAAK,OAAO,cAAc,KAAK,OAAO;AACtC,eAAO,KAAK;AAAA,MACd;AACA,UAAI,KAAK,OAAO,SAAS,GAAG;AAC1B,gBAAQ,KAAK,OAAO,MAAM;AAC1B,YAAI,OAAO,MAAM,OAAO,UAAU;AAChC,eAAK,SAAS,MAAM,EAAE;AAAA,QACxB,OAAO;AACL,eAAK,QAAQ,MAAM,EAAE;AAAA,QACvB;AACA,gBAAQ,MAAM;AAAA,MAChB,OAAO;AACL,gBAAQ,KAAK,QAAQ,MAAM,MAAM,CAAC,CAAC;AAAA,MACrC;AACA,UAAI,KAAK,UAAU,KAAK,QAAQ,KAAK,OAAO,WAAW,GAAG;AACxD,aAAK,OAAO;AAAA,MACd;AAEA,UAAI,KAAK,OAAO;AACd,YAAI,QAAQ;AACZ,YAAI,OAAO,UAAU,UAAU;AAC7B,kBAAQ,KAAK,OAAO,OAAO,OAAO;AAAA,QACpC,OAAO;AACL,kBAAQ,MAAM,QAAQ;AAAA,QACxB;AACA,cAAM,IAAI,IAAI;AAAA,UACZ,QACE,WACA,KAAK,OAAO,aACZ,MACA,KAAK,OAAO,eACZ,YACA,KAAK,OAAO,YACZ,MACA,KAAK,OAAO,cACZ,OACA,KAAK,SACL;AAAA,QACJ;AAEA,gBAAQ,MAAM,EAAE,KAAK;AAAA,MACvB;AACA,aAAO;AAAA,IACT;AAGA;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,EAAE,QAAQ,SAAU,KAAK;AACvB,iBAAW,KAAK,KAAK;AACnB,cAAM,UAAU,KAAK,IAAI;AAAA,MAC3B;AAAA,IACF,CAAC;AAED,IAAAA,QAAO,UAAU;AAAA;AAAA;;;AChjBjB;AAAA,gDAAAC,UAAAC,SAAA;AAAA;AAeA,QAAMC,YAAW,SAAU,MAAM,QAAQ,QAAQ;AAC/C,WAAK,OAAO;AACZ,WAAK,SAAS;AACd,WAAK,SAAS;AAAA,IAChB;AAEA,IAAAD,QAAO,UAAUC;AAAA;AAAA;;;ACrBjB;AAAA,gDAAAC,UAAAC,SAAA;AAAA;AAOA,IAAAA,QAAO,UAAU;AAAA,MAQf,YAAY,WAAY;AACtB,YAAI,SAAS;AACb,YAAI,YAAY;AAChB,cAAM,SAAS,KAAK,KAAK,OAAO;AAEhC,YAAI,KAAK,UAAU,KAAK,IAAI,SAAS;AACnC,eAAK,KAAK,EAAE,OAAO,GAAG;AACtB,mBAAS;AAAA,QACX,OAAO;AACL,sBAAY;AACZ,mBAAS;AAAA,QACX;AACA,YAAI,QAAQ,CAAC;AACb,YAAI,KAAK,KAAK,EAAE,UAAU,QAAQ;AAChC,kBAAQ,KAAK,qBAAqB,SAAS;AAAA,QAC7C;AACA,aAAK,OAAO,MAAM;AAClB,aAAK,KAAK;AACV,eAAO,OAAO,WAAW,KAAK;AAAA,MAChC;AAAA,MAOA,sBAAsB,SAAU,WAAW;AACzC,cAAM,OAAO;AACb,eAAO,KAAK;AAAA,UACV,WAAY;AACV,mBAAO,KAAK,gBAAgB,SAAS;AAAA,UACvC;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,MAWA,iBAAiB,SAAU,WAAW;AACpC,YACG,CAAC,aAAa,KAAK,UAAU,OAC7B,aAAa,KAAK,UAAU,KAC7B;AACA;AAAA,QACF;AAEA,YAAI,KAAK,UAAU,KAAK;AACtB,iBAAO,KAAK,KAAK,MAAM,EAAE;AAAA,QAC3B;AAEA,cAAM,QAAQ,KAAK,KAAK,OAAO;AAE/B,YAAI,MAAM;AACV,YAAI,QAAQ;AACZ,YAAI,QAAQ;AACZ,YAAI,SAAS;AAEb,YAAI,KAAK,UAAU,KAAK;AACtB,eAAK,KAAK;AACV,kBAAQ;AACR,kBAAQ,KAAK,cAAc,MAAM,KAAK;AAAA,QACxC,WAAW,KAAK,UAAU,KAAK,IAAI,cAAc,KAAK,WAAW,KAAK;AACpE,eAAK,KAAK;AACV,cAAI,KAAK,UAAU,KAAK;AACtB,iBAAK,MAAM;AAAA,UACb;AACA,mBAAS;AACT,kBAAQ,KAAK,UAAU;AAAA,QACzB,OAAO;AACL,gBAAM,OAAO,KAAK,UAAU;AAE5B,cAAI,KAAK,UAAU,KAAK,IAAI,gBAAgB;AAC1C,iBAAK,KAAK;AACV,kBAAM;AAEN,gBAAI,KAAK,UAAU,KAAK;AACtB,mBAAK,KAAK;AACV,sBAAQ;AACR,sBAAQ,KAAK,cAAc,MAAM,KAAK;AAAA,YACxC,OAAO;AACL,sBAAQ,KAAK,UAAU;AAAA,YACzB;AAAA,UACF,OAAO;AACL,oBAAQ;AAAA,UACV;AAAA,QACF;AAEA,eAAO,MAAM,KAAK,OAAO,OAAO,MAAM;AAAA,MACxC;AAAA,IACF;AAAA;AAAA;;;AChHA;AAAA,gDAAAC,UAAAC,SAAA;AAAA;AAOA,IAAAA,QAAO,UAAU;AAAA,MAOf,kCAAkC,SAAU,OAAO;AACjD,cAAM,SAAS,KAAK,KAAK,OAAO;AAChC,cAAM,OAAO,KAAK,qBAAqB;AAEvC,YAAI,KAAK,UAAU,KAAK,IAAI,SAAS;AACnC,eAAK,MAAM,KAAK,IAAI,OAAO;AAC3B,eAAK,KAAK;AACV,iBAAO;AAAA,QACT;AACA,aAAK,KAAK,EAAE,OAAO,KAAK,IAAI,QAAQ;AACpC,YAAI,WAAW,KAAK,KAAK,YAAY;AACrC,cAAM,OAAO,KAAK,KAAK;AACvB,aAAK,KAAK;AACV,mBAAW,SAAS,IAAI;AACxB,cAAM,cAAc,KAAK,kBAAkB;AAC3C,cAAM,iBAAiB,KAAK,qBAAqB;AACjD,aAAK,OAAO,GAAG;AACf,cAAM,OAAO,KAAK,KAAK,EAAE,gBAAgB,MAAM,KAAK;AACpD,cAAM,OAAO,OAAO,UAAU,aAAa,gBAAgB,MAAM,IAAI;AACrE,YAAI;AAAO,eAAK,aAAa;AAC7B,eAAO;AAAA,MACT;AAAA,MAEA,sBAAsB,WAAY;AAChC,eAAO,CAAC,GAAG,GAAG,KAAK,oBAAoB,CAAC;AAAA,MAC1C;AAAA,MAEA,qBAAqB,WAAY;AAC/B,cAAM,SAAS;AAEf,YAAI,KAAK,UAAU,KAAK,IAAI,YAAY;AACtC,eAAK,KAAK;AACV,iBAAO;AAAA,QACT,WAAW,KAAK,UAAU,KAAK,IAAI,SAAS;AAC1C,eAAK,KAAK;AACV,iBAAO;AAAA,QACT;AAEA,eAAO;AAAA,MACT;AAAA,MAQA,iBAAiB,SAAU,iBAAiB,kBAAkB;AAC5D,YAAI,SAAS,CAAC;AACd,YAAI,QAAQ,CAAC;AACb,eAAO,KAAK,UAAU,KAAK,OAAO,KAAK,UAAU,KAAK;AACpD,cAAI,KAAK,UAAU,KAAK,IAAI,WAAW;AACrC,mBAAO,KAAK,KAAK,aAAa,CAAC;AAC/B;AAAA,UACF;AAEA,cAAI,KAAK,UAAU,KAAK,IAAI,eAAe;AACzC,mBAAO,KAAK,KAAK,iBAAiB,CAAC;AACnC;AAAA,UACF;AAGA,cAAI,KAAK,UAAU,KAAK,IAAI,OAAO;AACjC,qBAAS,OAAO,OAAO,KAAK,yBAAyB,CAAC;AACtD;AAAA,UACF;AAGA,cAAI,oBAAoB,KAAK,UAAU,KAAK,IAAI,QAAQ;AACtD,kBAAM,WAAW,KAAK,eAAe;AACrC,gBAAI,KAAK,OAAO,GAAG,GAAG;AACpB,mBAAK,KAAK;AAAA,YACZ;AACA,qBAAS,OAAO,OAAO,QAAQ;AAC/B;AAAA,UACF;AAEA,cAAI,KAAK,UAAU,KAAK,IAAI,aAAa;AACvC,oBAAQ,KAAK,eAAe;AAAA,UAC9B;AAEA,gBAAM,WAAW,KAAK,SAAS;AAG/B,gBAAM,QAAQ,KAAK,kBAAkB,KAAK;AAG1C,cAAI,KAAK,UAAU,KAAK,IAAI,SAAS;AACnC,kBAAM,YAAY,KAAK,mBAAmB,OAAO,KAAK;AACtD,gBAAI,KAAK,OAAO,GAAG,GAAG;AACpB,mBAAK,KAAK;AAAA,YACZ;AACA,qBAAS,OAAO,OAAO,SAAS;AAChC;AAAA,UACF;AAGA,cAAI,mBAAmB,KAAK,UAAU,KAAK,IAAI,OAAO;AACpD,iBAAK,KAAK,EAAE,OAAO,KAAK,IAAI,UAAU;AACtC,kBAAM,KAAK;AACX,kBAAM,KAAK;AAAA,UACb;AAEA,cAAI,KAAK,UAAU,KAAK,IAAI,YAAY;AAEtC,mBAAO,KAAK,KAAK,cAAc,OAAO,OAAO,OAAO,QAAQ,CAAC;AAC7D,oBAAQ,CAAC;AAAA,UACX,WACE,oBACC,KAAK,UAAU,KAAK,IAAI,cACtB,KAAK,WAAW,OAAO,KAAK,UAAU,KAAK,IAAI,eAE/C,KAAK,WAAW,QACd,KAAK,UAAU,OACd,KAAK,UAAU,KAAK,IAAI,WACxB,KAAK,UAAU,KAAK,IAAI,cACxB,KAAK,UAAU,KAAK,IAAI,eACxB,KAAK,UAAU,KAAK,IAAI,0BACxB,KAAK,UAAU,KAAK,IAAI,oBACxB,KAAK,UAAU,KAAK,IAAI,mBACxB,KAAK,UAAU,KAAK,IAAI,kBACxB,KAAK,UAAU,KAAK,IAAI,YAC9B;AAEA,kBAAM,YAAY,KAAK,mBAAmB,OAAO,KAAK;AACtD,oBAAQ,CAAC;AACT,iBAAK,OAAO,GAAG;AACf,iBAAK,KAAK;AACV,qBAAS,OAAO,OAAO,SAAS;AAAA,UAClC,OAAO;AAEL,iBAAK,MAAM;AAAA,cACT,KAAK,IAAI;AAAA,cACT,GAAI,kBAAkB,CAAC,KAAK,IAAI,UAAU,IAAI,CAAC;AAAA,cAC/C,GAAI,mBAAmB,CAAC,KAAK,IAAI,MAAM,IAAI,CAAC;AAAA,cAC5C,KAAK,IAAI;AAAA,YACX,CAAC;AAED,iBAAK,KAAK;AAAA,UACZ;AAAA,QACF;AACA,aAAK,OAAO,GAAG;AACf,aAAK,KAAK;AACV,eAAO;AAAA,MACT;AAAA,MAOA,oBAAoB,SAAU,OAAO,OAAO;AAC1C,cAAM,SAAS,KAAK,KAAK,mBAAmB;AAE5C,cAAM,aAAa,KAAK;AAAA,UAQtB,SAAS,4BAA4B;AACnC,kBAAMC,UAAS,KAAK,KAAK,UAAU;AACnC,gBAAI,WAAW;AACf,gBAAI,KAAK,UAAU,KAAK,IAAI,aAAa;AACvC,yBAAW;AACX,mBAAK,KAAK;AAAA,YACZ;AACA,kBAAM,CAAC,UAAU,IAAI,IAAI,KAAK,mBAAmB;AACjD,iBAAK,OAAO,KAAK,IAAI,UAAU;AAC/B,gBAAI,WAAW,KAAK,KAAK,YAAY;AACrC,kBAAM,OAAO,KAAK,KAAK,EAAE,UAAU,CAAC;AACpC,iBAAK,KAAK;AACV,uBAAW,SAAS,IAAI;AACxB,gBAAI,KAAK,UAAU,OAAO,KAAK,UAAU,KAAK;AAC5C,qBAAOA,QAAO,UAAU,MAAM,UAAU,UAAU,MAAM,SAAS,CAAC,CAAC;AAAA,YACrE,WAAW,KAAK,UAAU,KAAK;AAE7B,qBAAOA;AAAA,gBACL;AAAA,gBACA,KAAK,KAAK,EAAE,UAAU;AAAA,gBACtB;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA,SAAS,CAAC;AAAA,cACZ;AAAA,YACF,OAAO;AACL,mBAAK,OAAO,CAAC,KAAK,KAAK,GAAG,CAAC;AAC3B,qBAAOA,QAAO,UAAU,MAAM,UAAU,MAAM,SAAS,CAAC,CAAC;AAAA,YAC3D;AAAA,UACF;AAAA,UACA;AAAA,QACF;AAEA,eAAO,OAAO,MAAM,YAAY,KAAK;AAAA,MACvC;AAAA,MAOA,oBAAoB,SAAU,OAAO,OAAO;AAC1C,YAAI,KAAK,OAAO,KAAK,IAAI,OAAO,GAAG;AACjC,eAAK,KAAK;AAAA,QACZ;AACA,cAAM,SAAS,KAAK,KAAK,eAAe;AACxC,cAAM,QAAQ,KAAK;AAAA,UASjB,SAAS,4BAA4B;AACnC,kBAAMA,UAAS,KAAK,KAAK,UAAU;AACnC,gBAAI,YAAY;AAChB,gBAAI,QAAQ;AACZ,gBACE,KAAK,UAAU,KAAK,IAAI,YACvB,KAAK,WAAW,OAAO,KAAK,GAAG,YAAY,GAC5C;AACA,0BAAY,KAAK,KAAK,YAAY;AAClC,oBAAM,OAAO,KAAK,KAAK;AACvB,mBAAK,KAAK;AACV,0BAAY,UAAU,IAAI;AAAA,YAC5B,OAAO;AACL,mBAAK,OAAO,YAAY;AAAA,YAC1B;AACA,gBAAI,KAAK,OAAO,GAAG,GAAG;AACpB,sBAAQ,KAAK,KAAK,EAAE,UAAU;AAAA,YAChC;AACA,mBAAOA,QAAO,WAAW,KAAK;AAAA,UAChC;AAAA,UACA;AAAA,QACF;AAEA,eAAO,OAAO,MAAM,OAAO,OAAO,SAAS,CAAC,CAAC;AAAA,MAC/C;AAAA,MAQA,mBAAmB,SAAU,aAAa;AACxC,cAAM,SAAS,CAAC,IAAI,IAAI,EAAE;AAC1B,YAAI,KAAK,GAAG,gBAAgB,GAAG;AAC7B,cAAI,MAAM,GACR,MAAM;AACR,aAAG;AACD,oBAAQ,KAAK,OAAO;AAAA,cAClB,KAAK,KAAK,IAAI;AACZ,sBAAM;AACN,sBAAM;AACN;AAAA,cACF,KAAK,KAAK,IAAI;AACZ,sBAAM;AACN,sBAAM;AACN;AAAA,cACF,KAAK,KAAK,IAAI;AACZ,sBAAM;AACN,sBAAM;AACN;AAAA,cACF,KAAK,KAAK,IAAI;AACZ,sBAAM;AACN,sBAAM;AACN;AAAA,cACF,KAAK,KAAK,IAAI;AACZ,sBAAM;AACN,sBAAM;AACN;AAAA,cACF,KAAK,KAAK,IAAI;AACZ,sBAAM;AACN,sBAAM;AACN;AAAA,YACJ;AACA,gBAAI,aAAa;AACf,kBAAI,OAAO,KAAK,OAAO,GAAG;AAExB,qBAAK,OAAO,CAAC,KAAK,IAAI,UAAU,KAAK,IAAI,WAAW,CAAC;AACrD,sBAAM;AAAA,cACR,WAAW,OAAO,KAAK,OAAO,GAAG;AAE/B,qBAAK,MAAM;AACX,sBAAM;AAAA,cACR;AAAA,YACF;AACA,gBAAI,OAAO,SAAS,IAAI;AAEtB,mBAAK,MAAM;AAAA,YACb,WAAW,QAAQ,IAAI;AACrB,qBAAO,OAAO;AAAA,YAChB;AAAA,UACF,SAAS,KAAK,KAAK,EAAE,GAAG,gBAAgB;AAAA,QAC1C;AAEA,YAAI,OAAO,MAAM;AAAI,iBAAO,KAAK;AACjC,YAAI,OAAO,MAAM;AAAI,iBAAO,KAAK;AACjC,eAAO;AAAA,MACT;AAAA,MAyBA,oBAAoB,WAAY;AAC9B,YAAI,WAAW;AACf,YAAI,KAAK,UAAU,KAAK;AACtB,qBAAW;AACX,eAAK,KAAK;AAAA,QACZ;AACA,YAAI,OAAO,KAAK,WAAW;AAC3B,YAAI,YAAY,CAAC,MAAM;AACrB,eAAK;AAAA,YACH;AAAA,UACF;AAAA,QACF;AACA,YAAI,CAAC,YAAY,CAAC,MAAM;AACtB,iBAAO,CAAC,OAAO,IAAI;AAAA,QACrB;AACA,YAAI,KAAK,UAAU,KAAK;AACtB,iBAAO,CAAC,IAAI;AACZ,aAAG;AACD,iBAAK,KAAK;AACV,kBAAM,UAAU,KAAK,UAAU;AAC/B,gBAAI,CAAC,SAAS;AACZ,mBAAK,WAAW,6BAA6B;AAC7C;AAAA,YACF;AACA,iBAAK,KAAK,OAAO;AAAA,UACnB,SAAS,KAAK,UAAU;AAAA,QAC1B;AACA,eAAO,CAAC,UAAU,IAAI;AAAA,MACxB;AAAA,MAQA,sCAAsC,SAAU,OAAO;AACrD,cAAM,SAAS,KAAK,KAAK,WAAW;AACpC,YAAI,KAAK,UAAU,KAAK,IAAI,aAAa;AACvC,eAAK,MAAM,KAAK,IAAI,WAAW;AAC/B,eAAK,KAAK;AACV,iBAAO;AAAA,QACT;AACA,aAAK,KAAK,EAAE,OAAO,KAAK,IAAI,QAAQ;AACpC,YAAI,WAAW,KAAK,KAAK,YAAY;AACrC,cAAM,OAAO,KAAK,KAAK;AACvB,aAAK,KAAK;AACV,mBAAW,SAAS,IAAI;AACxB,cAAM,cAAc,KAAK,4BAA4B;AACrD,aAAK,OAAO,GAAG;AACf,cAAM,OAAO,KAAK,KAAK,EAAE,oBAAoB;AAC7C,eAAO,OAAO,UAAU,aAAa,MAAM,SAAS,CAAC,CAAC;AAAA,MACxD;AAAA,MAOA,qBAAqB,WAAY;AAC/B,YAAI,SAAS,CAAC,GACZ,QAAQ,CAAC;AAEX,eAAO,KAAK,UAAU,KAAK,OAAO,KAAK,UAAU,KAAK;AACpD,cAAI,KAAK,UAAU,KAAK,IAAI,WAAW;AACrC,mBAAO,KAAK,KAAK,aAAa,CAAC;AAC/B;AAAA,UACF;AAEA,cAAI,KAAK,UAAU,KAAK,IAAI,eAAe;AACzC,mBAAO,KAAK,KAAK,iBAAiB,CAAC;AACnC;AAAA,UACF;AAEA,gBAAM,WAAW,KAAK,SAAS;AAE/B,kBAAQ,KAAK,eAAe;AAE5B,gBAAM,QAAQ,KAAK,kBAAkB,IAAI;AAGzC,cAAI,KAAK,SAAS,KAAK,IAAI,SAAS;AAClC,kBAAM,YAAY,KAAK,mBAAmB,OAAO,KAAK;AACtD,gBAAI,KAAK,OAAO,GAAG,GAAG;AACpB,mBAAK,KAAK;AAAA,YACZ;AACA,qBAAS,OAAO,OAAO,SAAS;AAChC,oBAAQ,CAAC;AAAA,UACX,WAAW,KAAK,UAAU,KAAK,IAAI,YAAY;AAE7C,kBAAM,SAAS,KAAK;AAAA,cAClB;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AACA,mBAAO,WAAW,KAAK;AACvB,mBAAO,KAAK,MAAM;AAClB,gBAAI,KAAK,OAAO,GAAG,GAAG;AACpB,mBAAK,KAAK;AAAA,YACZ;AACA,oBAAQ,CAAC;AAAA,UACX,OAAO;AAEL,iBAAK,MAAM,CAAC,KAAK,IAAI,SAAS,KAAK,IAAI,UAAU,CAAC;AAClD,iBAAK,KAAK;AAAA,UACZ;AAAA,QACF;AACA,YAAI,KAAK,OAAO,GAAG,GAAG;AACpB,eAAK,KAAK;AAAA,QACZ;AACA,eAAO;AAAA,MACT;AAAA,MAOA,kCAAkC,WAAY;AAC5C,cAAM,SAAS,KAAK,KAAK,OAAO;AAEhC,YAAI,KAAK,UAAU,KAAK,IAAI,SAAS;AACnC,eAAK,MAAM,KAAK,IAAI,OAAO;AAC3B,eAAK,KAAK;AACV,iBAAO;AAAA,QACT;AACA,aAAK,KAAK,EAAE,OAAO,KAAK,IAAI,QAAQ;AACpC,YAAI,WAAW,KAAK,KAAK,YAAY;AACrC,cAAM,OAAO,KAAK,KAAK;AACvB,aAAK,KAAK;AACV,mBAAW,SAAS,IAAI;AACxB,aAAK,OAAO,GAAG;AACf,cAAM,OAAO,KAAK,KAAK,EAAE,gBAAgB,MAAM,KAAK;AACpD,eAAO,OAAO,UAAU,IAAI;AAAA,MAC9B;AAAA,MAOA,0BAA0B,WAAY;AAEpC,cAAM,OAAO,KAAK,KAAK,UAAU;AACjC,aAAK,OAAO,KAAK,IAAI,KAAK,KAAK,KAAK,KAAK;AACzC,cAAM,SAAS,CAAC,KAAK,oBAAoB,CAAC;AAC1C,YAAI,cAAc;AAClB,eAAO,KAAK,UAAU,KAAK;AACzB,iBAAO,KAAK,KAAK,KAAK,EAAE,oBAAoB,CAAC;AAAA,QAC/C;AACA,YAAI,KAAK,UAAU,KAAK;AACtB,wBAAc,CAAC;AAEf,iBAAO,KAAK,KAAK,EAAE,UAAU,KAAK,KAAK;AACrC,gBAAI,KAAK,UAAU;AAAK;AACxB,wBAAY,KAAK,KAAK,qBAAqB,CAAC;AAC5C,iBAAK,OAAO,GAAG;AAAA,UACjB;AACA,cAAI,KAAK,OAAO,GAAG,GAAG;AACpB,iBAAK,KAAK;AAAA,UACZ;AAAA,QACF,OAAO;AACL,cAAI,KAAK,OAAO,GAAG,GAAG;AACpB,iBAAK,KAAK;AAAA,UACZ;AAAA,QACF;AACA,eAAO,KAAK,QAAQ,WAAW;AAAA,MACjC;AAAA,MASA,sBAAsB,WAAY;AAChC,cAAM,OAAO,KAAK,KAAK;AACvB,YAAI,QAAQ;AACZ,YAAI;AAEJ,YAAI,KAAK,GAAG,YAAY,GAAG;AACzB,mBAAS,KAAK,KAAK,YAAY;AAC/B,gBAAM,aAAa,KAAK,KAAK;AAC7B,eAAK,KAAK;AACV,mBAAS,OAAO,UAAU;AAAA,QAC5B,OAAO;AACL,mBAAS,KAAK,oBAAoB;AAElC,cAAI,KAAK,UAAU,KAAK,IAAI,gBAAgB;AAC1C,iBAAK,KAAK;AACV,gBACE,KAAK,UAAU,KAAK,IAAI,YACvB,KAAK,WAAW,OAAO,KAAK,GAAG,YAAY,GAC5C;AACA,sBAAQ;AACR,uBAAS,KAAK,KAAK,YAAY;AAC/B,oBAAM,aAAa,KAAK,KAAK;AAC7B,mBAAK,KAAK;AACV,uBAAS,OAAO,UAAU;AAAA,YAC5B,OAAO;AACL,mBAAK,OAAO,KAAK,IAAI,QAAQ;AAAA,YAC/B;AAAA,UACF,OAAO;AAEL,qBAAS,OAAO;AAAA,UAClB;AAAA,QACF;AAGA,YAAI,KAAK,UAAU,KAAK,IAAI,aAAa;AACvC,iBAAO;AAAA,YACL;AAAA,YACA;AAAA,YACA;AAAA,YACA,KAAK,KAAK,EAAE,eAAe;AAAA,UAC7B;AAAA,QACF,WAAW,KAAK,UAAU,KAAK,IAAI,MAAM;AAEvC,cAAI,QAAQ;AACZ,cAAI,QAAQ;AACZ,cAAI,KAAK,KAAK,EAAE,GAAG,gBAAgB,GAAG;AACpC,oBAAQ,KAAK,kBAAkB;AAAA,UACjC;AAEA,cACE,KAAK,UAAU,KAAK,IAAI,YACvB,KAAK,WAAW,OAAO,KAAK,GAAG,YAAY,GAC5C;AACA,oBAAQ,KAAK,KAAK,YAAY;AAC9B,kBAAM,OAAO,KAAK,KAAK;AACvB,iBAAK,KAAK;AACV,oBAAQ,MAAM,IAAI;AAAA,UACpB,WAAW,UAAU,OAAO;AAE1B,iBAAK,OAAO,KAAK,IAAI,QAAQ;AAAA,UAC/B;AAEA,iBAAO,KAAK,cAAc,OAAO,QAAQ,OAAO,KAAK;AAAA,QACvD;AAGA,aAAK,OAAO,CAAC,KAAK,IAAI,MAAM,KAAK,IAAI,WAAW,CAAC;AACjD,eAAO,KAAK,cAAc,OAAO,QAAQ,MAAM,IAAI;AAAA,MACrD;AAAA,IACF;AAAA;AAAA;;;AC7kBA;AAAA,kDAAAC,UAAAC,SAAA;AAAA;AAOA,IAAAA,QAAO,UAAU;AAAA,MAIf,cAAc,WAAY;AACxB,cAAM,OAAO,KAAK,KAAK;AACvB,YAAI,SAAS,KAAK,IAAI;AAAA,UACpB,KAAK,UAAU,GAAG,CAAC,MAAM,OAAO,iBAAiB;AAAA,UACjD;AAAA,UACA;AAAA,QACF;AACA,cAAM,SAAS,KAAK,MAAM,OAAO;AAEjC,cAAM,OAAO,KAAK;AAClB,aAAK,OAAO;AAAA,UACV,KAAK,MAAM,OAAO;AAAA,UAClB,KAAK,MAAM,OAAO;AAAA,UAClB,KAAK,MAAM;AAAA,QACb;AACA,aAAK,IAAI;AACT,iBAAS,OAAO,IAAI;AACpB,eAAO,SAAS;AAChB,aAAK,OAAO;AACZ,eAAO;AAAA,MACT;AAAA,MAIA,kBAAkB,WAAY;AAC5B,YAAI,SAAS,KAAK,IAAI,QAAQ,gBAAgB,MAAM,IAAI;AACxD,cAAM,SAAS,KAAK,MAAM,OAAO;AACjC,cAAM,OAAO,KAAK,KAAK;AACvB,cAAM,OAAO,KAAK;AAClB,aAAK,OAAO;AAAA,UACV,KAAK,MAAM,OAAO;AAAA,UAClB,KAAK,MAAM,OAAO;AAAA,UAClB,KAAK,MAAM;AAAA,QACb;AACA,aAAK,IAAI;AACT,iBAAS,OAAO,IAAI;AACpB,eAAO,SAAS;AAChB,aAAK,OAAO;AACZ,eAAO;AAAA,MACT;AAAA,IACF;AAAA;AAAA;;;ACnDA;AAAA,+CAAAC,UAAAC,SAAA;AAAA;AAOA,IAAAA,QAAO,UAAU;AAAA,MACf,WAAW,SAAU,MAAM;AACzB,cAAM,SAAS,KAAK,KAAK;AACzB,YAAI,KAAK,UAAU,KAAK;AACtB,cAAI,CAAC,MAAM;AACT,mBAAO,KAAK,KAAK,EAAE,UAAU;AAAA,UAC/B;AACA,iBAAO,OAAO,UAAU,IAAI;AAAA,QAC9B;AACA,YAAI,CAAC,MAAM;AACT,iBAAO,KAAK,eAAe;AAAA,QAC7B;AAEA,YAAI,KAAK,UAAU,KAAK;AACtB,iBAAO,OAAO,OAAO,KAAK,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QACzD;AACA,YAAI,KAAK,UAAU,KAAK;AACtB,iBAAO,OAAO,OAAO,KAAK,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QACzD;AACA,YAAI,KAAK,UAAU,KAAK;AACtB,iBAAO,OAAO,OAAO,KAAK,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QACzD;AACA,YAAI,KAAK,UAAU,KAAK;AACtB,iBAAO,OAAO,OAAO,KAAK,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QACzD;AACA,YAAI,KAAK,UAAU,KAAK;AACtB,iBAAO,OAAO,OAAO,KAAK,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QACzD;AACA,YAAI,KAAK,UAAU,KAAK;AACtB,iBAAO,OAAO,OAAO,KAAK,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QACzD;AACA,YAAI,KAAK,UAAU,KAAK;AACtB,iBAAO,OAAO,OAAO,KAAK,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QACzD;AACA,YAAI,KAAK,UAAU,KAAK;AACtB,iBAAO,OAAO,OAAO,KAAK,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QACzD;AACA,YAAI,KAAK,UAAU,KAAK;AACtB,iBAAO,OAAO,OAAO,KAAK,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QACzD;AACA,YAAI,KAAK,UAAU,KAAK,IAAI,OAAO;AACjC,iBAAO,OAAO,OAAO,MAAM,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QAC1D;AACA,YAAI,KAAK,UAAU,KAAK,IAAI,MAAM;AAChC,iBAAO,OAAO,OAAO,MAAM,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QAC1D;AACA,YAAI,KAAK,UAAU,KAAK,IAAI,MAAM;AAChC,iBAAO,OAAO,OAAO,MAAM,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QAC1D;AAEA,YAAI,KAAK,UAAU,KAAK,IAAI,cAAc;AACxC,iBAAO,OAAO,OAAO,MAAM,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QAC1D;AACA,YAAI,KAAK,UAAU,KAAK,IAAI,cAAc;AACxC,iBAAO,OAAO,OAAO,MAAM,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QAC1D;AACA,YAAI,KAAK,UAAU,KAAK,IAAI,eAAe;AACzC,iBAAO,OAAO,OAAO,MAAM,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QAC1D;AACA,YAAI,KAAK,UAAU,KAAK,IAAI,eAAe;AACzC,iBAAO,OAAO,OAAO,OAAO,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QAC3D;AACA,YAAI,KAAK,UAAU,KAAK,IAAI,eAAe;AACzC,iBAAO,OAAO,OAAO,OAAO,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QAC3D;AACA,YAAI,KAAK,UAAU,KAAK,IAAI,gBAAgB;AAC1C,iBAAO,OAAO,OAAO,OAAO,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QAC3D;AACA,YAAI,KAAK,UAAU,KAAK,IAAI,oBAAoB;AAC9C,iBAAO,OAAO,OAAO,OAAO,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QAC3D;AACA,YAAI,KAAK,UAAU,KAAK,IAAI,YAAY;AACtC,iBAAO,OAAO,OAAO,MAAM,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QAC1D;AACA,YAAI,KAAK,UAAU,KAAK,IAAI,gBAAgB;AAC1C,iBAAO,OAAO,OAAO,MAAM,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QAC1D;AACA,YAAI,KAAK,UAAU,KAAK;AACtB,iBAAO,OAAO,OAAO,KAAK,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QACzD;AACA,YAAI,KAAK,UAAU,KAAK;AACtB,iBAAO,OAAO,OAAO,KAAK,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QACzD;AACA,YAAI,KAAK,UAAU,KAAK,IAAI,uBAAuB;AACjD,iBAAO,OAAO,OAAO,MAAM,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QAC1D;AACA,YAAI,KAAK,UAAU,KAAK,IAAI,uBAAuB;AACjD,iBAAO,OAAO,OAAO,MAAM,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QAC1D;AACA,YAAI,KAAK,UAAU,KAAK,IAAI,aAAa;AACvC,iBAAO,OAAO,OAAO,OAAO,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QAC3D;AACA,YAAI,KAAK,UAAU,KAAK,IAAI,cAAc;AACxC,iBAAO;AAAA,YACL;AAAA,YACA;AAAA,YACA;AAAA,YACA,KAAK,KAAK,EAAE,0BAA0B;AAAA,UACxC;AACA,cACE,KAAK,UAAU,OACf,KAAK,UAAU,KAAK,IAAI,iBACxB,KAAK,UAAU,KAAK,KACpB;AACA,mBAAO,KAAK,UAAU,IAAI;AAAA,UAC5B;AAAA,QACF;AAIA,YAAI,KAAK,UAAU,KAAK,IAAI,YAAY;AACtC,iBAAO,OAAO,OAAO,MAAM,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QAC1D;AAIA,YAAI,KAAK,UAAU,KAAK;AACtB,cAAI,UAAU;AACd,cAAI,KAAK,KAAK,EAAE,UAAU,KAAK;AAC7B,sBAAU,KAAK,UAAU;AAAA,UAC3B;AACA,eAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAC9B,iBAAO,OAAO,SAAS,MAAM,SAAS,KAAK,UAAU,CAAC;AAAA,QACxD,OAAO;AAEL,iBAAO,QAAQ,IAAI;AAAA,QACrB;AAEA,eAAO;AAAA,MACT;AAAA,MAKA,gBAAgB,SAAU,MAAM;AAC9B,eAAO,KAAK,KAAK,MAAM,EAAE,MAAM,KAAK,KAAK,GAAG,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,MACrE;AAAA,MAKA,qBAAqB,WAAY;AAC/B,eAAO,KAAK,UAAU;AAAA,MACxB;AAAA,MAKA,sBAAsB,WAAY;AAChC,eAAO,KAAK,mBAAmB,KAAK,qBAAqB,GAAG;AAAA,MAC9D;AAAA,MAKA,iCAAiC,WAAY;AAC3C,YAAI,SAAS;AACb,gBAAQ,KAAK,OAAO;AAAA,UAClB,KAAK,KAAK,IAAI;AACZ;AACE,uBAAS,KAAK,KAAK,OAAO;AAC1B,kBAAI,KAAK,KAAK,EAAE,OAAO,GAAG,GAAG;AAC3B,qBAAK,KAAK;AAAA,cACZ;AACA,oBAAM,YAAY,KAAK,qBAAqB;AAC5C,kBAAI,KAAK,OAAO,GAAG,GAAG;AACpB,qBAAK,KAAK;AAAA,cACZ;AACA,uBAAS,OAAO,SAAS;AAAA,YAC3B;AACA;AAAA,UACF,KAAK,KAAK,IAAI;AACZ;AACE,uBAAS,KAAK,KAAK,OAAO;AAC1B,kBAAI,KAAK,KAAK,EAAE,OAAO,GAAG,GAAG;AAC3B,qBAAK,KAAK;AAAA,cACZ;AACA,oBAAM,aAAa,KAAK,UAAU;AAClC,kBAAI,KAAK,OAAO,GAAG,GAAG;AACpB,qBAAK,KAAK;AAAA,cACZ;AACA,uBAAS,OAAO,UAAU;AAAA,YAC5B;AACA;AAAA,UACF,KAAK,KAAK,IAAI;AACZ,qBAAS,KAAK,KAAK,SAAS,EAAE,OAAO,OAAO,KAAK,KAAK,EAAE,UAAU,CAAC;AACnE;AAAA,UACF,KAAK,KAAK,IAAI;AACZ,qBAAS,KAAK,KAAK,SAAS,EAAE,MAAM,OAAO,KAAK,KAAK,EAAE,UAAU,CAAC;AAClE;AAAA,UACF,KAAK,KAAK,IAAI;AACZ;AACE,uBAAS,KAAK,KAAK,MAAM;AACzB,kBAAI,KAAK,KAAK,EAAE,OAAO,GAAG,GAAG;AAC3B,qBAAK,KAAK;AAAA,cACZ;AACA,oBAAM,OAAO,KAAK,UAAU;AAC5B,kBAAI,KAAK,OAAO,GAAG,GAAG;AACpB,qBAAK,KAAK;AAAA,cACZ;AACA,uBAAS,OAAO,IAAI;AAAA,YACtB;AACA;AAAA,UACF,KAAK,KAAK,IAAI;AACZ,qBAAS,KAAK,KAAK,SAAS,EAAE,OAAO,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AAClE;AAAA,UACF,KAAK,KAAK,IAAI;AACZ,qBAAS,KAAK,KAAK,SAAS,EAAE,MAAM,MAAM,KAAK,KAAK,EAAE,UAAU,CAAC;AACjE;AAAA,QACJ;AAEA,eAAO;AAAA,MACT;AAAA,MAKA,oBAAoB,SAAU,WAAW;AACvC,YAAI,KAAK,UAAU,WAAW;AAC5B,iBAAO,KAAK,UAAU;AAAA,QACxB;AAEA,eAAO;AAAA,MACT;AAAA,MAKA,gBAAgB,WAAY;AAC1B,YAAI,aAAa;AAEjB,YAAI,KAAK,UAAU,KAAK;AACtB,eAAK,KAAK;AACV,uBAAa,KAAK,mBAAmB,GAAG;AACxC,eAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAAA,QAChC;AAEA,eAAO;AAAA,MACT;AAAA,MAQA,gBAAgB,WAAY;AAC1B,YAAI,QACF,MACA,QAAQ,CAAC;AACX,YAAI,KAAK,UAAU,KAAK;AACtB,iBAAO,KAAK,KAAK,OAAO,EAAE,KAAK,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QACxD;AACA,YAAI,KAAK,UAAU,KAAK;AACtB,iBAAO,KAAK,KAAK,OAAO,EAAE,KAAK,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QACxD;AACA,YAAI,KAAK,UAAU,KAAK;AACtB,iBAAO,KAAK,KAAK,OAAO,EAAE,KAAK,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QACxD;AACA,YAAI,KAAK,UAAU,KAAK;AACtB,iBAAO,KAAK,KAAK,OAAO,EAAE,KAAK,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QACxD;AAEA,YAAI,KAAK,UAAU,KAAK;AACtB,iBAAO,KAAK,KAAK,EAAE,UAAU;AAC7B,eAAK,0BAA0B;AAC/B,eAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAC9B,iBAAO,KAAK,qBAAqB,IAAI;AAAA,QACvC;AAEA,YAAI,KAAK,UAAU,KAAK;AAEtB,iBAAO,KAAK,qBAAqB,GAAG;AAAA,QACtC;AAEA,YAAI,KAAK,UAAU,KAAK,IAAI,QAAQ;AAClC,cAAI,SAAS;AACb,gBAAM,UAAU,KAAK;AACrB,mBAAS,KAAK,KAAK,MAAM;AACzB,cAAI,CAAC,SAAS;AACZ,qBAAS,KAAK,KAAK,QAAQ;AAAA,UAC7B;AACA,cAAI,KAAK,KAAK,EAAE,OAAO,GAAG,GAAG;AAC3B,iBAAK,KAAK;AAAA,UACZ;AAEA,cAAI,CAAC,KAAK;AAAW,iBAAK,YAAY;AAGtC,gBAAM,aAAa,KAAK,qBAAqB,KAAK;AAClD,cAAI,KAAK,OAAO,GAAG,GAAG;AACpB,iBAAK,KAAK;AAAA,UACZ;AAGA,cAAI,UAAU;AACd,mBAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK;AAC1C,gBAAI,WAAW,OAAO,QAAQ,WAAW,GAAG,SAAS,QAAQ;AAC3D,wBAAU;AACV;AAAA,YACF;AAAA,UACF;AACA,cAAI,CAAC,SAAS;AAEZ,iBAAK;AAAA,cACH,kDACE,KAAK,MAAM,OAAO;AAAA,YACtB;AAAA,UACF;AAGA,cAAI,CAAC,SAAS;AACZ,iBAAK,YAAY;AACjB,gBAAI,KAAK,OAAO,GAAG,GAAG;AACpB,qBAAO;AAAA,gBACL,OAAO,YAAY,KAAK;AAAA,gBACxB,KAAK,KAAK,EAAE,UAAU;AAAA,gBACtB;AAAA,cACF;AAAA,YACF,OAAO;AAGL,qBAAO,OAAO,YAAY,KAAK;AAAA,YACjC;AAAA,UACF,OAAO;AACL,mBAAO,OAAO,YAAY,KAAK;AAAA,UACjC;AAAA,QACF;AAEA,YAAI,KAAK,UAAU,KAAK,IAAI,aAAa;AACvC,kBAAQ,KAAK,eAAe;AAAA,QAC9B;AAEA,YAAI,KAAK,UAAU,KAAK,IAAI,SAAS;AACnC,iBAAO,KAAK,KAAK,OAAO,EAAE,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QACnD;AAEA,gBAAQ,KAAK,OAAO;AAAA,UAClB,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,KAAK,KAAK,EAAE,KAAK,KAAK,KAAK,EAAE,cAAc,OAAO,KAAK,CAAC;AAAA,UAEtE,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,KAAK,KAAK,EAAE,KAAK,KAAK,KAAK,EAAE,cAAc,OAAO,KAAK,CAAC;AAAA,UAEtE,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,cAAc;AAAA,UAE5B,KAAK,KAAK,IAAI;AAAA,UACd,KAAK,KAAK,IAAI;AAAA,UACd,KAAK,KAAK,IAAI;AAAA,UACd,KAAK,KAAK,IAAI;AAAA,UACd,KAAK,KAAK,IAAI;AAAA,UACd,KAAK,KAAK,IAAI;AAAA,UACd,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,gCAAgC;AAAA,UAE9C,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,sBAAsB;AAAA,UACpC,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,eAAe,KAAK;AAAA,UAElC,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,eAAe,OAAO;AAAA,UAEpC,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK;AAAA,cACV,KAAK,KAAK,EAAE,QAAQ,QAAQ,MAAM,KAAK,WAAW;AAAA,YACpD;AAAA,UAEF,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,eAAe,OAAO;AAAA,UAEpC,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,eAAe,QAAQ;AAAA,UAErC,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,eAAe,MAAM;AAAA,UAEnC,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,eAAe,OAAO;AAAA,UAEpC,KAAK,KAAK,IAAI,SAAS;AACrB,gBAAI,KAAK,UAAU,KAAK;AACtB,mBAAK,WAAW,kDAAkD;AAAA,YACpE;AACA,kBAAMC,UAAS,KAAK,KAAK,OAAO;AAChC,kBAAMC,QAAO,KAAK,KAAK,EAAE,UAAU;AACnC,mBAAOD,QAAOC,KAAI;AAAA,UACpB;AAAA,UACA,KAAK,KAAK,IAAI,QAAQ;AACpB,kBAAM,SAAS,KAAK,MAAM,OAAO,YAAY,MAAM;AACnD,qBAAS,KAAK,KAAK,MAAM;AACzB,iBAAK,KAAK;AACV,kBAAM,aAAa,KAAK,eAAe;AACvC,mBAAO,OAAO,YAAY,MAAM;AAAA,UAClC;AAAA,UAEA,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,KAAK,OAAO,EAAE,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,UAGnD,KAAK,KAAK,IAAI,SAAS;AACrB,gBAAI,QAAQ;AACZ,gBAAI,MAAM;AACV,qBAAS,KAAK,KAAK,OAAO;AAC1B,gBAAI,KAAK,KAAK,EAAE,GAAG,MAAM,GAAG;AAE1B,sBAAQ,KAAK,UAAU;AACvB,kBAAI,KAAK,UAAU,KAAK,IAAI,gBAAgB;AAE1C,sBAAM;AACN,wBAAQ,KAAK,KAAK,EAAE,UAAU;AAAA,cAChC;AAAA,YACF;AACA,mBAAO,OAAO,OAAO,GAAG;AAAA,UAC1B;AAAA,UAGA,KAAK,KAAK,IAAI;AACZ,qBAAS,KAAK,KAAK,WAAW;AAC9B,mBAAO,KAAK,KAAK,EAAE,UAAU;AAC7B,mBAAO,OAAO,IAAI;AAAA,UAEpB,KAAK,KAAK,IAAI;AAAA,UACd,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,qBAAqB,QAAW,KAAK;AAAA,UAEnD,KAAK,KAAK,IAAI,UAAU;AACtB,kBAAM,SAAS,CAAC,KAAK,OAAO,KAAK,MAAM,SAAS,CAAC;AACjD,iBAAK,KAAK;AACV,gBACE,KAAK,UAAU,KAAK,IAAI,cACvB,KAAK,WAAW,OAAO,KAAK,UAAU,KAAK,IAAI,MAChD;AAEA,qBAAO,KAAK,qBAAqB,CAAC,GAAG,GAAG,CAAC,GAAG,KAAK;AAAA,YACnD,OAAO;AAEL,mBAAK,MAAM,OAAO,KAAK,MAAM;AAC7B,mBAAK,KAAK;AAAA,YACZ;AAAA,UACF;AAAA,QACF;AAGA,YAAI,KAAK,GAAG,UAAU,GAAG;AACvB,mBAAS,KAAK,KAAK;AACnB,iBAAO,KAAK,cAAc,OAAO,KAAK;AAItC,gBAAM,UACJ,KAAK,SAAS,gBACb,KAAK,SAAS,kBAAkB,KAAK,OAAO,SAAS;AAGxD,kBAAQ,KAAK,OAAO;AAAA,YAClB,KAAK,KAAK;AACR,kBAAI;AAAS,qBAAK,MAAM,UAAU;AAClC,kBAAI,KAAK,KAAK,EAAE,SAAS,KAAK;AAC5B,uBAAO,KAAK,eAAe,QAAQ,IAAI;AAAA,cACzC;AACA,qBAAO,OAAO,UAAU,MAAM,KAAK,UAAU,GAAG,GAAG;AAAA,YACrD;AAAA,YAGA,KAAK,KAAK,IAAI;AACZ,kBAAI;AAAS,qBAAK,MAAM,UAAU;AAClC,qBAAO,OAAO,UAAU,MAAM,KAAK,KAAK,EAAE,UAAU,GAAG,IAAI;AAAA,YAE7D,KAAK,KAAK,IAAI;AACZ,kBAAI;AAAS,qBAAK,MAAM,UAAU;AAClC,qBAAO,OAAO,UAAU,MAAM,KAAK,KAAK,EAAE,UAAU,GAAG,IAAI;AAAA,YAE7D,KAAK,KAAK,IAAI;AACZ,kBAAI;AAAS,qBAAK,MAAM,UAAU;AAClC,qBAAO,OAAO,UAAU,MAAM,KAAK,KAAK,EAAE,UAAU,GAAG,IAAI;AAAA,YAE7D,KAAK,KAAK,IAAI;AACZ,kBAAI;AAAS,qBAAK,MAAM,UAAU;AAClC,qBAAO,OAAO,UAAU,MAAM,KAAK,KAAK,EAAE,UAAU,GAAG,KAAK;AAAA,YAE9D,KAAK,KAAK,IAAI;AACZ,kBAAI;AAAS,qBAAK,MAAM,UAAU;AAClC,qBAAO,OAAO,UAAU,MAAM,KAAK,KAAK,EAAE,UAAU,GAAG,IAAI;AAAA,YAE7D,KAAK,KAAK,IAAI;AACZ,kBAAI;AAAS,qBAAK,MAAM,UAAU;AAClC,qBAAO,OAAO,UAAU,MAAM,KAAK,KAAK,EAAE,UAAU,GAAG,IAAI;AAAA,YAE7D,KAAK,KAAK,IAAI;AACZ,kBAAI;AAAS,qBAAK,MAAM,UAAU;AAClC,qBAAO,OAAO,UAAU,MAAM,KAAK,KAAK,EAAE,UAAU,GAAG,IAAI;AAAA,YAE7D,KAAK,KAAK,IAAI;AACZ,kBAAI;AAAS,qBAAK,MAAM,UAAU;AAClC,qBAAO,OAAO,UAAU,MAAM,KAAK,KAAK,EAAE,UAAU,GAAG,IAAI;AAAA,YAE7D,KAAK,KAAK,IAAI;AACZ,kBAAI;AAAS,qBAAK,MAAM,UAAU;AAClC,qBAAO,OAAO,UAAU,MAAM,KAAK,KAAK,EAAE,UAAU,GAAG,IAAI;AAAA,YAE7D,KAAK,KAAK,IAAI;AACZ,kBAAI;AAAS,qBAAK,MAAM,UAAU;AAClC,qBAAO,OAAO,UAAU,MAAM,KAAK,KAAK,EAAE,UAAU,GAAG,IAAI;AAAA,YAE7D,KAAK,KAAK,IAAI;AACZ,kBAAI;AAAS,qBAAK,MAAM,UAAU;AAClC,qBAAO,OAAO,UAAU,MAAM,KAAK,KAAK,EAAE,UAAU,GAAG,KAAK;AAAA,YAE9D,KAAK,KAAK,IAAI;AACZ,kBAAI;AAAS,qBAAK,MAAM,UAAU;AAClC,qBAAO,OAAO,UAAU,MAAM,KAAK,KAAK,EAAE,UAAU,GAAG,KAAK;AAAA,YAE9D,KAAK,KAAK,IAAI;AACZ,kBAAI;AAAS,qBAAK,MAAM,UAAU;AAClC,qBAAO,OAAO,UAAU,MAAM,KAAK,KAAK,EAAE,UAAU,GAAG,KAAK;AAAA,YAE9D,KAAK,KAAK,IAAI;AACZ,kBAAI;AAAS,qBAAK,MAAM,UAAU;AAClC,mBAAK,KAAK;AACV,qBAAO,OAAO,QAAQ,KAAK,IAAI;AAAA,YACjC,KAAK,KAAK,IAAI;AACZ,kBAAI;AAAS,qBAAK,MAAM,UAAU;AAClC,mBAAK,KAAK;AACV,qBAAO,OAAO,QAAQ,KAAK,IAAI;AAAA,YACjC;AAEE,qBAAO,QAAQ,IAAI;AAAA,UACvB;AAAA,QACF,WAAW,KAAK,GAAG,QAAQ,GAAG;AAC5B,mBAAS,KAAK,KAAK;AACnB,iBAAO,KAAK,YAAY;AACxB,cAAI,KAAK,SAAS,WAAW,KAAK,aAAa,KAAK,UAAU,KAAK;AAEjE,kBAAM,OAAO,KAAK,cAAc,IAAI;AACpC,gBAAI,KAAK;AAAK,mBAAK,MAAM,KAAK;AAC9B,kBAAM,QAAQ,KAAK,KAAK,EAAE,UAAU;AACpC,mBAAO,OAAO,UAAU,MAAM,OAAO,GAAG;AAAA,UAC1C,OAAO;AAEL,mBAAO,QAAQ,IAAI;AAAA,UACrB;AAEA,iBAAO,KAAK,qBAAqB,IAAI;AAAA,QACvC,OAAO;AACL,eAAK,MAAM,MAAM;AACjB,eAAK,KAAK;AAAA,QACZ;AAGA,eAAO;AAAA,MACT;AAAA,MAKA,eAAe,SAAU,OAAO;AAC9B,cAAM,iBAAiB,MAAM,MAAM,IAAI,CAAC,UAAU;AAChD,cACE,MAAM,SACN,MAAM,MAAM,SAAS,WACrB,MAAM,MAAM,WACZ;AACA,kBAAM,QAAQ,KAAK,cAAc,MAAM,KAAK;AAAA,UAC9C;AACA,iBAAO;AAAA,QACT,CAAC;AACD,cAAM,OAAO,KAAK,KAAK,MAAM,EAAE,gBAAgB,IAAI;AACnD,YAAI,MAAM;AAAK,eAAK,MAAM,MAAM;AAChC,YAAI,MAAM;AAAiB,eAAK,kBAAkB,MAAM;AACxD,YAAI,MAAM;AAAkB,eAAK,mBAAmB,MAAM;AAC1D,eAAO;AAAA,MACT;AAAA,MAMA,gBAAgB,SAAU,QAAQ,MAAM;AACtC,aAAK,KAAK;AACV,YAAI;AACJ,YAAI,KAAK,UAAU,KAAK,IAAI,OAAO;AACjC,cAAI,KAAK,WAAW,KAAK;AACvB,iBAAK,MAAM;AAAA,UACb;AACA,kBAAQ,KAAK,cAAc;AAAA,QAC7B,OAAO;AACL,kBAAQ,KAAK,cAAc,OAAO,KAAK;AAAA,QACzC;AAEA,eAAO,OAAO,aAAa,MAAM,KAAK;AAAA,MACxC;AAAA,MAiBA,sBAAsB,SAAU,OAAO,OAAO;AAC5C,YAAI,KAAK,UAAU,KAAK,IAAI,YAAY;AACtC,gBAAMD,UAAS,KAAK,cAAc,MAAM,OAAO,KAAK;AACpD,UAAAA,QAAO,aAAa;AACpB,iBAAOA;AAAA,QACT;AAEA,YAAI,CAAC,KAAK,WAAW,KAAK;AACxB,eAAK,WAAW,iCAAiC;AAAA,QACnD;AAEA,cAAM,OAAO,KAAK,KAAK,WAAW;AAElC,YAAI,KAAK,OAAO,KAAK,IAAI,IAAI;AAAG,eAAK,KAAK;AAE1C,cAAM,QAAQ,KAAK,aAAa;AAEhC,YAAI,KAAK,OAAO,GAAG;AAAG,eAAK,KAAK;AAChC,cAAM,SAAS,KAAK,oBAAoB;AACxC,YAAI,KAAK,OAAO,GAAG;AAAG,eAAK,KAAK;AAChC,YAAI,WAAW;AACf,YAAI,aAAa;AACjB,YAAI,KAAK,UAAU,KAAK;AACtB,cAAI,KAAK,KAAK,EAAE,UAAU,KAAK;AAC7B,uBAAW;AACX,iBAAK,KAAK;AAAA,UACZ;AACA,uBAAa,KAAK,WAAW;AAAA,QAC/B;AACA,YAAI,KAAK,OAAO,KAAK,IAAI,cAAc;AAAG,eAAK,KAAK;AACpD,cAAM,OAAO,KAAK,UAAU;AAC5B,cAAM,SAAS;AAAA,UACb;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,QAAQ,OAAO;AAAA,QACjB;AACA,eAAO,aAAa;AACpB,eAAO;AAAA,MACT;AAAA,MAEA,uBAAuB,WAAY;AACjC,cAAM,OAAO,KAAK,KAAK,OAAO;AAC9B,aAAK,OAAO,KAAK,IAAI,OAAO,KAAK,KAAK,KAAK;AAC3C,YAAI,KAAK,UAAU,KAAK;AACtB,eAAK,WAAW,+CAA+C;AAAA,QACjE;AACA,YAAI,OAAO;AACX,YAAI,OAAO,CAAC;AACZ,YAAI,KAAK,OAAO,GAAG;AAAG,eAAK,KAAK;AAChC,eAAO,KAAK,UAAU;AACtB,YAAI,KAAK,OAAO,GAAG;AAAG,eAAK,KAAK;AAChC,YAAI,KAAK,OAAO,GAAG;AAAG,eAAK,KAAK;AAChC,eAAO,KAAK,gBAAgB;AAC5B,YAAI,KAAK,OAAO,GAAG;AAAG,eAAK,KAAK;AAChC,eAAO,KAAK,MAAM,IAAI;AAAA,MACxB;AAAA,MAEA,iBAAiB,WAAY;AAC3B,eAAO,KAAK,UAAU,MAAM,KAAK,eAAe,GAAG,KAAK,IAAI;AAAA,MAC9D;AAAA,MAEA,gBAAgB,WAAY;AAC1B,YAAI,KAAK,UAAU,KAAK;AACtB;AAAA,QACF;AACA,eAAO,KAAK,KAAK,UAAU,EAAE,KAAK,qBAAqB,GAAG,KAAK,UAAU,CAAC;AAAA,MAC5E;AAAA,MAEA,sBAAsB,WAAY;AAChC,YAAI,QAAQ,CAAC;AACb,YAAI,KAAK,UAAU,KAAK,IAAI,WAAW;AACrC,kBAAQ;AACR,eAAK,KAAK;AAAA,QACZ,OAAO;AACL,gBAAM,KAAK,KAAK,UAAU,CAAC;AAC3B,iBAAO,KAAK,UAAU,KAAK;AACzB,iBAAK,KAAK;AACV,gBAAI,KAAK,UAAU,KAAK,IAAI,gBAAgB;AAC1C,mBAAK,KAAK;AACV,qBAAO;AAAA,YACT;AACA,kBAAM,KAAK,KAAK,UAAU,CAAC;AAAA,UAC7B;AAAA,QACF;AACA,YAAI,KAAK,OAAO,KAAK,IAAI,cAAc,GAAG;AACxC,eAAK,KAAK;AAAA,QACZ;AACA,eAAO;AAAA,MACT;AAAA,MAEA,iBAAiB;AACf,cAAM,OAAO,KAAK,KAAK;AACvB,YAAI,OAAO,CAAC;AACZ,aAAK,KAAK;AACV,YAAI,KAAK,UAAU,KAAK;AACtB,iBAAO,KAAK,mBAAmB;AAAA,QACjC;AACA,eAAO,KAAK,KAAK,WAAW,EAAE,MAAM,IAAI;AAAA,MAC1C;AAAA,MACA,iBAAiB;AACf,cAAM,OAAO,CAAC;AACd,YAAI,KAAK,UAAU,KAAK,IAAI,aAAa;AACvC,aAAG;AACD,kBAAM,SAAS,KAAK,KAAK,WAAW,EAAE,CAAC,CAAC;AACxC,iBAAK,KAAK;AACV,mBAAO,MAAM,KAAK,KAAK,eAAe,CAAC;AACvC,mBAAO,KAAK,UAAU,KAAK;AACzB,mBAAK,KAAK;AACV,kBAAI,KAAK,UAAU;AAAK,uBAAO,MAAM,KAAK,KAAK,eAAe,CAAC;AAAA,YACjE;AACA,iBAAK,KAAK,MAAM;AAChB,iBAAK,OAAO,GAAG;AACf,iBAAK,KAAK;AAAA,UACZ,SAAS,KAAK,UAAU,KAAK,IAAI;AAAA,QACnC;AACA,eAAO;AAAA,MACT;AAAA,MAQA,eAAe,WAAY;AACzB,cAAM,SAAS,KAAK,KAAK,KAAK;AAC9B,aAAK,OAAO,KAAK,IAAI,KAAK,KAAK,KAAK,KAAK;AACzC,YAAI,OAAO,CAAC;AACZ,cAAM,QAAQ,KAAK,eAAe;AAClC,YAAI,KAAK,UAAU,KAAK,IAAI,SAAS;AACnC,gBAAM,OAAO,KAAK,KAAK,OAAO;AAE9B,cAAI,KAAK,KAAK,EAAE,UAAU,KAAK;AAC7B,mBAAO,KAAK,mBAAmB;AAAA,UACjC;AACA,gBAAM,cAAc,KAAK,kBAAkB;AAC3C,gBAAM,iBAAiB,KAAK,qBAAqB;AACjD,cAAI,OAAO;AACX,cAAI,KAAK,OAAO,GAAG,GAAG;AACpB,mBAAO,KAAK,KAAK,EAAE,gBAAgB,MAAM,KAAK;AAAA,UAChD;AACA,gBAAM,WAAW,KAAK,MAAM,aAAa,gBAAgB,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC;AACxE,mBAAS,aAAa;AACtB,iBAAO,OAAO,UAAU,IAAI;AAAA,QAC9B;AAEA,YAAI,OAAO,KAAK,oBAAoB;AACpC,eAAO,KAAK,UAAU,KAAK;AACzB,gBAAM,aAAa,KAAK,KAAK,cAAc;AAC3C,gBAAM,SAAS,KAAK,KAAK,EAAE,uBAAuB;AAClD,eAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAC9B,iBAAO,WAAW,MAAM,MAAM;AAAA,QAChC;AACA,YAAI,KAAK,UAAU,KAAK;AACtB,iBAAO,KAAK,mBAAmB;AAAA,QACjC;AACA,eAAO,OAAO,MAAM,IAAI;AAAA,MAC1B;AAAA,MAOA,qBAAqB,WAAY;AAC/B,YACE,KAAK,UAAU,KAAK,IAAI,kBACxB,KAAK,UAAU,KAAK,IAAI,mBACxB,KAAK,UAAU,KAAK,IAAI,oBACxB,KAAK,UAAU,KAAK,IAAI,0BACxB,KAAK,UAAU,KAAK,IAAI,YACxB,KAAK,UAAU,KAAK,IAAI,aACxB;AACA,cAAI,SAAS,KAAK,oBAAoB,IAAI;AAC1C,cAAI,KAAK,UAAU,KAAK,IAAI,gBAAgB;AAC1C,qBAAS,KAAK,mBAAmB,MAAM;AAAA,UACzC;AACA,iBAAO;AAAA,QACT,WAAW,KAAK,GAAG,UAAU,GAAG;AAC9B,iBAAO,KAAK,cAAc,MAAM,KAAK;AAAA,QACvC,OAAO;AACL,eAAK,OAAO,CAAC,KAAK,IAAI,UAAU,UAAU,CAAC;AAAA,QAC7C;AAAA,MACF;AAAA,MACA,sBAAsB,SAAU,MAAM;AACpC,eAAO,KAAK,UAAU,KAAK,KAAK;AAC9B,cACE,KAAK,UAAU,KAAK,IAAI,qBACxB,KAAK,UAAU,KAAK,IAAI,gBACxB;AACA,mBAAO,KAAK,8BAA8B,MAAM,OAAO,OAAO,IAAI;AAAA,UACpE,WAAW,KAAK,UAAU,KAAK,IAAI,gBAAgB,KAAK,UAAU,KAAK;AACrE,mBAAO,KAAK,oBAAoB,IAAI;AAAA,UACtC,WAAW,KAAK,UAAU,KAAK;AAE7B,mBAAO,KAAK,KAAK,MAAM,EAAE,MAAM,KAAK,mBAAmB,CAAC;AAAA,UAC1D,OAAO;AACL,mBAAO;AAAA,UACT;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAAA,IACF;AAAA;AAAA;;;ACrzBA;AAAA,+CAAAE,UAAAC,SAAA;AAAA;AAOA,IAAAA,QAAO,UAAU;AAAA,MAOf,iCAAiC,SAAU,OAAO;AAChD,cAAM,SAAS,KAAK,KAAK,MAAM;AAE/B,YAAI,CAAC,KAAK,OAAO,KAAK,IAAI,MAAM,GAAG;AACjC,iBAAO;AAAA,QACT;AACA,aAAK,KAAK,EAAE,OAAO,KAAK,IAAI,QAAQ;AACpC,YAAI,WAAW,KAAK,KAAK,YAAY;AACrC,cAAM,OAAO,KAAK,KAAK;AACvB,aAAK,KAAK;AACV,mBAAW,SAAS,IAAI;AACxB,cAAM,YAAY,KAAK,qBAAqB;AAC5C,cAAM,iBAAiB,KAAK,qBAAqB;AACjD,aAAK,OAAO,GAAG;AACf,cAAM,OAAO,KAAK,KAAK,EAAE,gBAAgB,OAAO,IAAI;AACpD,cAAM,OAAO,OAAO,UAAU,WAAW,gBAAgB,IAAI;AAC7D,YAAI;AAAO,eAAK,aAAa;AAC7B,eAAO;AAAA,MACT;AAAA,MAEA,sBAAsB,WAAY;AAChC,YAAI,KAAK,UAAU,KAAK;AACtB,iBAAO,KAAK,KAAK,EAAE,oBAAoB;AAAA,QACzC;AAEA,eAAO;AAAA,MACT;AAAA,MAEA,gBAAgB,WAAY;AAC1B,aAAK,OAAO,KAAK,IAAI,MAAM;AAC3B,cAAM,SAAS,KAAK,KAAK,UAAU;AACnC,YAAI,WAAW,KAAK,KAAK,YAAY;AACrC,cAAM,OAAO,KAAK,KAAK,EAAE,KAAK;AAC9B,aAAK,KAAK;AACV,mBAAW,SAAS,IAAI;AAExB,cAAM,QAAQ,KAAK,UAAU,MAAM,KAAK,KAAK,EAAE,UAAU,IAAI;AAC7D,aAAK,OAAO,GAAG;AAEf,eAAO,OAAO,UAAU,KAAK;AAAA,MAC/B;AAAA,IACF;AAAA;AAAA;;;ACvDA;AAAA,mDAAAC,UAAAC,SAAA;AAAA;AAOA,IAAAA,QAAO,UAAU;AAAA,MAIf,cAAc,WAAY;AACxB,YAAI,KAAK,UAAU,KAAK;AACtB,eAAK,KAAK;AACV,iBAAO;AAAA,QACT;AACA,eAAO;AAAA,MACT;AAAA,MAIA,aAAa,WAAY;AACvB,YAAI,KAAK,UAAU,KAAK,IAAI,YAAY;AACtC,eAAK,KAAK;AACV,iBAAO;AAAA,QACT;AACA,eAAO;AAAA,MACT;AAAA,MAOA,eAAe,SAAU,SAAS,MAAM,OAAO,UAAU;AACvD,cAAM,SAAS,KAAK;AAAA,UAClB,UAAU,IAAI,OAAO,IAAI;AAAA,UACzB,QAAQ,KAAK,OAAO;AAAA,UACpB,SAAS,CAAC;AAAA,UACV;AAAA,QACF;AACA,YAAI,QAAQ,KAAK,MAAM,GAAG;AAExB,iBAAO,WAAW,IAAI;AACtB,cAAI,KAAK,OAAO,GAAG,GAAG;AACpB,iBAAK,KAAK;AAAA,UACZ;AAAA,QACF,OAAO;AACL,cAAI,KAAK,OAAO,GAAG,GAAG;AACpB,mBAAO,OAAO,KAAK,gBAAgB,KAAK;AACxC,gBAAI,OAAO,OAAO,OAAO,KAAK,KAAK;AACjC,qBAAO,IAAI,MAAM,OAAO,KAAK,IAAI;AAAA,YACnC;AAAA,UACF;AACA,cAAI,CAAC,WAAW,MAAM;AACpB,mBAAO,WAAW,IAAI;AAAA,UACxB;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAAA,MAOA,2BAA2B,SAAU,MAAM,UAAU,OAAO,UAAU;AACpE,YAAI,WAAW;AACf,YAAI,SAAS,GAAG;AACd,qBAAW;AAAA,QACb,WAAW,SAAS,GAAG;AACrB,qBAAW;AAAA,QACb;AACA,cAAM,SAAS,KAAK,KAAK,QAAQ;AAEjC,YAAI,KAAK,OAAO,KAAK,IAAI,UAAU,GAAG;AACpC,eAAK,KAAK;AAAA,QACZ;AACA,cAAM,QAAQ,KAAK,aAAa;AAChC,YAAI,OAAO,OACT,MAAM,CAAC,GACP,aAAa,MACb,WAAW;AACb,YAAI,SAAS,GAAG;AACd,gBAAM,WAAW,KAAK,KAAK,YAAY;AACvC,cAAI,SAAS,GAAG;AACd,gBAAI,KAAK,WAAW,KAAK;AACvB,kBAAI,KAAK,UAAU,KAAK,IAAI,YAAY,KAAK,GAAG,YAAY,GAAG;AAC7D,uBAAO,KAAK,KAAK;AACjB,qBAAK,KAAK;AAAA,cACZ,WAAW,KAAK,UAAU,KAAK;AAC7B,qBAAK,MAAM,YAAY;AAAA,cACzB;AAAA,YACF,WAAW,KAAK,UAAU,KAAK,IAAI,UAAU;AAC3C,qBAAO,KAAK,KAAK;AACjB,mBAAK,KAAK;AAAA,YACZ,OAAO;AACL,mBAAK,MAAM,YAAY;AAAA,YACzB;AAAA,UACF,OAAO;AACL,gBAAI,KAAK,WAAW,KAAK;AACvB,kBAAI,KAAK,UAAU,KAAK,IAAI,UAAU;AACpC,uBAAO,KAAK,KAAK;AACjB,qBAAK,KAAK;AAAA,cACZ,WAAW,KAAK,WAAW,KAAK;AAC9B,oBAAI,CAAC,KAAK,OAAO,GAAG,GAAG;AACrB,uBAAK,KAAK;AAAA,gBACZ;AAAA,cACF,OAAO;AACL,qBAAK,MAAM,KAAK,IAAI,QAAQ;AAC5B,qBAAK,KAAK;AAAA,cACZ;AAAA,YACF,OAAO;AACL,kBAAI,KAAK,OAAO,KAAK,IAAI,QAAQ,GAAG;AAClC,uBAAO,KAAK,KAAK;AAAA,cACnB;AACA,mBAAK,KAAK;AAAA,YACZ;AAAA,UACF;AACA,iBAAO,SAAS,IAAI;AAAA,QACtB;AACA,YAAI,KAAK,OAAO,GAAG;AAAG,eAAK,KAAK;AAChC,cAAM,SAAS,KAAK,oBAAoB,KAAK,SAAS,aAAa;AACnE,YAAI,KAAK,OAAO,GAAG;AAAG,eAAK,KAAK;AAChC,YAAI,SAAS,GAAG;AACd,gBAAM,KAAK,kBAAkB;AAAA,QAC/B;AACA,YAAI,KAAK,UAAU,KAAK;AACtB,cAAI,KAAK,KAAK,EAAE,UAAU,KAAK;AAC7B,uBAAW;AACX,iBAAK,KAAK;AAAA,UACZ;AACA,uBAAa,KAAK,WAAW;AAAA,QAC/B;AACA,cAAM,2BAA2B,CAAC,SAAS;AACzC,eAAK,aAAa,SAAS,CAAC;AAE5B,cAAI,YAAY,KAAK,KAAK;AACxB,iBAAK,IAAI,QAAQ;AACjB,gBAAI,KAAK,IAAI,QAAQ;AACnB,mBAAK,IAAI,SAAS,KAAK,MAAM,OAAO;AAAA,gBAClC,KAAK,IAAI,MAAM;AAAA,gBACf,KAAK,IAAI,IAAI,SAAS,KAAK,IAAI,MAAM;AAAA,cACvC;AAAA,YACF;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAEA,YAAI,SAAS,GAAG;AAEd,iBAAO;AAAA,YACL,OAAO,QAAQ,OAAO,KAAK,YAAY,UAAU,QAAQ;AAAA,UAC3D;AAAA,QACF;AACA,eAAO;AAAA,UACL,OAAO,MAAM,QAAQ,OAAO,YAAY,QAAQ;AAAA,QAClD;AAAA,MACF;AAAA,MAEA,mBAAmB,WAAY;AAC7B,YAAI,SAAS,CAAC;AAEd,YAAI,KAAK,UAAU,KAAK,IAAI,OAAO;AACjC,eAAK,KAAK;AACV,eAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAC9B,mBAAS,KAAK,sBAAsB;AACpC,eAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAAA,QAChC;AAEA,eAAO;AAAA,MACT;AAAA,MAEA,+BAA+B,SAAU,MAAM;AAC7C,cAAM,SAAS,CAAC;AAEhB,eAAO,KAAK,SAAS,KAAK,KAAK;AAC7B,iBAAO,KAAK,KAAK,CAAC;AAClB,cAAI,KAAK,SAAS,KAAK;AACrB,iBAAK,KAAK;AACV,gBAAI,KAAK,WAAW,OAAO,KAAK,UAAU,KAAK;AAC7C,qBAAO;AAAA,YACT;AAAA,UACF,WAAW,KAAK,SAAS,KAAK;AAC5B;AAAA,UACF,OAAO;AACL,iBAAK,MAAM,CAAC,KAAK,GAAG,CAAC;AACrB;AAAA,UACF;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAAA,MAEA,uBAAuB,WAAY;AACjC,eAAO,KAAK,8BAA8B,KAAK,iBAAiB,KAAK,IAAI,CAAC;AAAA,MAC5E;AAAA,MAOA,kBAAkB,WAAY;AAC5B,YAAI,KAAK,UAAU,KAAK;AACtB,iBAAO,KAAK,WAAW,KAAK,iBAAiB,KAAK,IAAI,CAAC;AAAA,QACzD;AACA,cAAM,SAAS,KAAK,KAAK,UAAU;AACnC,aAAK,OAAO,KAAK,IAAI,UAAU;AAC/B,cAAM,OAAO,KAAK,KAAK,EAAE,UAAU,CAAC;AACpC,aAAK,KAAK;AACV,eAAO,OAAO,MAAM,KAAK;AAAA,MAC3B;AAAA,MAOA,qBAAqB,SAAU,sBAAsB;AACnD,YAAI,KAAK,UAAU,KAAK;AACtB,cAAI,cAAc;AAElB,iBAAO,KAAK;AAAA,YACV,WAAY;AACV,oBAAM,YAAY,KAAK,eAAe,oBAAoB;AAC1D,kBAAI,WAAW;AAEb,oBAAI,aAAa;AACf,uBAAK;AAAA,oBACH;AAAA,kBACF;AAAA,gBACF;AACA,oBAAI,UAAU,UAAU;AACtB,gCAAc;AAAA,gBAChB;AAAA,cACF;AACA,qBAAO;AAAA,YACT,EAAE,KAAK,IAAI;AAAA,YACX;AAAA,UACF;AAAA,QACF;AAEA,eAAO,CAAC;AAAA,MACV;AAAA,MAOA,gBAAgB,SAAU,sBAAsB;AAC9C,cAAM,OAAO,KAAK,KAAK,WAAW;AAClC,YAAI,gBAAgB;AACpB,YAAI,QAAQ;AACZ,YAAI,QAAQ;AACZ,YAAI,WAAW;AACf,YAAI,WAAW;AACf,YAAI,QAAQ,CAAC;AACb,YAAI,KAAK,UAAU,KAAK,IAAI;AAAa,kBAAQ,KAAK,eAAe;AAErE,YAAI,KAAK,WAAW,OAAO,KAAK,UAAU,KAAK,IAAI,aAAa;AAC9D,cAAI,sBAAsB;AACxB,iBAAK,KAAK;AACV,uBAAW;AAAA,UACb,OAAO;AACL,iBAAK;AAAA,cACH;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAEA,cAAM,QAAQ,KAAK,cAAc;AAEjC,YACE,CAAC,YACD,KAAK,WAAW,OAChB,KAAK,UAAU,KAAK,IAAI,aACxB;AACA,cAAI,sBAAsB;AACxB,iBAAK,KAAK;AACV,uBAAW;AAAA,UACb,OAAO;AACL,iBAAK;AAAA,cACH;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAEA,YAAI,KAAK,UAAU,KAAK;AACtB,eAAK,KAAK;AACV,qBAAW;AAAA,QACb;AACA,gBAAQ,KAAK,WAAW;AACxB,YAAI,YAAY,CAAC,OAAO;AACtB,eAAK;AAAA,YACH;AAAA,UACF;AAAA,QACF;AACA,cAAM,QAAQ,KAAK,aAAa;AAChC,cAAM,aAAa,KAAK,YAAY;AACpC,YAAI,KAAK,OAAO,KAAK,IAAI,UAAU,GAAG;AACpC,0BAAgB,KAAK,KAAK,YAAY;AACtC,gBAAM,OAAO,KAAK,KAAK,EAAE,UAAU,CAAC;AACpC,eAAK,KAAK;AACV,0BAAgB,cAAc,IAAI;AAAA,QACpC;AACA,YAAI,KAAK,SAAS,KAAK;AACrB,kBAAQ,KAAK,KAAK,EAAE,UAAU;AAAA,QAChC;AACA,cAAM,SAAS;AAAA,UACb;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AACA,YAAI;AAAO,iBAAO,aAAa;AAC/B,eAAO;AAAA,MACT;AAAA,MACA,aAAa;AACX,cAAM,aAAa;AACnB,cAAM,aAAa;AACnB,cAAM,oBAAoB;AAE1B,cAAM,QAAQ,CAAC;AACf,YAAI,OAAO;AACX,cAAM,OAAO,KAAK,UAAU;AAC5B,YAAI,CAAC;AAAM,iBAAO;AAGlB,cAAM,KAAK,IAAI;AAKf,eAAO,KAAK,UAAU,OAAQ,KAAK,WAAW,OAAO,KAAK,UAAU,KAAM;AACxE,gBAAM,YAAY,KAAK,KAAK;AAE5B,cACE,cAAc,KAAK,IAAI,cACvB,cAAc,KAAK,IAAI,YACvB;AAGA;AAAA,UACF;AAEA,cAAI,SAAS,YAAY;AAEvB,mBAAO,KAAK,UAAU,MAAM,aAAa;AAAA,UAC3C,OAAO;AAEL,gBACG,SAAS,cAAc,KAAK,UAAU,OACtC,SAAS,qBAAqB,KAAK,UAAU,KAC9C;AACA,mBAAK;AAAA,gBACH,qBAAqB,KAAK,QAAQ;AAAA,cACpC;AAAA,YACF;AAAA,UACF;AAEA,eAAK,KAAK;AACV,gBAAM,KAAK,KAAK,UAAU,CAAC;AAAA,QAC7B;AACA,YAAI,MAAM,WAAW,GAAG;AACtB,iBAAO,MAAM;AAAA,QACf,OAAO;AACL,iBAAO,SAAS,oBACZ,KAAK,KAAK,kBAAkB,EAAE,KAAK,IACnC,KAAK,KAAK,WAAW,EAAE,KAAK;AAAA,QAClC;AAAA,MACF;AAAA,MACA,gBAAgB;AACd,cAAM,kBAAkB;AACxB,cAAM,qBAAqB;AAC3B,cAAM,mBAAmB;AACzB,YAAI,KAAK,UAAU,KAAK,IAAI,UAAU;AACpC,eAAK,KAAK;AACV,iBAAO;AAAA,QACT,WAAW,KAAK,UAAU,KAAK,IAAI,aAAa;AAC9C,eAAK,KAAK;AACV,iBAAO;AAAA,QACT,WAAW,KAAK,UAAU,KAAK,IAAI,WAAW;AAC5C,eAAK,KAAK;AACV,iBAAO;AAAA,QACT;AACA,eAAO;AAAA,MACT;AAAA,MAOA,oBAAoB,WAAY;AAC9B,YAAI,SAAS,CAAC;AACd,aAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAC9B,YACE,KAAK,WAAW,OAChB,KAAK,UAAU,KAAK,IAAI,cACxB,KAAK,KAAK,MAAM,KAChB;AACA,iBAAO,KAAK,KAAK,KAAK,qBAAqB,EAAE,CAAC;AAC9C,eAAK,KAAK;AAAA,QACZ,WAAW,KAAK,UAAU,KAAK;AAC7B,mBAAS,KAAK,6BAA6B;AAAA,QAC7C;AACA,aAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAC9B,eAAO;AAAA,MACT;AAAA,MAIA,8BAA8B,WAAY;AACxC,YAAI,cAAc;AAElB,eAAO,KAAK;AAAA,UACV,WAAY;AACV,kBAAM,WAAW,KAAK,cAAc;AACpC,gBAAI,UAAU;AACZ,oBAAM,aAAa,SAAS,SAAS;AAErC,kBAAI,eAAe,CAAC,YAAY;AAC9B,qBAAK;AAAA,kBACH;AAAA,gBACF;AAAA,cACF;AACA,kBAAI,YAAY;AACd,8BAAc;AAAA,cAChB;AAAA,YACF;AACA,mBAAO;AAAA,UACT,EAAE,KAAK,IAAI;AAAA,UACX;AAAA,QACF;AAAA,MACF;AAAA,MAMA,eAAe,WAAY;AACzB,YAAI,KAAK,UAAU,KAAK,IAAI,YAAY;AACtC,iBAAO,KAAK,KAAK,UAAU,EAAE,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,QACtD;AACA,YACE,KAAK,UAAU,KAAK,IAAI,YACxB,OAAO,OAAO,KAAK,MAAM,QAAQ,EAAE,SAAS,KAAK,KAAK,GACtD;AACA,gBAAM,YAAY,KAAK,KAAK;AAC5B,cAAI,cAAc,KAAK;AACrB,gBAAI,KAAK,UAAU,KAAK;AACtB,mBAAK,WAAW,2CAA2C;AAAA,YAC7D;AACA,mBAAO,KAAK,KAAK,eAAe;AAAA,cAC9B,KAAK,KAAK;AAAA,cACV,KAAK,KAAK,EAAE,KAAK,EAAE,UAAU;AAAA,YAC/B;AAAA,UACF;AAAA,QACF;AACA,eAAO,KAAK,UAAU;AAAA,MACxB;AAAA,MAOA,WAAW,WAAY;AACrB,cAAM,SAAS,KAAK,KAAK;AACzB,YAAI,KAAK,UAAU,KAAK,IAAI,WAAW,KAAK,UAAU,KAAK,IAAI,YAAY;AACzE,gBAAM,OAAO,KAAK,KAAK;AACvB,eAAK,KAAK;AACV,iBAAO,OAAO,iBAAiB,KAAK,YAAY,GAAG,IAAI;AAAA,QACzD,WACE,KAAK,UAAU,KAAK,IAAI,mBACxB,KAAK,UAAU,KAAK,IAAI,oBACxB,KAAK,UAAU,KAAK,IAAI,0BACxB,KAAK,UAAU,KAAK,IAAI,YACxB,KAAK,UAAU,KAAK,IAAI,UACxB;AACA,gBAAM,OAAO,KAAK,KAAK;AACvB,gBAAM,SAAS,CAAC,KAAK,OAAO,KAAK,MAAM,SAAS,CAAC;AACjD,eAAK,KAAK;AACV,cACE,KAAK,UAAU,KAAK,IAAI,kBACxB,KAAK,IAAI,cAAc,MAAM,QAAQ,KAAK,YAAY,CAAC,IAAI,IAC3D;AACA,mBAAO,OAAO,iBAAiB,KAAK,YAAY,GAAG,IAAI;AAAA,UACzD,OAAO;AAEL,iBAAK,MAAM,OAAO,KAAK,MAAM;AAC7B,iBAAK,KAAK;AAEV,mBAAO,QAAQ;AACf,mBAAO,KAAK,oBAAoB;AAAA,UAClC;AAAA,QACF;AAEA,eAAO,QAAQ;AACf,eAAO;AAAA,MACT;AAAA,IACF;AAAA;AAAA;;;AC1fA;AAAA,6CAAAC,UAAAC,SAAA;AAAA;AAOA,IAAAA,QAAO,UAAU;AAAA,MAQf,SAAS,WAAY;AACnB,cAAM,SAAS,KAAK,KAAK,IAAI;AAC7B,cAAM,OAAO,KAAK,KAAK,EAAE,aAAa;AACtC,YAAI,OAAO;AACX,YAAI,YAAY;AAChB,YAAI,YAAY;AAEhB,YAAI,KAAK,UAAU,KAAK;AACtB,sBAAY;AACZ,eAAK,KAAK;AACV,iBAAO,KAAK,KAAK,OAAO;AACxB,gBAAM,QAAQ,CAAC;AACf,iBAAO,KAAK,UAAU,KAAK,OAAO,KAAK,UAAU,KAAK,IAAI,SAAS;AACjE,gBAAI,KAAK,UAAU,KAAK,IAAI,UAAU;AACpC,0BAAY,KAAK,kBAAkB;AACnC;AAAA,YACF,WAAW,KAAK,UAAU,KAAK,IAAI,QAAQ;AACzC,0BAAY,KAAK,gBAAgB;AACjC;AAAA,YACF;AACA,kBAAM,KAAK,KAAK,qBAAqB,CAAC;AAAA,UACxC;AACA,iBAAO,KAAK,MAAM,KAAK;AACvB,eAAK,OAAO,KAAK,IAAI,OAAO,KAAK,KAAK,KAAK;AAC3C,eAAK,qBAAqB;AAAA,QAC5B,OAAO;AACL,iBAAO,KAAK,eAAe;AAC3B,cAAI,KAAK,UAAU,KAAK,IAAI,UAAU;AACpC,wBAAY,KAAK,QAAQ;AAAA,UAC3B,WAAW,KAAK,UAAU,KAAK,IAAI,QAAQ;AACzC,wBAAY,KAAK,KAAK,EAAE,eAAe;AAAA,UACzC;AAAA,QACF;AACA,eAAO,OAAO,MAAM,MAAM,WAAW,SAAS;AAAA,MAChD;AAAA,MAIA,cAAc,WAAY;AACxB,aAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAC9B,cAAM,SAAS,KAAK,UAAU;AAC9B,aAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAC9B,eAAO;AAAA,MACT;AAAA,MAIA,mBAAmB,WAAY;AAC7B,YAAI,YAAY;AAChB,cAAM,SAAS,KAAK,KAAK,IAAI;AAC7B,cAAM,OAAO,KAAK,KAAK,EAAE,aAAa;AACtC,YAAI,KAAK,OAAO,GAAG;AAAG,eAAK,KAAK;AAChC,cAAM,OAAO,KAAK,KAAK,OAAO;AAC9B,cAAM,QAAQ,CAAC;AACf,eAAO,KAAK,SAAS,KAAK,OAAO,KAAK,UAAU,KAAK,IAAI,SAAS;AAChE,cAAI,KAAK,UAAU,KAAK,IAAI,UAAU;AACpC,wBAAY,KAAK,kBAAkB;AACnC;AAAA,UACF,WAAW,KAAK,UAAU,KAAK,IAAI,QAAQ;AACzC,wBAAY,KAAK,gBAAgB;AACjC;AAAA,UACF;AACA,gBAAM,KAAK,KAAK,qBAAqB,CAAC;AAAA,QACxC;AACA,eAAO,OAAO,MAAM,KAAK,MAAM,KAAK,GAAG,WAAW,IAAI;AAAA,MACxD;AAAA,MAIA,iBAAiB,WAAY;AAC3B,YAAI,KAAK,KAAK,EAAE,OAAO,GAAG;AAAG,eAAK,KAAK;AACvC,cAAM,OAAO,KAAK,KAAK,OAAO;AAC9B,cAAM,QAAQ,CAAC;AACf,eAAO,KAAK,SAAS,KAAK,OAAO,KAAK,UAAU,KAAK,IAAI,SAAS;AAChE,gBAAM,KAAK,KAAK,qBAAqB,CAAC;AAAA,QACxC;AACA,eAAO,KAAK,MAAM,KAAK;AAAA,MACzB;AAAA,IACF;AAAA;AAAA;;;AC7FA;AAAA,gDAAAC,UAAAC,SAAA;AAAA;AAOA,IAAAA,QAAO,UAAU;AAAA,MASf,YAAY,WAAY;AACtB,cAAM,SAAS,KAAK,KAAK,OAAO;AAChC,aAAK,OAAO,KAAK,IAAI,OAAO,KAAK,KAAK,KAAK;AAC3C,YAAI,OAAO;AACX,YAAI,OAAO;AACX,YAAI,YAAY;AAChB,YAAI,KAAK,OAAO,GAAG;AAAG,eAAK,KAAK;AAChC,eAAO,KAAK,UAAU;AACtB,YAAI,KAAK,OAAO,GAAG;AAAG,eAAK,KAAK;AAChC,YAAI,KAAK,UAAU,KAAK;AACtB,sBAAY;AACZ,iBAAO,KAAK,gBAAgB,KAAK,IAAI,UAAU;AAAA,QACjD,OAAO;AACL,iBAAO,KAAK,eAAe;AAAA,QAC7B;AACA,eAAO,OAAO,MAAM,MAAM,SAAS;AAAA,MACrC;AAAA,MASA,SAAS,WAAY;AACnB,cAAM,SAAS,KAAK,KAAK,IAAI;AAC7B,aAAK,OAAO,KAAK,IAAI,IAAI,KAAK,KAAK,KAAK;AACxC,YAAI,OAAO;AACX,YAAI,OAAO;AACX,eAAO,KAAK,eAAe;AAC3B,YAAI,KAAK,OAAO,KAAK,IAAI,OAAO,GAAG;AACjC,cAAI,KAAK,KAAK,EAAE,OAAO,GAAG;AAAG,iBAAK,KAAK;AACvC,iBAAO,KAAK,UAAU;AACtB,cAAI,KAAK,OAAO,GAAG;AAAG,iBAAK,KAAK;AAChC,cAAI,KAAK,OAAO,GAAG;AAAG,iBAAK,KAAK;AAAA,QAClC;AACA,eAAO,OAAO,MAAM,IAAI;AAAA,MAC1B;AAAA,MAWA,UAAU,WAAY;AACpB,cAAM,SAAS,KAAK,KAAK,KAAK;AAC9B,aAAK,OAAO,KAAK,IAAI,KAAK,KAAK,KAAK,KAAK;AACzC,YAAI,OAAO,CAAC;AACZ,YAAI,OAAO,CAAC;AACZ,YAAI,YAAY,CAAC;AACjB,YAAI,OAAO;AACX,YAAI,YAAY;AAChB,YAAI,KAAK,OAAO,GAAG;AAAG,eAAK,KAAK;AAChC,YAAI,KAAK,UAAU,KAAK;AACtB,iBAAO,KAAK,UAAU,KAAK,WAAW,GAAG;AACzC,cAAI,KAAK,OAAO,GAAG;AAAG,iBAAK,KAAK;AAAA,QAClC,OAAO;AACL,eAAK,KAAK;AAAA,QACZ;AACA,YAAI,KAAK,UAAU,KAAK;AACtB,iBAAO,KAAK,UAAU,KAAK,WAAW,GAAG;AACzC,cAAI,KAAK,OAAO,GAAG;AAAG,iBAAK,KAAK;AAAA,QAClC,OAAO;AACL,eAAK,KAAK;AAAA,QACZ;AACA,YAAI,KAAK,UAAU,KAAK;AACtB,sBAAY,KAAK,UAAU,KAAK,WAAW,GAAG;AAC9C,cAAI,KAAK,OAAO,GAAG;AAAG,iBAAK,KAAK;AAAA,QAClC,OAAO;AACL,eAAK,KAAK;AAAA,QACZ;AACA,YAAI,KAAK,UAAU,KAAK;AACtB,sBAAY;AACZ,iBAAO,KAAK,gBAAgB,KAAK,IAAI,QAAQ;AAAA,QAC/C,OAAO;AACL,iBAAO,KAAK,eAAe;AAAA,QAC7B;AACA,eAAO,OAAO,MAAM,MAAM,WAAW,MAAM,SAAS;AAAA,MACtD;AAAA,MASA,cAAc,WAAY;AACxB,cAAM,SAAS,KAAK,KAAK,SAAS;AAClC,aAAK,OAAO,KAAK,IAAI,SAAS,KAAK,KAAK,KAAK;AAC7C,YAAI,SAAS;AACb,YAAI,MAAM;AACV,YAAI,QAAQ;AACZ,YAAI,OAAO;AACX,YAAI,YAAY;AAChB,YAAI,KAAK,OAAO,GAAG;AAAG,eAAK,KAAK;AAChC,iBAAS,KAAK,UAAU;AACxB,YAAI,KAAK,OAAO,KAAK,IAAI,IAAI,GAAG;AAC9B,eAAK,KAAK;AACV,kBAAQ,KAAK,sBAAsB;AACnC,cAAI,KAAK,UAAU,KAAK,IAAI,gBAAgB;AAC1C,kBAAM;AACN,oBAAQ,KAAK,KAAK,EAAE,sBAAsB;AAAA,UAC5C;AAAA,QACF;AAGA,YAAI,OAAO,IAAI,SAAS,QAAQ;AAC9B,eAAK,WAAW,8CAA8C;AAAA,QAChE;AAEA,YAAI,KAAK,OAAO,GAAG;AAAG,eAAK,KAAK;AAEhC,YAAI,KAAK,UAAU,KAAK;AACtB,sBAAY;AACZ,iBAAO,KAAK,gBAAgB,KAAK,IAAI,YAAY;AAAA,QACnD,OAAO;AACL,iBAAO,KAAK,eAAe;AAAA,QAC7B;AACA,eAAO,OAAO,QAAQ,KAAK,OAAO,MAAM,SAAS;AAAA,MACnD;AAAA,MAaA,uBAAuB,WAAY;AACjC,YAAI,KAAK,UAAU,KAAK,IAAI,UAAU,KAAK,UAAU,KAAK;AACxD,gBAAM,UAAU,KAAK,UAAU;AAC/B,gBAAM,SAAS,KAAK,KAAK,MAAM;AAC/B,eAAK,KAAK;AACV,cAAI,CAAC,WAAW,KAAK,OAAO,GAAG;AAAG,iBAAK,KAAK;AAC5C,gBAAM,aAAa,KAAK,qBAAqB,OAAO;AACpD,cAAI,KAAK,OAAO,UAAU,MAAM,GAAG;AAAG,iBAAK,KAAK;AAChD,iBAAO,OAAO,YAAY,OAAO;AAAA,QACnC,OAAO;AACL,iBAAO,KAAK,cAAc,OAAO,KAAK;AAAA,QACxC;AAAA,MACF;AAAA,IACF;AAAA;AAAA;;;ACvKA;AAAA,+CAAAC,UAAAC,SAAA;AAAA;AAOA,IAAAA,QAAO,UAAU;AAAA,MAMf,YAAY,WAAY;AACtB,YAAI,KAAK,SAAS,KAAK,IAAI,aAAa;AACtC,iBAAO,KAAK,eAAe;AAAA,QAC7B,OAAO;AACL,iBAAO,KAAK,mBAAmB;AAAA,QACjC;AAAA,MACF;AAAA,IACF;AAAA;AAAA;;;ACpBA;AAAA,oDAAAC,UAAAC,SAAA;AAAA;AAOA,IAAAA,QAAO,UAAU;AAAA,MAYf,gBAAgB,WAAY;AAC1B,cAAM,SAAS,KAAK,KAAK,WAAW;AACpC,YAAI;AACJ,aAAK,OAAO,KAAK,IAAI,WAAW,KAAK,KAAK,KAAK;AAC/C,YAAI;AAEJ,YAAI,KAAK,UAAU,KAAK;AACtB,iBAAO;AAAA,YACL,MAAM,CAAC,EAAE;AAAA,UACX;AAAA,QACF,OAAO;AACL,iBAAO,KAAK,oBAAoB;AAAA,QAClC;AACA,aAAK,mBAAmB;AAExB,YAAI,KAAK,UAAU,KAAK;AACtB,eAAK,mBAAmB;AACxB,iBAAO,KAAK,KAAK,EAAE,oBAAoB;AACvC,eAAK,OAAO,KAAK,GAAG;AACpB,iBAAO,OAAO,KAAK,MAAM,MAAM,KAAK;AAAA,QACtC,WAAW,KAAK,UAAU,KAAK;AAC7B,eAAK,mBAAmB;AACxB,iBAAO,KAAK,KAAK,EAAE,oBAAoB;AACvC,eAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAC9B,cACE,KAAK,WAAW,KAChB,KAAK,cACL,KAAK,MAAM,SAAS,KAAK,WACzB;AACA,iBAAK,KAAK,KAAK,KAAK,MAAM,EAAE,CAAC;AAAA,UAC/B;AACA,iBAAO,OAAO,KAAK,MAAM,MAAM,IAAI;AAAA,QACrC,OAAO;AACL,eAAK,MAAM,CAAC,KAAK,GAAG,CAAC;AAErB,eAAK,mBAAmB;AACxB,iBAAO,KAAK,oBAAoB;AAChC,eAAK,OAAO,KAAK,GAAG;AACpB,iBAAO,OAAO,MAAM,MAAM,KAAK;AAAA,QACjC;AAAA,MACF;AAAA,MASA,qBAAqB,SAAU,kBAAkB;AAC/C,cAAM,SAAS,KAAK,KAAK;AACzB,YAAI;AACJ,YAAI,OAAO,KAAK,KAAK;AACrB,gBAAQ,KAAK,OAAO;AAAA,UAClB,KAAK,KAAK,IAAI;AACZ,yBAAa,KAAK,IAAI,KAAK;AAC3B,mBAAO,KAAK,QAAQ,gBAAgB,EAAE;AACtC;AAAA,UACF,KAAK,KAAK,IAAI;AACZ,yBAAa,KAAK,IAAI,KAAK;AAC3B;AAAA,UACF,KAAK,KAAK,IAAI;AACZ,yBAAa,KAAK,IAAI,KAAK;AAC3B;AAAA,UACF;AACE,yBAAa,KAAK,IAAI,KAAK;AAC3B,gBAAI,CAAC,KAAK,OAAO,KAAK,IAAI,QAAQ,GAAG;AAEnC,qBAAO,OAAO,QAAQ,IAAI,KAAK,IAAI,KAAK,mBAAmB;AAAA,YAC7D;AAAA,QACJ;AAEA,aAAK,KAAK;AAEV,YAAI,oBAAoB,KAAK,UAAU,KAAK;AAC1C,cAAI,KAAK,YAAY,MAAM,UAAU;AACnC,mBAAO,OAAO,mBAAmB,IAAI;AAAA,UACvC,WAAW,KAAK,YAAY,MAAM,QAAQ;AACxC,mBAAO,OAAO,iBAAiB,IAAI;AAAA,UACrC;AAAA,QACF;AAEA,eAAO,OAAO,QAAQ,MAAM,UAAU;AAAA,MACxC;AAAA,MAaA,oBAAoB,WAAY;AAC9B,YAAI,SAAS,KAAK,KAAK,UAAU;AACjC,YAAI,QAAQ,CAAC;AACb,YAAI,OAAO;AACX,aAAK,OAAO,KAAK,IAAI,KAAK,KAAK,KAAK,KAAK;AACzC,cAAM,OAAO,KAAK,cAAc;AAChC,cAAM,KAAK,KAAK,qBAAqB,KAAK,CAAC;AAC3C,YAAI,KAAK,UAAU,KAAK;AACtB,kBAAQ,MAAM,OAAO,KAAK,KAAK,EAAE,sBAAsB,KAAK,CAAC;AAAA,QAC/D,WAAW,KAAK,UAAU,KAAK;AAC7B,iBAAO,MAAM,GAAG;AAChB,kBAAQ,KAAK,KAAK,EAAE,sBAAsB,SAAS,IAAI;AACvD,eAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAAA,QAChC;AACA,iBAAS,OAAO,MAAM,MAAM,KAAK;AACjC,aAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAC9B,eAAO;AAAA,MACT;AAAA,MAKA,2BAA2B,WAAY;AAErC,eAAO,KAAK,cAAc,MAAM,KAAK;AAAA,MACvC;AAAA,MASA,sBAAsB,SAAU,OAAO;AACrC,cAAM,SAAS,KAAK,KAAK,SAAS;AAClC,YAAI,OAAO;AACX,YAAI;AAAO,iBAAO,KAAK,cAAc;AACrC,cAAM,OAAO,KAAK,oBAAoB;AACtC,cAAM,QAAQ,KAAK,eAAe;AAClC,eAAO,OAAO,KAAK,MAAM,OAAO,IAAI;AAAA,MACtC;AAAA,MASA,uBAAuB,SAAU,OAAO;AACtC,cAAM,SAAS,CAAC,KAAK,qBAAqB,KAAK,CAAC;AAChD,eAAO,KAAK,UAAU,KAAK;AACzB,eAAK,KAAK;AACV,cAAI,OAAO;AACT,gBACE,KAAK,UAAU,KAAK,IAAI,mBACxB,KAAK,UAAU,KAAK,IAAI,oBACxB,KAAK,UAAU,KAAK,IAAI,0BACxB,KAAK,UAAU,KAAK,IAAI,cACxB,KAAK,UAAU,KAAK,IAAI,WACxB,KAAK,UAAU,KAAK,IAAI,UACxB;AACA;AAAA,YACF;AAAA,UACF,WACE,KAAK,UAAU,KAAK,IAAI,mBACxB,KAAK,UAAU,KAAK,IAAI,oBACxB,KAAK,UAAU,KAAK,IAAI,0BACxB,KAAK,UAAU,KAAK,IAAI,YACxB,KAAK,UAAU,KAAK,IAAI,gBACxB;AACA;AAAA,UACF;AACA,iBAAO,KAAK,KAAK,qBAAqB,KAAK,CAAC;AAAA,QAC9C;AACA,eAAO;AAAA,MACT;AAAA,MAQA,gBAAgB,WAAY;AAC1B,YAAI,SAAS;AACb,YAAI,KAAK,UAAU,KAAK,IAAI,MAAM;AAChC,cAAI,KAAK,KAAK,EAAE,OAAO,KAAK,IAAI,QAAQ,GAAG;AACzC,kBAAM,YAAY,KAAK,KAAK,YAAY;AACxC,kBAAM,OAAO,KAAK,KAAK;AACvB,iBAAK,KAAK;AACV,qBAAS,UAAU,IAAI;AAAA,UACzB;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAAA,MASA,eAAe,WAAY;AACzB,YAAI,KAAK,UAAU,KAAK,IAAI,YAAY;AACtC,eAAK,KAAK;AACV,iBAAO,KAAK,IAAI,QAAQ;AAAA,QAC1B,WAAW,KAAK,UAAU,KAAK,IAAI,SAAS;AAC1C,eAAK,KAAK;AACV,iBAAO,KAAK,IAAI,QAAQ;AAAA,QAC1B;AACA,eAAO;AAAA,MACT;AAAA,IACF;AAAA;AAAA;;;ACtOA;AAAA,iDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,cAAc;AAAA,MAClB,MAAM;AAAA,MACN,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG,OAAO,aAAa,EAAE;AAAA,MACzB,GAAG,OAAO,aAAa,EAAE;AAAA,MACzB,GAAG,OAAO,aAAa,EAAE;AAAA,IAC3B;AAEA,IAAAA,QAAO,UAAU;AAAA,MAIf,uBAAuB,SAAU,MAAM,aAAa;AAClD,YAAI,CAAC,aAAa;AAEhB,iBAAO,KAAK,QAAQ,SAAS,IAAI,EAAE,QAAQ,QAAQ,GAAG;AAAA,QACxD;AACA,eAAO,KACJ,QAAQ,OAAO,GAAG,EAClB;AAAA,UACC;AAAA,UACA,CAAC,QAAQ,IAAI,OAAO;AAClB,gBAAI,YAAY,KAAK;AACnB,qBAAO,YAAY;AAAA,YACrB,WAAW,QAAQ,GAAG,MAAM,QAAQ,GAAG,IAAI;AACzC,qBAAO,OAAO,cAAc,SAAS,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;AAAA,YACxD,WAAW,QAAQ,GAAG,IAAI;AACxB,qBAAO,OAAO,cAAc,SAAS,IAAI,EAAE,CAAC;AAAA,YAC9C,OAAO;AACL,qBAAO,OAAO,cAAc,SAAS,IAAI,CAAC,CAAC;AAAA,YAC7C;AAAA,UACF;AAAA,QACF;AAAA,MACJ;AAAA,MASA,yCAAyC,SACvC,MACA,aACA,yBACA,mBACA;AACA,YAAI,gBAAgB,GAAG;AACrB,iBAAO;AAAA,QACT;AAEA,aAAK;AAAA,UACH;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAEA,cAAM,cAAc,0BAA0B,MAAM;AACpD,cAAM,mBAAmB,IAAI;AAAA,UAC3B,MAAM,eAAe;AAAA,UACrB;AAAA,QACF;AACA,cAAM,kCAAkC,IAAI;AAAA,UAC1C,IAAI,eAAe;AAAA,QACrB;AAGA,YAAI,mBAAmB;AAErB,iBAAO,KAAK,QAAQ,iCAAiC,EAAE;AAAA,QACzD;AAGA,eAAO,KAAK,QAAQ,kBAAkB,IAAI;AAAA,MAC5C;AAAA,MASA,iCAAiC,SAC/B,MACA,aACA,yBACA,mBACA;AACA,cAAM,WAAW,KAAK;AACtB,YAAI,SAAS;AACb,YAAI,6BAA6B;AAKjC,YAAI,iBAAiB;AACrB,cAAM,YAAY,0BAA0B,MAAM;AAClD,YAAI,eAAe;AACnB,YAAI,CAAC,mBAAmB;AAEtB,mBAAS,KAAK,QAAQ,IAAI;AAE1B,cAAI,WAAW,IAAI;AACjB;AAAA,UACF;AACA;AAAA,QACF;AACA,eAAO,SAAS,UAAU;AACxB,cAAI,gBAAgB;AAClB,gBAAI,KAAK,YAAY,WAAW;AAC9B;AAAA,YACF,OAAO;AACL,6BAAe;AAAA,YACjB;AAAA,UACF,OAAO;AACL,6BAAiB;AAAA,UACnB;AAEA,cACE,KAAK,YAAY,QACjB,gBACA,6BAA6B,aAC7B;AACA,iBAAK;AAAA,cACH,qEAAqE;AAAA,YACvE;AAAA,UACF,OAAO;AACL,2BAAe;AAAA,UACjB;AAEA,cAAI,KAAK,YAAY,MAAM;AAEzB,6BAAiB;AACjB,yCAA6B;AAAA,UAC/B;AACA;AAAA,QACF;AAAA,MACF;AAAA,MAKA,4BAA4B,WAAY;AACtC,YAAI,SAAS;AAEb,gBAAQ,KAAK,OAAO;AAAA,UAClB,KAAK,KAAK,IAAI;AACZ;AACE,kBAAI,QAAQ,KAAK,KAAK,QAAQ;AAC9B,oBAAM,OAAO,KAAK,KAAK;AACvB,kBAAI,SAAS;AACb,kBAAI,KAAK,OAAO,OAAO,KAAK,OAAO,KAAK;AACtC,yBAAS;AAAA,cACX;AACA,oBAAM,gBAAgB,KAAK,YAAY;AACvC,mBAAK,KAAK;AACV,oBAAM,YAAY,KAAK;AAAA,gBACrB,KAAK,UAAU,SAAS,GAAG,KAAK,SAAS,CAAC;AAAA,gBAC1C;AAAA,cACF;AACA,sBAAQ;AAAA,gBACN;AAAA,gBACA;AAAA,gBACA,WAAW;AAAA,gBACX;AAAA,cACF;AACA,kBAAI,KAAK,UAAU,KAAK,IAAI,gBAAgB;AAE1C,yBAAS,KAAK,mBAAmB,KAAK;AAAA,cACxC,OAAO;AAEL,yBAAS;AAAA,cACX;AAAA,YACF;AACA;AAAA,UACF,KAAK,KAAK,IAAI;AACZ,qBAAS,KAAK,WAAW;AACzB;AAAA,UACF,KAAK;AACH,qBAAS,KAAK,WAAW;AACzB;AAAA,QACJ;AAEA,eAAO;AAAA,MACT;AAAA,MAYA,aAAa,WAAY;AACvB,YAAI,KAAK,GAAG,eAAe,GAAG;AAC5B,iBAAO,KAAK,mBAAmB;AAAA,QACjC,OAAO;AACL,cAAI,OAAO;AACX,kBAAQ,KAAK,OAAO;AAAA,YAElB,KAAK,KAAK,IAAI;AAAA,YACd,KAAK,KAAK,IAAI,WAAW;AAEvB,oBAAM,SAAS,KAAK,KAAK,QAAQ;AACjC,sBAAQ,KAAK,KAAK;AAClB,mBAAK,KAAK;AACV,qBAAO,OAAO,OAAO,IAAI;AAAA,YAC3B;AAAA,YACA,KAAK,KAAK,IAAI;AACZ,kBAAI,KAAK,MAAM,iBAAiB,aAAa;AAC3C,sBAAM,QAAQ,KAAK,MAAM,OAAO;AAChC,uBAAO,KAAK,KAAK,QAAQ;AACzB,wBAAQ,KAAK,KAAK,EAAE,KAAK;AAEzB,oBAAI,KAAK,MAAM,cAAc,cAAc,GAAG;AAC5C,0BAAQ,MAAM;AAAA,oBACZ;AAAA,oBACA,MAAM,SAAS,KAAK,MAAM,cAAc;AAAA,kBAC1C;AAAA,gBACF;AACA,sBAAM,SAAS,MAAM,MAAM,SAAS;AACpC,oBAAI,WAAW,MAAM;AACnB,sBAAI,MAAM,MAAM,SAAS,OAAO,MAAM;AAEpC,4BAAQ,MAAM,UAAU,GAAG,MAAM,SAAS,CAAC;AAAA,kBAC7C,OAAO;AAEL,4BAAQ,MAAM,UAAU,GAAG,MAAM,SAAS,CAAC;AAAA,kBAC7C;AAAA,gBACF,WAAW,WAAW,MAAM;AAE1B,0BAAQ,MAAM,UAAU,GAAG,MAAM,SAAS,CAAC;AAAA,gBAC7C;AACA,qBAAK,OAAO,KAAK,IAAI,yBAAyB,KAAK,KAAK,KAAK;AAC7D,qBAAK,OAAO,KAAK,IAAI,aAAa,KAAK,KAAK,KAAK;AACjD,sBAAM,MAAM,KAAK,MAAM,OAAO;AAAA,kBAC5B;AAAA,kBACA,KAAK,MAAM,OAAO;AAAA,gBACpB;AACA,uBAAO;AAAA,kBACL,KAAK;AAAA,oBACH;AAAA,oBACA,KAAK,MAAM,cAAc;AAAA,oBACzB,KAAK,MAAM,cAAc;AAAA,oBACzB,KAAK,MAAM,cAAc;AAAA,kBAC3B;AAAA,kBACA;AAAA,kBACA,KAAK,MAAM,cAAc;AAAA,gBAC3B;AACA,qBAAK,MAAM,cAAc,WAAW;AACpC,uBAAO;AAAA,cACT,OAAO;AACL,uBAAO,KAAK,qBAAqB,KAAK,IAAI,aAAa;AAAA,cACzD;AAAA,YAEF,KAAK;AACH,qBAAO,KAAK,qBAAqB,GAAG;AAAA,YAEtC,KAAK;AAAA,YACL,KAAK,MAAM;AACT,qBAAO,KAAK,qBAAqB,KAAK,IAAI;AAAA,YAC5C;AAAA,YAGA,KAAK,KAAK,IAAI;AAAA,YACd,KAAK,KAAK,IAAI;AAAA,YACd,KAAK;AACH,qBAAO,KAAK,2BAA2B;AAAA,YACzC,SAAS;AACP,oBAAM,MAAM,KAAK,MAAM,QAAQ;AAE/B,mBAAK,KAAK;AACV,qBAAO;AAAA,YACT;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,MAIA,qBAAqB,SAAU,MAAM;AACnC,YAAI,QAAQ;AACZ,cAAM,OAAO,KAAK,KAAK,cAAc;AACrC,YAAI,KAAK,UAAU,KAAK;AACtB,mBAAS,KAAK,KAAK,EAAE,UAAU;AAC/B,cAAI,KAAK,OAAO,GAAG;AAAG,iBAAK,KAAK;AAChC,mBAAS,KAAK,MAAM,MAAM;AAAA,QAC5B,WAAW,KAAK,UAAU,KAAK,IAAI,4BAA4B;AAC7D,mBAAS,KAAK,0BAA0B,KAAK;AAC7C,mBAAS,KAAK,MAAM,MAAM;AAAA,QAC5B;AACA,eAAO;AAAA,MACT;AAAA,MAgBA,2BAA2B,SAAU,eAAe;AAClD,cAAM,eAAe,KAAK,KAAK,cAAc;AAC7C,YAAI,SAAS;AACb,YAAI,QAAQ;AACZ,YAAI,SAAS,KAAK,KAAK,GACrB,QACA,MACA;AAIF,YAAI,KAAK,UAAU,KAAK,IAAI,2BAA2B;AACrD,gBAAM,OAAO,KAAK,KAAK;AACvB,eAAK,KAAK;AAGV,mBAAS;AAAA,YACP;AAAA,YACA;AAAA,YACA,KAAK,WAAW,OAAO,CAAC,KAAK,MAAM,cAAc,WAC7C,KAAK;AAAA,cACH,KAAK,sBAAsB,MAAM,aAAa;AAAA,cAC9C,KAAK,MAAM,cAAc;AAAA,cACzB,KAAK,MAAM,cAAc;AAAA,cACzB,KAAK,MAAM,cAAc;AAAA,YAC3B,IACA;AAAA,YACJ;AAAA,YACA;AAAA,UACF;AAAA,QACF,WAAW,KAAK,UAAU,KAAK,IAAI,4BAA4B;AAC7D,mBAAS;AACT,kBAAQ;AAGR,iBAAO;AACP,cAAI,KAAK,KAAK,EAAE,UAAU,KAAK,IAAI,kBAAkB;AACnD,mBAAO,KAAK,KAAK,UAAU;AAC3B,kBAAM,UAAU,KAAK,KAAK;AAC1B,iBAAK,KAAK;AAGV,mBAAO,QAAQ;AACf,gBAAI,KAAK,UAAU,KAAK;AACtB,qBAAO,KAAK,SAAS,KAAK;AAC1B,qBAAO,KAAK,KAAK,cAAc;AAC/B,uBAAS,KAAK,KAAK,EAAE,UAAU;AAC/B,mBAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAC9B,uBAAS,KAAK,MAAM,MAAM;AAAA,YAC5B,OAAO;AACL,uBAAS,KAAK,SAAS,KAAK;AAAA,YAC9B;AAAA,UACF,OAAO;AACL,qBAAS,OAAO,YAAY,KAAK,UAAU,GAAG,KAAK;AAAA,UACrD;AACA,eAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAAA,QAChC,WAAW,KAAK,UAAU,KAAK,IAAI,cAAc;AAG/C,mBAAS;AACT,iBAAO,QAAQ;AACf,mBAAS,KAAK,KAAK,EAAE,cAAc,OAAO,KAAK;AAC/C,eAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAAA,QAChC,WAAW,KAAK,UAAU,KAAK,IAAI,YAAY;AAC7C,mBAAS;AAGT,iBAAO,QAAQ;AACf,mBAAS,KAAK,qBAAqB;AAGnC,cAAI,KAAK,UAAU,KAAK;AACtB,mBAAO,KAAK,KAAK,cAAc;AAC/B,qBAAS,KAAK,KAAK,EAAE,uBAAuB;AAC5C,iBAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAC9B,qBAAS,KAAK,QAAQ,MAAM;AAAA,UAC9B;AAGA,cAAI,KAAK,UAAU,KAAK,IAAI,mBAAmB;AAC7C,mBAAO,KAAK,KAAK,gBAAgB;AACjC,iBAAK,KAAK,EAAE,OAAO,KAAK,IAAI,QAAQ;AACpC,kBAAM,OAAO,KAAK,KAAK,YAAY;AACnC,mBAAO,KAAK,KAAK;AACjB,iBAAK,KAAK;AACV,qBAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AAAA,UAClC;AAAA,QAGF,OAAO;AACL,eAAK,OAAO,KAAK,IAAI,yBAAyB;AAC9C,gBAAM,QAAQ,KAAK,KAAK;AACxB,eAAK,KAAK;AAEV,iBAAO,QAAQ;AACf,mBAAS,OAAO,UAAU,OAAO,OAAO,OAAO,KAAK;AAAA,QACtD;AAGA,aAAK,MAAM,cAAc,oBAAoB;AAC7C,eAAO,aAAa,QAAQ,QAAQ,KAAK;AAAA,MAC3C;AAAA,MAIA,sBAAsB,SAAU,QAAQ,WAAW,OAAO;AACxD,cAAM,aAAa,KAAK,MAAM,OAAO;AACrC,YAAI,OAAO,KAAK,KAAK,UAAU;AAC/B,aAAK,KAAK;AACV,cAAM,QAAQ,KAAK,MAAM,OAAO,eAAe,WAAW,IAAI;AAC9D,cAAM,QAAQ,CAAC;AACf,YAAI,OAAO;AAEX,YAAI,WAAW,KAAK;AAClB,iBAAO,KAAK,IAAI,SAAS;AAAA,QAC3B,WAAW,WAAW,KAAK;AACzB,iBAAO,KAAK,IAAI,SAAS;AAAA,QAC3B,OAAO;AACL,iBAAO,KAAK,IAAI,SAAS;AAAA,QAC3B;AAGA,eAAO,KAAK,UAAU,UAAU,KAAK,UAAU,KAAK,KAAK;AACvD,gBAAM,KAAK,KAAK,0BAA0B,IAAI,CAAC;AAAA,QACjD;AACA,YACE,MAAM,SAAS,KACf,MAAM,MAAM,SAAS,GAAG,SAAS,kBACjC,MAAM,MAAM,SAAS,GAAG,WAAW,SAAS,UAC5C;AACA,gBAAMC,QAAO,MAAM,MAAM,SAAS,GAAG;AACrC,gBAAM,SAASA,MAAK,MAAMA,MAAK,MAAM,SAAS;AAC9C,cAAI,WAAW,MAAM;AACnB,gBAAIA,MAAK,MAAMA,MAAK,MAAM,SAAS,OAAO,MAAM;AAE9C,cAAAA,MAAK,QAAQA,MAAK,MAAM,UAAU,GAAGA,MAAK,MAAM,SAAS,CAAC;AAAA,YAC5D,OAAO;AAEL,cAAAA,MAAK,QAAQA,MAAK,MAAM,UAAU,GAAGA,MAAK,MAAM,SAAS,CAAC;AAAA,YAC5D;AAAA,UACF,WAAW,WAAW,MAAM;AAE1B,YAAAA,MAAK,QAAQA,MAAK,MAAM,UAAU,GAAGA,MAAK,MAAM,SAAS,CAAC;AAAA,UAC5D;AAAA,QACF;AACA,aAAK,OAAO,MAAM,KAAK,KAAK,KAAK;AACjC,cAAM,MAAM,KAAK,MAAM,OAAO;AAAA,UAC5B,SAAS,YAAY,aAAa,QAAQ;AAAA,UAC1C,KAAK,MAAM,OAAO;AAAA,QACpB;AACA,eAAO,KAAK,OAAO,KAAK,IAAI;AAE5B,YAAI,WAAW,KAAK,IAAI,eAAe;AACrC,eAAK,QAAQ,KAAK,MAAM,cAAc;AACtC,eAAK,MAAM,cAAc,WAAW;AAAA,QACtC;AACA,eAAO;AAAA,MACT;AAAA,MAIA,oBAAoB,WAAY;AAC9B,cAAM,SAAS,KAAK,KAAK,OAAO;AAChC,cAAM,OAAO,KAAK,KAAK;AACvB,aAAK,KAAK;AACV,eAAO,OAAO,KAAK,YAAY,GAAG,IAAI;AAAA,MACxC;AAAA,IACF;AAAA;AAAA;;;AC3eA;AAAA,oDAAAC,UAAAC,SAAA;AAAA;AAOA,IAAAA,QAAO,UAAU;AAAA,MAOf,qBAAqB,WAAY;AAC/B,YAAI,SAAS,CAAC;AACd,eAAO,KAAK,UAAU,KAAK,OAAO,KAAK,UAAU,KAAK;AACpD,gBAAM,YAAY,KAAK,mBAAmB;AAC1C,cAAI,WAAW;AACb,gBAAI,MAAM,QAAQ,SAAS,GAAG;AAC5B,uBAAS,OAAO,OAAO,SAAS;AAAA,YAClC,OAAO;AACL,qBAAO,KAAK,SAAS;AAAA,YACvB;AAAA,UACF;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAAA,MAWA,oBAAoB,WAAY;AAC9B,YAAI,QAAQ,CAAC;AACb,YAAI,KAAK,UAAU,KAAK,IAAI,aAAa;AACvC,kBAAQ,KAAK,eAAe;AAAA,QAC9B;AACA,gBAAQ,KAAK,OAAO;AAAA,UAClB,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,cAAc,OAAO,OAAO,KAAK;AAAA,UAE/C,KAAK,KAAK,IAAI;AAAA,UACd,KAAK,KAAK,IAAI;AAAA,UACd,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,iCAAiC,KAAK;AAAA,UACpD,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,qCAAqC,KAAK;AAAA,UACxD,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,iCAAiC;AAAA,UAC/C,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,gCAAgC,KAAK;AAAA,UACnD,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,mBAAmB;AAAA,UACjC,KAAK,KAAK,IAAI,SAAS;AACrB,kBAAM,SAAS,KAAK,KAAK,mBAAmB;AAC5C,kBAAM,QAAQ,KAAK,KAAK,EAAE,gBAAgB;AAC1C,iBAAK,qBAAqB;AAC1B,mBAAO,OAAO,MAAM,KAAK;AAAA,UAC3B;AAAA,UACA,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,eAAe;AAAA,UAC7B,KAAK,KAAK,IAAI,iBAAiB;AAC7B,kBAAM,SAAS,KAAK,KAAK,MAAM;AAC/B,gBAAI,KAAK,KAAK,EAAE,OAAO,GAAG;AAAG,mBAAK,KAAK;AACvC,gBAAI,KAAK,OAAO,GAAG;AAAG,mBAAK,KAAK;AAChC,iBAAK,OAAO,GAAG;AACf,iBAAK,MAAM,OAAO;AAClB,mBAAO,OAAO,KAAK,MAAM,OAAO,UAAU,KAAK,MAAM,MAAM,CAAC;AAAA,UAC9D;AAAA,UACA;AACE,mBAAO,KAAK,eAAe;AAAA,QAC/B;AAAA,MACF;AAAA,MAOA,uBAAuB,WAAY;AACjC,YAAI,SAAS,CAAC;AACd,eAAO,KAAK,SAAS,KAAK,OAAO,KAAK,UAAU,KAAK;AACnD,gBAAM,YAAY,KAAK,qBAAqB;AAC5C,cAAI,WAAW;AACb,gBAAI,MAAM,QAAQ,SAAS,GAAG;AAC5B,uBAAS,OAAO,OAAO,SAAS;AAAA,YAClC,OAAO;AACL,qBAAO,KAAK,SAAS;AAAA,YACvB;AAAA,UACF;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAAA,MAOA,iBAAiB,WAAY;AAC3B,eAAO,KAAK;AAAA,UACV,WAAY;AACV,iBAAK,OAAO,KAAK,IAAI,QAAQ;AAC7B,kBAAM,SAAS,KAAK,KAAK,UAAU;AACnC,gBAAI,YAAY,KAAK,KAAK,YAAY;AACtC,kBAAM,OAAO,KAAK,KAAK;AACvB,iBAAK,KAAK;AACV,wBAAY,UAAU,IAAI;AAC1B,gBAAI,KAAK,OAAO,GAAG,GAAG;AACpB,qBAAO,OAAO,WAAW,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,YAClD,OAAO;AAEL,qBAAO,OAAO,WAAW,IAAI;AAAA,YAC/B;AAAA,UACF;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,MAQA,mBAAmB,WAAY;AAC7B,cAAM,SAAS,CAAC;AAChB,eAAO,KAAK,SAAS,KAAK,OAAO,KAAK,UAAU,KAAK;AACnD,eAAK,OAAO,KAAK,IAAI,QAAQ;AAC7B,gBAAM,YAAY,KAAK,KAAK,kBAAkB;AAC9C,cAAI,MAAM,KAAK,KAAK,YAAY;AAChC,gBAAM,OAAO,KAAK,KAAK;AACvB,eAAK,KAAK;AACV,gBAAM,IAAI,IAAI;AACd,cAAI,QAAQ;AACZ,cAAI,KAAK,OAAO,GAAG,GAAG;AACpB,oBAAQ,KAAK,KAAK,EAAE,UAAU;AAAA,UAChC;AACA,iBAAO,KAAK,UAAU,KAAK,KAAK,CAAC;AACjC,cAAI,KAAK,UAAU;AAAK;AACxB,eAAK,KAAK;AAAA,QACZ;AACA,eAAO;AAAA,MACT;AAAA,MAOA,sBAAsB,WAAY;AAChC,YAAI,QAAQ,CAAC;AACb,YAAI,KAAK,UAAU,KAAK,IAAI,aAAa;AACvC,kBAAQ,KAAK,eAAe;AAAA,QAC9B;AACA,gBAAQ,KAAK,OAAO;AAAA,UAClB,KAAK,KAAK,IAAI,YAAY;AACxB,kBAAM,SAAS,KAAK,cAAc,OAAO,KAAK;AAC9C,mBAAO,aAAa;AACpB,mBAAO;AAAA,UACT;AAAA,UAEA,KAAK,KAAK,IAAI;AAAA,UACd,KAAK,KAAK,IAAI;AAAA,UACd,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,iCAAiC;AAAA,UAC/C,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,qCAAqC;AAAA,UACnD,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,iCAAiC;AAAA,UAC/C,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,gCAAgC;AAAA,UAC9C,KAAK,KAAK,IAAI,iBAAiB;AAC7B,iBAAK;AAAA,cACH;AAAA,YACF;AAEA,gBAAI,OAAO,KAAK,KAAK,MAAM;AAC3B,iBAAK,KAAK,EAAE,OAAO,GAAG,KAAK,KAAK,KAAK;AACrC,iBAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAC9B,mBAAO,KAAK,KAAK,MAAM,OAAO,UAAU,KAAK,MAAM,MAAM,CAAC;AAC1D,iBAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAC9B,mBAAO;AAAA,UACT;AAAA,UACA;AACE,mBAAO,KAAK,eAAe;AAAA,QAC/B;AAAA,MACF;AAAA,MAIA,gBAAgB,WAAY;AAC1B,gBAAQ,KAAK,OAAO;AAAA,UAClB,KAAK;AACH,mBAAO,KAAK,gBAAgB,KAAK;AAAA,UAEnC,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,QAAQ;AAAA,UAEtB,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,YAAY;AAAA,UAE1B,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,SAAS;AAAA,UAEvB,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,aAAa;AAAA,UAE3B,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,WAAW;AAAA,UAEzB,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,QAAQ;AAAA,UAEtB,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,aAAa;AAAA,UAE3B,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,iBAAiB;AAAA,UAE/B,KAAK,KAAK,IAAI,UAAU;AACtB,kBAAM,SAAS,KAAK,KAAK,QAAQ;AACjC,iBAAK,KAAK;AACV,kBAAM,OAAO,KAAK,mBAAmB,GAAG;AACxC,iBAAK,qBAAqB;AAC1B,mBAAO,OAAO,IAAI;AAAA,UACpB;AAAA,UAGA,KAAK,KAAK,IAAI;AAAA,UACd,KAAK,KAAK,IAAI,YAAY;AACxB,kBAAM,SAAS,KAAK;AAAA,cAClB,KAAK,UAAU,KAAK,IAAI,aAAa,aAAa;AAAA,YACpD;AACA,iBAAK,KAAK;AACV,kBAAM,QAAQ,KAAK,mBAAmB,GAAG;AACzC,iBAAK,qBAAqB;AAC1B,mBAAO,OAAO,KAAK;AAAA,UACrB;AAAA,UAEA,KAAK,KAAK,IAAI,UAAU;AACtB,kBAAM,SAAS,KAAK,KAAK,QAAQ;AACjC,kBAAM,QAAQ,KAAK,KAAK,EAAE,UAAU,KAAK,sBAAsB,GAAG;AAClE,iBAAK,qBAAqB;AAC1B,mBAAO,OAAO,KAAK;AAAA,UACrB;AAAA,UAEA,KAAK,KAAK,IAAI,UAAU;AACtB,kBAAM,UAAU,CAAC,KAAK,OAAO,KAAK,MAAM,SAAS,CAAC;AAClD,kBAAM,SAAS,KAAK,KAAK;AACzB,gBAAI,KAAK,KAAK,EAAE,UAAU,KAAK,IAAI,gBAAgB;AAEjD,mBAAK,MAAM,OAAO,KAAK,OAAO;AAC9B,oBAAM,OAAO,KAAK,KAAK,EAAE,UAAU;AACnC,mBAAK,qBAAqB,IAAI;AAC9B,qBAAO,OAAO,uBAAuB,IAAI;AAAA,YAC3C;AACA,gBAAI,KAAK,UAAU,KAAK,IAAI,YAAY;AACtC,qBAAO,KAAK,cAAc,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA,YAC3C;AACA,kBAAM,QAAQ,KAAK,2BAA2B;AAC9C,iBAAK,qBAAqB;AAC1B,mBAAO,OAAO,UAAU,KAAK;AAAA,UAC/B;AAAA,UAEA,KAAK,KAAK,IAAI,QAAQ;AACpB,kBAAM,SAAS,KAAK,KAAK,MAAM;AAC/B,kBAAM,OAAO,KAAK,KAAK;AACvB,kBAAM,YAAY,SAAS,SAAS,SAAS;AAC7C,kBAAM,cAAc,KAAK,KAAK,EAAE,mBAAmB,KAAK,WAAW,GAAG;AACtE,iBAAK,qBAAqB;AAC1B,mBAAO,OAAO,aAAa,SAAS;AAAA,UACtC;AAAA,UAEA,KAAK,KAAK,IAAI,eAAe;AAC3B,kBAAM,QAAQ,KAAK,KAAK;AACxB,gBAAI,WACF,KAAK,MAAM,OAAO,eAAe,IAC7B,KAAK,MAAM,OAAO,KAAK,MAAM,OAAO,eAAe,KACnD;AACN,kBAAM,eAAe,aAAa,QAAQ,aAAa;AAEvD,gBAAI,cAAc;AAChB,kBACE,aAAa,QACb,KAAK,MAAM,OAAO,eAAe,KACjC,KAAK,MAAM,OAAO,KAAK,MAAM,OAAO,eAAe,OAAO,MAC1D;AACA,2BAAW;AAAA,cACb;AAAA,YACF;AACA,kBAAM,SAAS,KAAK,KAAK,QAAQ;AACjC,iBAAK,KAAK;AACV,mBAAO,OAAO,OAAO,eAAe,WAAW,QAAQ,KAAK;AAAA,UAC9D;AAAA,UAEA,KAAK,KAAK,IAAI,SAAS;AACrB,kBAAM,SAAS,KAAK,KAAK,OAAO;AAChC,iBAAK,KAAK,EAAE,OAAO,GAAG,KAAK,KAAK,KAAK;AACrC,kBAAM,YAAY,KAAK,mBAAmB,KAAK,eAAe,GAAG;AACjE,iBAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAC9B,iBAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAC9B,mBAAO,OAAO,SAAS;AAAA,UACzB;AAAA,UAEA,KAAK,KAAK,IAAI,WAAW;AACvB,kBAAM,SAAS,KAAK,KAAK,SAAS;AAClC,kBAAM,OAAO,CAAC;AACd,gBAAI;AACJ,iBAAK,KAAK,EAAE,OAAO,GAAG,KAAK,KAAK,KAAK;AACrC,kBAAM,aAAa,KAAK,kBAAkB;AAC1C,iBAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAC9B,gBAAI,KAAK,UAAU,KAAK;AACtB,mBAAK,KAAK;AACV,qBACE,KAAK,SAAS,KAAK,OACnB,KAAK,UAAU,KAAK,IAAI,cACxB;AAEA,qBAAK,KAAK,KAAK,mBAAmB,CAAC;AAAA,cACrC;AACA,kBACE,KAAK,WAAW,KAChB,KAAK,cACL,KAAK,MAAM,SAAS,KAAK,WACzB;AACA,qBAAK,KAAK,KAAK,KAAK,MAAM,EAAE,CAAC;AAAA,cAC/B;AACA,mBAAK,OAAO,KAAK,IAAI,YAAY,KAAK,KAAK,KAAK;AAChD,mBAAK,qBAAqB;AAC1B,qBAAO,KAAK,IAAI,QAAQ;AAAA,YAC1B,WAAW,KAAK,UAAU,KAAK;AAC7B,mBAAK,KAAK;AACV,qBAAO,KAAK,SAAS,KAAK,OAAO,KAAK,UAAU,KAAK;AAEnD,qBAAK,KAAK,KAAK,mBAAmB,CAAC;AAAA,cACrC;AACA,kBACE,KAAK,WAAW,KAChB,KAAK,cACL,KAAK,MAAM,SAAS,KAAK,WACzB;AACA,qBAAK,KAAK,KAAK,KAAK,MAAM,EAAE,CAAC;AAAA,cAC/B;AACA,mBAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAC9B,qBAAO,KAAK,IAAI,QAAQ;AAAA,YAC1B,OAAO;AACL,mBAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAC9B,qBAAO,KAAK,IAAI,QAAQ;AAAA,YAC1B;AACA,mBAAO,OAAO,YAAY,MAAM,IAAI;AAAA,UACtC;AAAA,UAEA,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,SAAS;AAAA,UAEvB,KAAK,KAAK,IAAI,SAAS;AACrB,kBAAM,SAAS,KAAK,KAAK,OAAO;AAChC,kBAAM,OAAO,KAAK,KAAK,EAAE,UAAU;AACnC,iBAAK,qBAAqB;AAC1B,mBAAO,OAAO,IAAI;AAAA,UACpB;AAAA,UAGA,KAAK,KAAK;AACR,iBAAK,KAAK;AACV,mBAAO;AAAA,UACT;AAAA,UAEA,KAAK,KAAK,IAAI,UAAU;AACtB,kBAAM,SAAS,KAAK,KAAK;AACzB,kBAAM,UAAU,CAAC,KAAK,OAAO,KAAK,MAAM,SAAS,CAAC;AAClD,kBAAM,gBAAgB,KAAK,KAAK;AAChC,gBAAI,YAAY,KAAK,KAAK,YAAY;AAEtC,gBAAI,KAAK,KAAK,EAAE,UAAU,KAAK;AAC7B,0BAAY,UAAU,aAAa;AACnC,mBAAK,KAAK;AACV,qBAAO,OAAO,SAAS,SAAS;AAAA,YAClC,OAAO;AACL,wBAAU,QAAQ;AAAA,YACpB;AAGA,mBAAO,QAAQ;AACf,iBAAK,MAAM,OAAO,KAAK,OAAO;AAC9B,kBAAM,YAAY,KAAK,KAAK,qBAAqB;AACjD,kBAAM,OAAO,KAAK,KAAK,EAAE,UAAU;AACnC,iBAAK,qBAAqB,IAAI;AAC9B,mBAAO,UAAU,IAAI;AAAA,UACvB;AAAA,UAEA,KAAK,KAAK,IAAI,QAAQ;AACpB,kBAAM,SAAS,KAAK,KAAK,MAAM;AAC/B,gBAAI,YAAY;AAChB,gBAAI,KAAK,KAAK,EAAE,OAAO,KAAK,IAAI,QAAQ,GAAG;AACzC,0BAAY,KAAK,KAAK,YAAY;AAClC,oBAAM,OAAO,KAAK,KAAK;AACvB,mBAAK,KAAK;AACV,0BAAY,UAAU,IAAI;AAC1B,mBAAK,qBAAqB;AAAA,YAC5B;AACA,mBAAO,OAAO,SAAS;AAAA,UACzB;AAAA,UAEA,SAAS;AAEP,kBAAM,YAAY,KAAK,KAAK,qBAAqB;AACjD,kBAAM,OAAO,KAAK,UAAU;AAC5B,iBAAK,qBAAqB,IAAI;AAC9B,mBAAO,UAAU,IAAI;AAAA,UACvB;AAAA,QACF;AAAA,MACF;AAAA,MAMA,iBAAiB,SAAU,KAAK;AAC9B,cAAM,SAAS,KAAK,KAAK,OAAO;AAChC,aAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAC9B,cAAM,OAAO,MACT,KAAK,oBAAoB,IACzB,KAAK,sBAAsB;AAC/B,YACE,KAAK,WAAW,KAChB,KAAK,cACL,KAAK,MAAM,SAAS,KAAK,WACzB;AACA,eAAK,KAAK,KAAK,KAAK,MAAM,EAAE,CAAC;AAAA,QAC/B;AACA,aAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAC9B,eAAO,OAAO,MAAM,IAAI;AAAA,MAC1B;AAAA,IACF;AAAA;AAAA;;;AC1bA;AAAA,iDAAAC,UAAAC,SAAA;AAAA;AAOA,IAAAA,QAAO,UAAU;AAAA,MASf,aAAa,WAAY;AACvB,cAAM,SAAS,KAAK,KAAK,QAAQ;AACjC,aAAK,OAAO,KAAK,IAAI,QAAQ,KAAK,KAAK,KAAK;AAC5C,aAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAC9B,cAAM,OAAO,KAAK,UAAU;AAC5B,aAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAC9B,cAAM,YAAY,KAAK,UAAU;AACjC,cAAM,OAAO,KAAK,sBAAsB;AACxC,eAAO,OAAO,MAAM,MAAM,SAAS;AAAA,MACrC;AAAA,MAOA,uBAAuB,WAAY;AAEjC,YAAI,SAAS;AACb,cAAM,SAAS,KAAK,KAAK,OAAO;AAChC,cAAM,QAAQ,CAAC;AACf,YAAI,KAAK,UAAU,KAAK;AACtB,mBAAS;AAAA,QACX,WAAW,KAAK,UAAU,KAAK;AAC7B,mBAAS,KAAK,IAAI;AAAA,QACpB,OAAO;AACL,eAAK,OAAO,CAAC,KAAK,GAAG,CAAC;AAAA,QACxB;AACA,aAAK,KAAK;AAGV,YAAI,KAAK,UAAU,KAAK;AACtB,eAAK,KAAK;AAAA,QACZ;AAEA,eAAO,KAAK,UAAU,KAAK,OAAO,KAAK,UAAU,QAAQ;AACvD,gBAAM,KAAK,KAAK,eAAe,MAAM,CAAC;AAAA,QACxC;AACA,YACE,MAAM,WAAW,KACjB,KAAK,cACL,KAAK,MAAM,SAAS,KAAK,WACzB;AACA,gBAAM,KAAK,KAAK,KAAK,MAAM,EAAE,CAAC;AAAA,QAChC;AAEA,aAAK,OAAO,MAAM,KAAK,KAAK,KAAK;AACjC,YAAI,WAAW,KAAK,IAAI,aAAa;AACnC,eAAK,qBAAqB;AAAA,QAC5B;AACA,eAAO,OAAO,MAAM,KAAK;AAAA,MAC3B;AAAA,MAMA,gBAAgB,SAAU,WAAW;AACnC,cAAM,SAAS,KAAK,KAAK,MAAM;AAC/B,YAAI,OAAO;AACX,YAAI,KAAK,UAAU,KAAK,IAAI,QAAQ;AAClC,iBAAO,KAAK,KAAK,EAAE,UAAU;AAAA,QAC/B,WAAW,KAAK,UAAU,KAAK,IAAI,WAAW;AAE5C,eAAK,KAAK;AAAA,QACZ,OAAO;AACL,eAAK,OAAO,CAAC,KAAK,IAAI,QAAQ,KAAK,IAAI,SAAS,CAAC;AAAA,QACnD;AAEA,aAAK,OAAO,CAAC,KAAK,GAAG,CAAC,KAAK,KAAK,KAAK;AACrC,cAAM,OAAO,KAAK,KAAK,OAAO;AAC9B,cAAM,QAAQ,CAAC;AACf,eACE,KAAK,UAAU,KAAK,OACpB,KAAK,UAAU,aACf,KAAK,UAAU,KAAK,IAAI,UACxB,KAAK,UAAU,KAAK,IAAI,WACxB;AACA,gBAAM,KAAK,KAAK,qBAAqB,CAAC;AAAA,QACxC;AACA,eAAO,OAAO,MAAM,KAAK,MAAM,KAAK,CAAC;AAAA,MACvC;AAAA,IACF;AAAA;AAAA;;;AClGA;AAAA,8CAAAC,UAAAC,SAAA;AAAA;AAOA,IAAAA,QAAO,UAAU;AAAA,MAYf,UAAU,WAAY;AACpB,aAAK,OAAO,KAAK,IAAI,KAAK;AAC1B,cAAM,SAAS,KAAK,KAAK,KAAK;AAC9B,YAAI,SAAS;AACb,cAAM,UAAU,CAAC;AACjB,cAAM,OAAO,KAAK,KAAK,EAAE,eAAe;AAExC,eAAO,KAAK,UAAU,KAAK,IAAI,SAAS;AACtC,gBAAM,OAAO,KAAK,KAAK,OAAO;AAC9B,eAAK,KAAK,EAAE,OAAO,GAAG,KAAK,KAAK,KAAK;AACrC,gBAAM,OAAO,KAAK,UAAU,KAAK,qBAAqB,KAAK,KAAK;AAChE,cAAI,WAAW;AACf,cAAI,KAAK,UAAU,OAAO,KAAK,UAAU,KAAK,IAAI,YAAY;AAC5D,uBAAW,KAAK,cAAc,MAAM,KAAK;AAAA,UAC3C;AACA,eAAK,OAAO,GAAG;AACf,kBAAQ,KAAK,KAAK,KAAK,KAAK,EAAE,eAAe,GAAG,MAAM,QAAQ,CAAC;AAAA,QACjE;AACA,YAAI,KAAK,UAAU,KAAK,IAAI,WAAW;AACrC,mBAAS,KAAK,KAAK,EAAE,eAAe;AAAA,QACtC;AACA,eAAO,OAAO,MAAM,SAAS,MAAM;AAAA,MACrC;AAAA,IACF;AAAA;AAAA;;;AC1CA,IAAAC,iBAAA;AAAA,gDAAAC,UAAAC,SAAA;AAAA;AAOA,IAAAA,QAAO,UAAU;AAAA,MAMf,iBAAiB,SAAU,OAAO;AAChC,cAAM,OAAO,KAAK,KAAK,OAAO;AAC9B,cAAM,QAAQ,CAAC;AAEf,YAAI,KAAK,OAAO,GAAG;AAAG,eAAK,KAAK;AAChC,eAAO,KAAK,SAAS,KAAK,OAAO,KAAK,UAAU,OAAO;AACrD,gBAAM,KAAK,KAAK,qBAAqB,CAAC;AAAA,QACxC;AACA,YACE,MAAM,WAAW,KACjB,KAAK,cACL,KAAK,MAAM,SAAS,KAAK,WACzB;AACA,gBAAM,KAAK,KAAK,KAAK,MAAM,EAAE,CAAC;AAAA,QAChC;AAEA,YAAI,KAAK,OAAO,KAAK;AAAG,eAAK,KAAK;AAClC,aAAK,qBAAqB;AAC1B,eAAO,KAAK,MAAM,KAAK;AAAA,MACzB;AAAA,MAOA,oBAAoB,SAAU,MAAM,WAAW;AAC7C,cAAM,SAAS,CAAC;AAChB,WAAG;AACD,cAAI,KAAK,SAAS,aAAa,KAAK,WAAW,OAAO,OAAO,SAAS,GAAG;AACvE,mBAAO,KAAK,KAAK,KAAK,MAAM,EAAE,CAAC;AAC/B;AAAA,UACF;AACA,iBAAO,KAAK,KAAK,MAAM,MAAM,CAAC,CAAC,CAAC;AAChC,cAAI,KAAK,SAAS,WAAW;AAC3B;AAAA,UACF;AACA,cAAI,KAAK,KAAK,EAAE,SAAS,OAAO,KAAK,WAAW,KAAK;AACnD;AAAA,UACF;AAAA,QACF,SAAS,KAAK,SAAS,KAAK;AAC5B,eAAO;AAAA,MACT;AAAA,MAQA,WAAW,SAAU,MAAM,WAAW,wBAAwB;AAC5D,cAAM,SAAS,CAAC;AAEhB,YAAI,KAAK,SAAS,WAAW;AAC3B,cAAI,wBAAwB;AAC1B,mBAAO,KAAK,OAAO,SAAS,aAAa,KAAK,KAAK,MAAM,EAAE,IAAI,IAAI;AAAA,UACrE;AACA,eAAK,KAAK;AAAA,QACZ;AAEA,YAAI,OAAO,SAAS,YAAY;AAC9B,aAAG;AACD,kBAAM,aAAa,KAAK,MAAM,MAAM,CAAC,CAAC;AACtC,gBAAI,YAAY;AACd,qBAAO,KAAK,UAAU;AAAA,YACxB;AACA,gBAAI,KAAK,SAAS,WAAW;AAC3B;AAAA,YACF;AAAA,UACF,SAAS,KAAK,KAAK,EAAE,SAAS,KAAK;AAAA,QACrC,OAAO;AACL,cAAI,KAAK,OAAO,IAAI,GAAG;AACrB,mBAAO,KAAK,KAAK,KAAK,CAAC;AAAA,UACzB,OAAO;AACL,mBAAO,CAAC;AAAA,UACV;AACA,iBAAO,KAAK,KAAK,EAAE,SAAS,KAAK,KAAK;AACpC,gBAAI,KAAK,SAAS;AAAW;AAE7B,gBAAI,KAAK,KAAK,EAAE,SAAS;AAAM;AAC/B,mBAAO,KAAK,KAAK,KAAK,CAAC;AAAA,UACzB;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAAA,MAiBA,gBAAgB,WAAY;AAC1B,eAAO,KAAK,UAAU,KAAK,qBAAqB,KAAK,KAAK;AAAA,MAC5D;AAAA,MAMA,YAAY,SAAU,IAAI;AACxB,YAAI,QAAQ,KAAK,KAAK,OAAO;AAC7B,aAAK,KAAK;AACV,gBAAQ,MAAM,IAAI;AAClB,cAAM,SAAS,GAAG;AAClB,YAAI,QAAQ;AACV,eAAK,IAAI,cAAc,QAAQ,OAAO,QAAQ,IAAI;AAClD,iBAAO,QAAQ;AAAA,QACjB;AACA,eAAO;AAAA,MACT;AAAA,MAiBA,4BAA4B,WAAY;AACtC,eAAO,KAAK,UAAU,WAAY;AAChC,gBAAM,OAAO,KAAK,KAAK,gBAAgB;AACvC,cAAI,WAAW,KAAK,KAAK,UAAU;AAGnC,cAAI,KAAK,OAAO,KAAK,IAAI,UAAU,GAAG;AACpC,kBAAM,OAAO,KAAK,KAAK,EAAE,UAAU,CAAC;AACpC,iBAAK,KAAK;AACV,uBAAW,SAAS,MAAM,KAAK;AAAA,UACjC,OAAO;AACL,uBAAW,SAAS,QAAQ,KAAK;AAAA,UACnC;AACA,cAAI,KAAK,UAAU,KAAK;AACtB,mBAAO,KAAK,UAAU,KAAK,KAAK,EAAE,UAAU,CAAC;AAAA,UAC/C,OAAO;AACL,mBAAO;AAAA,UACT;AAAA,QACF,GAAG,GAAG;AAAA,MACR;AAAA,MAKA,mBAAmB,WAAY;AAC7B,YAAI,KAAK,UAAU,KAAK,IAAI,WAAW;AACrC,iBAAO,KAAK,KAAK,EAAE,oBAAoB;AAAA,QACzC;AAEA,eAAO;AAAA,MACT;AAAA,MAKA,6BAA6B,WAAY;AACvC,YAAI,KAAK,UAAU,KAAK,IAAI,WAAW;AACrC,iBAAO,KAAK,KAAK,EAAE,eAAe;AAAA,QACpC;AAEA,eAAO;AAAA,MACT;AAAA,MAKA,sBAAsB,WAAY;AAChC,YAAI,KAAK,UAAU,KAAK,IAAI,cAAc;AACxC,iBAAO,KAAK,KAAK,EAAE,eAAe;AAAA,QACpC;AAEA,eAAO;AAAA,MACT;AAAA,IACF;AAAA;AAAA;;;AC1MA;AAAA,mDAAAC,UAAAC,SAAA;AAAA;AAOA,IAAAA,QAAO,UAAU;AAAA,MAiBf,eAAe,SAAU,WAAW,UAAU;AAC5C,YAAI;AAEJ,YAAI,KAAK,UAAU,KAAK;AACtB,iBAAO,KAAK;AAAA,YACV,KAAK,cAAc,KAAK,MAAM,WAAW,QAAQ;AAAA,UACnD;AAAA,QACF;AAGA,YAAI,KAAK,GAAG,CAAC,KAAK,IAAI,YAAY,GAAG,CAAC,GAAG;AACvC,mBAAS,KAAK,wBAAwB,QAAQ;AAAA,QAChD,WACE,KAAK,GAAG;AAAA,UACN,KAAK,IAAI;AAAA,UACT,KAAK,IAAI;AAAA,UACT,KAAK,IAAI;AAAA,UACT,KAAK,IAAI;AAAA,UACT,KAAK,IAAI;AAAA,UACT,KAAK,IAAI;AAAA,QACX,CAAC,GACD;AACA,mBAAS,KAAK,KAAK;AACnB,gBAAM,OAAO,KAAK,oBAAoB;AACtC,cACE,KAAK,SAAS,KAAK,IAAI,kBACvB,KAAK,SAAS,OACd,CAAC,mBAAmB,eAAe,EAAE,QAAQ,KAAK,IAAI,MAAM,IAC5D;AAEA,kBAAM,UAAU,KAAK,KAAK,YAAY;AACtC,gBAAI,YAAY,QAAQ;AACtB,uBAAS,KAAK,QAAQ,OAAO,WAAW,MAAM,KAAK,IAAI,CAAC;AAAA,YAC1D,WAAW,YAAY,SAAS;AAC9B,uBAAS,KAAK,QAAQ,OAAO,WAAW,OAAO,KAAK,IAAI,CAAC;AAAA,YAC3D,WAAW,YAAY,QAAQ;AAC7B,uBAAS,KAAK,QAAQ,OAAO,eAAe,KAAK,IAAI,CAAC;AAAA,YACxD,OAAO;AACL,qBAAO,QAAQ,IAAI;AACnB,uBAAS;AAAA,YACX;AAAA,UACF,OAAO;AAEL,mBAAO,QAAQ,IAAI;AACnB,qBAAS;AAAA,UACX;AAAA,QACF,WAAW,KAAK,UAAU,KAAK,IAAI,UAAU;AAC3C,mBAAS,KAAK,KAAK,iBAAiB;AACpC,gBAAM,MAAM,KAAK,KAAK;AACtB,eAAK,KAAK;AACV,mBAAS,OAAO,GAAG;AAAA,QACrB,OAAO;AACL,eAAK,OAAO,UAAU;AAAA,QACxB;AAGA,YAAI,KAAK,UAAU,KAAK,IAAI,gBAAgB;AAC1C,mBAAS,KAAK,mBAAmB,QAAQ,QAAQ;AAAA,QACnD;AAEA,eAAO,KAAK,8BAA8B,QAAQ,WAAW,QAAQ;AAAA,MACvE;AAAA,MAGA,oBAAoB,SAAU,MAAM,UAAU;AAC5C,cAAM,SAAS,KAAK,KAAK,cAAc;AACvC,YAAI,QAAQ;AACZ,YAAI,KAAK,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,YAAY,GAAG,CAAC,GAAG;AAC9C,mBAAS,KAAK,wBAAwB,QAAQ;AAAA,QAChD,WACE,KAAK,UAAU,KAAK,IAAI,YACxB,KAAK,UAAU,KAAK,IAAI,WACvB,KAAK,WAAW,OAAO,KAAK,GAAG,YAAY,GAC5C;AACA,mBAAS,KAAK,KAAK,YAAY;AAC/B,iBAAO,KAAK,KAAK;AACjB,eAAK,KAAK;AACV,mBAAS,OAAO,IAAI;AAAA,QACtB,WAAW,KAAK,UAAU,KAAK;AAC7B,mBAAS,KAAK,KAAK,SAAS;AAC5B,iBAAO,KAAK,KAAK,EAAE,UAAU;AAC7B,eAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAC9B,mBAAS,OAAO,WAAW,MAAM,IAAI;AACrC,eAAK,OAAO,GAAG;AAAA,QACjB,OAAO;AACL,eAAK,MAAM,CAAC,KAAK,IAAI,YAAY,KAAK,IAAI,QAAQ,CAAC;AAEnD,mBAAS,KAAK,KAAK,YAAY;AAC/B,iBAAO,KAAK,KAAK;AACjB,eAAK,KAAK;AACV,mBAAS,OAAO,IAAI;AAAA,QACtB;AACA,eAAO,OAAO,MAAM,MAAM;AAAA,MAC5B;AAAA,MAEA,WAAW,SAAU,mBAAmB,OAAO;AAC7C,YAAI,OAAO;AACX,YAAI,OAAO;AACX,gBAAQ,KAAK,KAAK,EAAE,OAAO;AAAA,UACzB,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,KAAK,YAAY;AAC7B,mBAAO,KAAK,KAAK;AACjB,iBAAK,KAAK;AACV,mBAAO,KAAK,IAAI;AAEhB,gBAAI,oBAAoB,KAAK,UAAU,KAAK,IAAI,mBAAmB;AACjE,mBAAK,MAAM;AAAA,YACb;AACA;AAAA,UACF,KAAK,KAAK,IAAI;AACZ,mBAAO,KAAK,KAAK,UAAU;AAC3B,mBAAO,KAAK,KAAK,EAAE,UAAU,CAAC;AAC9B,iBAAK,KAAK;AACV,mBAAO,KAAK,MAAM,KAAK;AACvB;AAAA,UACF,KAAK;AACH,mBAAO,KAAK,KAAK;AACjB,iBAAK,KAAK,EAAE,OAAO,CAAC,KAAK,KAAK,KAAK,IAAI,UAAU,CAAC;AAClD,gBAAI,KAAK,UAAU,KAAK;AAEtB,qBAAO,KAAK,KAAK,EAAE,UAAU;AAC7B,mBAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAC9B,qBAAO,KAAK,YAAY,MAAM,IAAI;AAAA,YACpC,OAAO;AAEL,qBAAO,KAAK,UAAU;AACtB,qBAAO,KAAK,YAAY,MAAM,KAAK;AAAA,YACrC;AACA;AAAA,UACF,KAAK;AACH,mBAAO,KAAK,KAAK,cAAc;AAC/B,mBAAO,KAAK,KAAK,EAAE,UAAU;AAC7B,iBAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAC9B,mBAAO,KAAK,MAAM,WAAW,KAAK;AAClC;AAAA,UACF;AACE,iBAAK,MAAM,CAAC,KAAK,IAAI,UAAU,KAAK,IAAI,YAAY,KAAK,GAAG,CAAC;AAE7D,mBAAO,KAAK,KAAK,YAAY;AAC7B,mBAAO,KAAK,KAAK;AACjB,iBAAK,KAAK;AACV,mBAAO,KAAK,IAAI;AAChB;AAAA,QACJ;AAEA,eAAO;AAAA,MACT;AAAA,MAEA,+BAA+B,SAAU,QAAQ,WAAW,UAAU;AACpE,YAAI,MAAM;AACV;AAAqB,iBAAO,KAAK,SAAS,KAAK,KAAK;AAClD,oBAAQ,KAAK,OAAO;AAAA,cAClB,KAAK;AACH,oBAAI,WAAW;AAEb,yBAAO;AAAA,gBACT,OAAO;AACL,2BAAS,KAAK,KAAK,MAAM,EAAE,QAAQ,KAAK,mBAAmB,CAAC;AAAA,gBAC9D;AACA;AAAA,cACF,KAAK;AAAA,cACL,KAAK,KAAK;AACR,sBAAM,SAAS,KAAK;AACpB,sBAAM,kBAAkB,WAAW;AACnC,uBAAO,KAAK,KAAK,cAAc;AAC/B,qBAAK,KAAK;AACV,yBAAS;AACT,oBAAI,UAAU;AACZ,2BAAS,KAAK,uBAAuB;AACrC,uBAAK,OAAO,kBAAkB,MAAM,GAAG,KAAK,KAAK,KAAK;AAAA,gBACxD,OAAO;AACL,wBAAM,qBAAqB,kBACvB,KAAK,UAAU,MACf,KAAK,UAAU;AAEnB,sBAAI,oBAAoB;AACtB,6BAAS,KAAK,UAAU;AACxB,yBAAK,OAAO,kBAAkB,MAAM,GAAG,KAAK,KAAK,KAAK;AAAA,kBACxD,OAAO;AACL,yBAAK,KAAK;AAAA,kBACZ;AAAA,gBACF;AACA,yBAAS,KAAK,QAAQ,MAAM;AAC5B;AAAA,cACF;AAAA,cACA,KAAK,KAAK,IAAI;AAEZ,oBACE,OAAO,SAAS,kBAChB,OAAO,OAAO,SAAS,cACvB;AACA,uBAAK,MAAM;AAAA,gBACb;AAEA,uBAAO,KAAK,KAAK,cAAc;AAC/B,yBAAS,KAAK,QAAQ,KAAK,UAAU,IAAI,CAAC;AAO1C;AAAA,cACF,KAAK,KAAK,IAAI,mBAAmB;AAC/B,uBAAO,KAAK,KAAK,gBAAgB;AACjC,yBAAS,KAAK,QAAQ,KAAK,UAAU,CAAC;AACtC;AAAA,cACF;AAAA,cACA,KAAK,KAAK,IAAI,4BAA4B;AACxC,uBAAO,KAAK,KAAK,wBAAwB;AACzC,yBAAS,KAAK,QAAQ,KAAK,UAAU,CAAC;AACtC;AAAA,cACF;AAAA,cACA;AACE,sBAAM;AAAA,YACV;AAAA,UACF;AACA,eAAO;AAAA,MACT;AAAA,MAIA,wBAAwB,WAAY;AAClC,YAAI,SAAS,KAAK,KAAK;AACvB,YAAI,KAAK,UAAU,KAAK,IAAI,UAAU;AACpC,gBAAM,OAAO,KAAK,KAAK;AACvB,eAAK,KAAK;AACV,mBAAS,OAAO,cAAc,IAAI;AAAA,QACpC,WAAW,KAAK,UAAU,KAAK,IAAI,cAAc;AAC/C,gBAAM,MAAM,KAAK,KAAK;AACtB,eAAK,KAAK;AACV,mBAAS,OAAO,UAAU,KAAK,IAAI;AAAA,QACrC,WAAW,KAAK,UAAU,KAAK;AAC7B,eAAK,KAAK;AACV,gBAAM,MAAM,KAAK,KAAK,KAAK;AAC3B,eAAK,OAAO,KAAK,IAAI,YAAY,KAAK,KAAK,KAAK;AAChD,mBAAS,OAAO,UAAU,KAAK,IAAI;AAAA,QACrC,WAAW,KAAK,UAAU,KAAK,IAAI,YAAY;AAC7C,gBAAM,OAAO,KAAK,KAAK,EAAE,UAAU,CAAC;AACpC,eAAK,KAAK;AACV,mBAAS,OAAO,YAAY,MAAM,KAAK;AAAA,QACzC,OAAO;AACL,eAAK,OAAO;AAAA,YACV,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT;AAAA,YACA,KAAK,IAAI;AAAA,UACX,CAAC;AAED,gBAAM,OAAO,KAAK,KAAK;AACvB,eAAK,KAAK;AACV,mBAAS,OAAO,cAAc,IAAI;AAAA,QACpC;AACA,eAAO;AAAA,MACT;AAAA,MAYA,yBAAyB,SAAU,UAAU;AAC3C,YAAI,SAAS,KAAK,qBAAqB;AACvC,YAAI;AACJ,eAAO,KAAK,SAAS,KAAK,KAAK;AAC7B,gBAAM,OAAO,KAAK,KAAK;AACvB,cAAI,KAAK,SAAS,OAAO,CAAC,UAAU;AAElC,qBAAS,KAAK,KAAK,EAAE,UAAU;AAC/B,iBAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAC9B,qBAAS,KAAK,gBAAgB,QAAQ,MAAM;AAAA,UAC9C,OAAO;AACL,iBAAK,QAAQ;AACb;AAAA,UACF;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAAA,MAMA,sBAAsB,WAAY;AAChC,YAAI,SAAS,KAAK,KAAK,UAAU;AACjC,YAAI;AACJ,YACE,KAAK,OAAO,CAAC,KAAK,IAAI,YAAY,GAAG,CAAC,KACtC,KAAK,UAAU,KAAK,IAAI,YACxB;AAEA,iBAAO,KAAK,KAAK,EAAE,UAAU,CAAC;AAC9B,eAAK,KAAK;AACV,mBAAS,OAAO,MAAM,KAAK;AAAA,QAC7B,OAAO;AACL,cAAI,KAAK,UAAU;AAAK,iBAAK,KAAK;AAElC,kBAAQ,KAAK,OAAO;AAAA,YAClB,KAAK,KAAK;AACR,oBAAM,OAAO,KAAK,KAAK,EAAE,UAAU;AACnC,mBAAK,OAAO,GAAG,KAAK,KAAK,KAAK;AAC9B,uBAAS,OAAO,MAAM,IAAI;AAC1B;AAAA,YACF;AAAA,YACA,KAAK;AACH,uBAAS,OAAO,KAAK,qBAAqB,GAAG,KAAK;AAClD;AAAA,YACF,KAAK,KAAK,IAAI,YAAY;AAExB,qBAAO,KAAK,KAAK,EAAE,UAAU,CAAC;AAC9B,oBAAM,OAAO,KAAK,KAAK,UAAU;AACjC,mBAAK,KAAK;AACV,uBAAS,OAAO,KAAK,MAAM,KAAK,GAAG,KAAK;AACxC;AAAA,YACF;AAAA,YACA;AACE,mBAAK,MAAM,CAAC,KAAK,KAAK,KAAK,IAAI,UAAU,CAAC;AAE1C,qBAAO,KAAK,KAAK;AACjB,mBAAK,KAAK;AACV,uBAAS,OAAO,MAAM,KAAK;AAAA,UAC/B;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAAA,IACF;AAAA;AAAA;;;AClWA;AAAA,0CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAMC,YAAW;AAKjB,aAAS,SAAS,GAAG;AACnB,aAAO,KAAK,OAAO,KAAK,OAAO,CAAC,MAAM,WAAW,CAAC,CAAC,KAAK,SAAS,CAAC;AAAA,IACpE;AAgBA,QAAM,SAAS,SAAU,OAAO,KAAK;AACnC,WAAK,QAAQ;AACb,WAAK,MAAM;AACX,WAAK,MAAM,MAAM;AACjB,WAAK,MAAM,MAAM;AACjB,WAAK,QAAQ;AACb,WAAK,OAAO;AACZ,WAAK,QAAQ;AACb,WAAK,UAAU;AACf,WAAK,aAAa;AAClB,WAAK,gBAAgB;AACrB,WAAK,iBAAiB;AACtB,YAAM,QAAQ,SAAU,MAAM;AAC5B,eAAO,CAAC,MAAM,IAAI;AAAA,MACpB;AACA,WAAK,UAAU;AAAA,QAEb,YAAY,IAAI;AAAA,UACdb;AAAA,QACA,UAAU,IAAI;AAAA,UACZ;AAAA,YACE,KAAK,IAAI;AAAA,YACT;AAAA,YACA;AAAA,YACA,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,UACX,EAAE,IAAI,KAAK;AAAA,QACb;AAAA,QACA,QAAQ,IAAI;AAAA,UACV;AAAA,YACE,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT;AAAA,YACA,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA,KAAK,IAAI;AAAA,UACX,EAAE,IAAI,KAAK;AAAA,QACb;AAAA,QACA,eAAe,IAAI;AAAA,UACjB;AAAA,YACE,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,UACX,EAAE,IAAI,KAAK;AAAA,QACb;AAAA,QACA,gBAAgB,IAAI;AAAA,UAClB;AAAA,YACE,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,UACX,EAAE,IAAI,KAAK;AAAA,QACb;AAAA,QACA,KAAK,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,KAAK,IAAI,aAAa,EAAE,IAAI,KAAK,CAAC;AAAA,QAC/D,MAAM,IAAI;AAAA,UACR;AAAA,YACE;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YAET,KAAK,IAAI;AAAA,YACT;AAAA,YACA,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YAET,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT;AAAA,YACA,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT,KAAK,IAAI;AAAA,YACT;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA,KAAK,IAAI;AAAA,UACX,EAAE,IAAI,KAAK;AAAA,QACb;AAAA,MACF;AAAA,IACF;AAOA,WAAO,UAAU,eAAe,SAAU,OAAO;AAC/C,UAAI,CAAC,SAAS,KAAK,GAAG;AACpB,eAAO,MAAM,QAAQ;AAAA,MACvB,OAAO;AACL,YAAI,SAAS,KAAK;AAAK,iBAAO;AAC9B,eAAO,KAAK,MAAM,OAAO,OAAO,OAAO;AAAA,MACzC;AAAA,IACF;AAOA,WAAO,UAAU,QAAQ,SAAU,MAAM,UAAU;AACjD,WAAK,UAAU,CAAC;AAChB,WAAK,WAAW,YAAY;AAC5B,WAAK,mBAAmB,CAAC,EAAE;AAC3B,UAAI,KAAK,YAAY;AACnB,aAAK,QAAQ,CAAC;AAAA,MAChB,OAAO;AACL,aAAK,QAAQ;AAAA,MACf;AACA,UAAI,KAAK,eAAe;AACtB,aAAK,UAAU,CAAC;AAAA,MAClB,OAAO;AACL,aAAK,UAAU;AAAA,MACjB;AACA,WAAK,YAAY;AACjB,WAAK,YAAY;AACjB,WAAK,MAAM,SAAS,IAAI;AACxB,WAAK,MAAM,aAAa,KAAK;AAC7B,WAAK,MAAM,iBAAiB,KAAK;AACjC,WAAK,SAAS,KAAK,MAAM,OAAO;AAChC,WAAK,YAAY;AACjB,WAAK,gBAAgB;AACrB,YAAM,UAAU,KAAK,KAAK,SAAS;AACnC,YAAM,SAAS,CAAC;AAChB,WAAK,KAAK;AACV,aAAO,KAAK,SAAS,KAAK,KAAK;AAC7B,eAAO,KAAK,KAAK,WAAW,CAAC;AAAA,MAC/B;AAEA,UACE,OAAO,WAAW,KAClB,KAAK,cACL,KAAK,MAAM,SAAS,KAAK,WACzB;AACA,eAAO,KAAK,KAAK,KAAK,MAAM,EAAE,CAAC;AAAA,MACjC;AAEA,WAAK,OAAO;AAAA,QACV,KAAK,MAAM,OAAO;AAAA,QAClB,KAAK,MAAM,OAAO;AAAA,QAClB,KAAK,MAAM;AAAA,MACb;AACA,YAAM,SAAS,QAAQ,QAAQ,KAAK,SAAS,KAAK,OAAO,KAAK,OAAO;AACrE,UAAI,KAAK,OAAO;AACd,cAAM,SAAS,KAAK,IAAI,WAAW;AAEnC,YAAI,OAAO,SAAS,GAAG;AACrB,iBAAO,QAAQ,SAAU,OAAO;AAC9B,gBAAI,MAAM,UAAU;AAElB,sBAAQ;AAAA,gBACN,kBACE,MAAM,SAAS,OACf,cACA,MAAM,SAAS;AAAA,cACnB;AAAA,YACF;AAEA,oBAAQ,IAAI,MAAM,MAAM,KAAK,IAAI,CAAC;AAAA,UACpC,CAAC;AACD,gBAAM,IAAI,MAAM,2BAA2B;AAAA,QAC7C;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAOA,WAAO,UAAU,aAAa,SAAU,SAAS,WAAW,QAAQ,OAAO;AACzE,iBAAW,cAAc,KAAK,MAAM,OAAO;AAC3C,UAAI,CAAC,KAAK,gBAAgB;AACxB,cAAM,MAAM,IAAI;AAAA,UACd;AAAA,UACA,KAAK;AAAA,UACL,KAAK,MAAM,OAAO;AAAA,QACpB;AACA,YAAI,aAAa,KAAK,MAAM,OAAO;AACnC,YAAI,WAAW,KAAK;AACpB,YAAI,eAAe,KAAK,MAAM,OAAO;AACrC,cAAM;AAAA,MACR;AAEA,YAAM,OAAO,KAAK,IAAI,QAAQ,SAAS,MAAM,IAAI;AAAA,QAC/C;AAAA,QACA;AAAA,QACA,KAAK,MAAM,OAAO;AAAA,QAClB;AAAA,MACF;AACA,WAAK,QAAQ,KAAK,IAAI;AACtB,aAAO;AAAA,IACT;AAOA,WAAO,UAAU,QAAQ,SAAU,QAAQ;AACzC,UAAI,MAAM;AACV,UAAI,QAAQ,KAAK,aAAa,KAAK,KAAK;AACxC,UAAI,YAAY;AAEhB,UAAI,KAAK,UAAU,KAAK,KAAK;AAC3B,YAAI,SAAS,KAAK,KAAK,GAAG;AACxB,cAAI,SAAS,KAAK,KAAK;AAEvB,cAAI,OAAO,SAAS,IAAI;AACtB,qBAAS,OAAO,UAAU,GAAG,CAAC,IAAI;AAAA,UACpC;AACA,kBAAQ,MAAM,SAAS,QAAQ,QAAQ;AAAA,QACzC;AACA,eAAO,kBAAkB;AAAA,MAC3B;AACA,UAAI,UAAU,CAAC,MAAM,QAAQ,MAAM,GAAG;AACpC,YAAI,SAAS,MAAM,KAAK,OAAO,WAAW,GAAG;AAC3C,sBAAY,iBAAiB,KAAK,aAAa,MAAM;AAAA,QACvD;AACA,eAAO;AAAA,MACT;AACA,aAAO,KAAK,WAAW,KAAK,WAAW,QAAQ,KAAK;AAAA,IACtD;AASA,WAAO,UAAU,WAAW,WAAY;AACtC,aAAO,IAAIA;AAAA,QACT,KAAK,MAAM,OAAO;AAAA,QAClB,KAAK,MAAM,OAAO;AAAA,QAClB,KAAK,MAAM,OAAO;AAAA,MACpB;AAAA,IACF;AAOA,WAAO,UAAU,OAAO,SAAU,MAAM;AACtC,UAAI,KAAK,YAAY;AACnB,YAAI,OAAO;AACX,YAAI,KAAK,YAAY,KAAK,MAAM,QAAQ;AACtC,iBAAO,KAAK,MAAM,MAAM,KAAK,SAAS;AACtC,eAAK,YAAY,KAAK,MAAM;AAE5B,cAAI,KAAK,OAAO;AAEd,oBAAQ,IAAI,IAAI,MAAM,oBAAoB,IAAI,CAAC;AAE/C,oBAAQ,IAAI,IAAI;AAAA,UAClB;AAAA,QACF;AACA,cAAM,OAAO,KAAK,IAAI,QAAQ,MAAM,MAAM,IAAI;AA8B9C,aAAK,YAAY,SAAU,MAAM;AAC/B,cAAI,KAAK,YAAY,KAAK,MAAM,QAAQ;AACtC,gBAAI,KAAK,WAAW;AAClB,oBAAM,SAAS,KAAK,KAAK;AACzB,kBAAI,MAAM,KAAK;AACf,qBAAO,MAAM,KAAK,MAAM,QAAQ,OAAO;AACrC,oBAAI,KAAK,MAAM,KAAK,SAAS,QAAQ;AACnC;AAAA,gBACF;AAAA,cACF;AACA,kBAAI,MAAM,KAAK,WAAW;AAExB,qBAAK,UAAU;AAAA,kBACb,KAAK,MAAM,MAAM,KAAK,WAAW,GAAG;AAAA,gBACtC;AACA,qBAAK,YAAY;AAAA,cACnB;AAAA,YACF,WAAW,KAAK,UAAU,KAAK,KAAK;AAElC,mBAAK,oBAAoB,KAAK,MAAM,MAAM,KAAK,SAAS,CAAC;AACzD,mBAAK,YAAY,KAAK,MAAM;AAAA,YAC9B;AAAA,UACF;AACA,eAAK,YAAY;AAAA,QACnB,EAAE,KAAK,IAAI;AACX,eAAO;AAAA,MACT;AACA,aAAO,KAAK,IAAI,QAAQ,MAAM,MAAM,IAAI;AAAA,IAC1C;AAQA,WAAO,UAAU,uBAAuB,SAAU,MAAM;AACtD,UAAI,KAAK,UAAU,KAAK;AAGtB,YAAI,QAAQ,KAAK,MAAM,WAAW,KAAK;AACrC,eAAK,aAAa,IAAI;AAAA,QACxB;AAAA,MACF,WAAW,KAAK,UAAU,KAAK,IAAI,iBAAiB,KAAK,UAAU,KAAK,KAAK;AAC3E,aAAK,MAAM,GAAG;AACd,eAAO;AAAA,MACT;AACA,WAAK,KAAK;AACV,aAAO;AAAA,IACT;AAEA,QAAM,cAAc,CAAC,eAAe,eAAe,gBAAgB;AAOnE,WAAO,UAAU,UAAU,WAAY;AACrC,YAAM,QAAQ,IAAI,MAAM,EAAE,MAAM,MAAM,IAAI;AAC1C,UAAI;AACJ,eAAS,SAAS,GAAG,SAAS,MAAM,QAAQ,UAAU;AACpD,eAAO,MAAM,QAAQ,KAAK;AAC1B,YAAI,QAAQ;AACZ,iBAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK;AAE3C,cAAI,KAAK,UAAU,GAAG,IAAI,YAAY,GAAG,MAAM,MAAM,YAAY,IAAI;AACnE,oBAAQ;AACR;AAAA,UACF;AAAA,QACF;AAEA,YAAI,CAAC,OAAO;AACV;AAAA,QACF;AAAA,MACF;AAEA,cAAQ;AAAA,QACN,UACE,KAAK,MAAM,OAAO,aAClB,QACA,KAAK,aAAa,KAAK,KAAK,IAC5B,MACA,KAAK,MAAM,SACX,WAEA;AAAA,MACJ;AACA,aAAO;AAAA,IACT;AAiBA,WAAO,UAAU,SAAS,SAAU,OAAO;AACzC,UAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,YAAI,MAAM,QAAQ,KAAK,KAAK,MAAM,IAAI;AACpC,eAAK,MAAM,KAAK;AAChB,iBAAO;AAAA,QACT;AAAA,MACF,WAAW,KAAK,SAAS,OAAO;AAC9B,aAAK,MAAM,KAAK;AAChB,eAAO;AAAA,MACT;AACA,aAAO;AAAA,IACT;AAQA,WAAO,UAAU,OAAO,WAAY;AAClC,aAAO,KAAK,MAAM;AAAA,IACpB;AAOA,WAAO,UAAU,OAAO,WAAY;AAElC,UAAI,KAAK,UAAU,OAAO,KAAK,MAAM,WAAW,KAAK;AAGnD,aAAK,OAAO;AAAA,UACV,KAAK,MAAM,OAAO;AAAA,UAClB,KAAK,MAAM,OAAO;AAAA,UAClB,KAAK,MAAM;AAAA,QACb;AAAA,MACF;AAGA,WAAK,IAAI;AAGT,UAAI,KAAK,OAAO;AACd,aAAK,QAAQ;AAAA,MACf;AAGA,UAAI,KAAK,YAAY;AACnB,eACE,KAAK,UAAU,KAAK,IAAI,aACxB,KAAK,UAAU,KAAK,IAAI,eACxB;AAEA,cAAI,KAAK,UAAU,KAAK,IAAI,WAAW;AACrC,iBAAK,MAAM,KAAK,KAAK,aAAa,CAAC;AAAA,UACrC,OAAO;AACL,iBAAK,MAAM,KAAK,KAAK,iBAAiB,CAAC;AAAA,UACzC;AAAA,QACF;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAQA,WAAO,UAAU,OAAO,WAAY;AAClC,YAAM,aAAa,KAAK,MAAM,SAAS;AACvC,YAAM,YAAY,KAAK,MAAM,IAAI;AACjC,WAAK,MAAM,SAAS,UAAU;AAC9B,aAAO;AAAA,IACT;AAOA,WAAO,UAAU,MAAM,WAAY;AAEjC,UAAI,KAAK,eAAe;AACtB,WAAG;AAED,eAAK,QAAQ,KAAK,MAAM,IAAI,KAAgC,KAAK;AACjE,cAAI,KAAK,UAAU,KAAK;AAAK,mBAAO;AACpC,cAAI,QAAQ,KAAK,MAAM;AACvB,cACE,OAAO,UAAU,eAAe;AAAA,YAC9B,KAAK,MAAM,OAAO,OAAO;AAAA,YACzB,KAAK;AAAA,UACP,GACA;AACA,oBAAQ;AAAA,cACN,KAAK,MAAM,OAAO,OAAO,OAAO,KAAK;AAAA,cACrC;AAAA,cACA,KAAK,MAAM,OAAO;AAAA,cAClB,KAAK,MAAM,OAAO;AAAA,cAClB,KAAK,MAAM;AAAA,YACb;AAAA,UACF,OAAO;AACL,oBAAQ;AAAA,cACN;AAAA,cACA;AAAA,cACA,KAAK,MAAM,OAAO;AAAA,cAClB,KAAK,MAAM,OAAO;AAAA,cAClB,KAAK,MAAM;AAAA,YACb;AAAA,UACF;AACA,eAAK,QAAQ,KAAK,KAAK;AACvB,cAAI,KAAK,UAAU,KAAK,IAAI,aAAa;AAEvC,iBAAK,QAAQ;AACb,mBAAO;AAAA,UACT,WAAW,KAAK,UAAU,KAAK,IAAI,sBAAsB;AACvD,iBAAK,QAAQ,KAAK,IAAI;AACtB,mBAAO;AAAA,UACT;AAAA,QACF,SACE,KAAK,UAAU,KAAK,IAAI,gBACvB,CAAC,KAAK,eACJ,KAAK,UAAU,KAAK,IAAI,aACvB,KAAK,UAAU,KAAK,IAAI,kBAE5B,KAAK,UAAU,KAAK,IAAI;AAAA,MAE5B,OAAO;AACL,aAAK,QAAQ,KAAK,MAAM,IAAI,KAAgC,KAAK;AAAA,MACnE;AACA,aAAO;AAAA,IACT;AAOA,WAAO,UAAU,KAAK,SAAU,MAAM;AACpC,UAAI,MAAM,QAAQ,IAAI,GAAG;AACvB,eAAO,KAAK,QAAQ,KAAK,KAAK,MAAM;AAAA,MACtC;AACA,aAAO,KAAK,QAAQ,MAAM,IAAI,KAAK,KAAK;AAAA,IAC1C;AAGA;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,EAAE,QAAQ,SAAU,KAAK;AACvB,iBAAW,KAAK,KAAK;AAEnB,YAAI,OAAO,UAAU,eAAe,KAAK,OAAO,WAAW,CAAC,GAAG;AAE7D,gBAAM,IAAI,MAAM,cAAc,IAAI,iCAAiC;AAAA,QACrE;AACA,eAAO,UAAU,KAAK,IAAI;AAAA,MAC5B;AAAA,IACF,CAAC;AAED,IAAAD,QAAO,UAAU;AAAA;AAAA;;;AC3uBjB,IAAAE,kBAAA;AAAA,0CAAAC,UAAAC,SAAA;AAAA;AAaA,QAAM,aAAa;AAAA,MACjB,iBAAiB;AAAA,MACjB,OAAO;AAAA,MACP,2BAA2B;AAAA,MAC3B,mBAAmB;AAAA,MACnB,UAAU;AAAA,MACV,4BAA4B;AAAA,MAC5B,kBAAkB;AAAA,MAClB,cAAc;AAAA,MACd,cAAc;AAAA,MACd,SAAS;AAAA,MACT,SAAS;AAAA,MACT,WAAW;AAAA,MACX,gBAAgB;AAAA,MAChB,QAAQ;AAAA,MACR,WAAW;AAAA,MACX,gBAAgB;AAAA,MAChB,aAAa;AAAA,MACb,gBAAgB;AAAA,MAChB,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,MACT,SAAS;AAAA,MACT,MAAM;AAAA,MACN,OAAO;AAAA,MACP,UAAU;AAAA,MACV,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,UAAU;AAAA,MACV,UAAU;AAAA,MACV,UAAU;AAAA,MACV,QAAQ;AAAA,MACR,eAAe;AAAA,MACf,SAAS;AAAA,MACT,WAAW;AAAA,MACX,WAAW;AAAA,MACX,OAAO;AAAA,MACP,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,WAAW;AAAA,MACX,SAAS;AAAA,MACT,cAAc;AAAA,MACd,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,cAAc;AAAA,MACd,eAAe;AAAA,MACf,aAAa;AAAA,MACb,aAAa;AAAA,MACb,gBAAgB;AAAA,MAChB,aAAa;AAAA,MACb,aAAa;AAAA,MACb,YAAY;AAAA,MACZ,aAAa;AAAA,MACb,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,OAAO;AAAA,MACP,OAAO;AAAA,MACP,cAAc;AAAA,MACd,eAAe;AAAA,MACf,cAAc;AAAA,MACd,eAAe;AAAA,MACf,eAAe;AAAA,MACf,MAAM;AAAA,MACN,MAAM;AAAA,MACN,gBAAgB;AAAA,MAChB,oBAAoB;AAAA,MACpB,YAAY;AAAA,MACZ,gBAAgB;AAAA,MAChB,uBAAuB;AAAA,MACvB,uBAAuB;AAAA,MACvB,cAAc;AAAA,MACd,YAAY;AAAA,MACZ,eAAe;AAAA,MACf,eAAe;AAAA,MACf,cAAc;AAAA,MACd,eAAe;AAAA,MACf,aAAa;AAAA,MACb,cAAc;AAAA,MACd,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,SAAS;AAAA,MACT,cAAc;AAAA,MACd,YAAY;AAAA,MACZ,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,SAAS;AAAA,MACT,SAAS;AAAA,MACT,WAAW;AAAA,MACX,aAAa;AAAA,MACb,cAAc;AAAA,MACd,OAAO;AAAA,MACP,UAAU;AAAA,MACV,aAAa;AAAA,MACb,WAAW;AAAA,MACX,SAAS;AAAA,MACT,OAAO;AAAA,MACP,aAAa;AAAA,MACb,UAAU;AAAA,MACV,QAAQ;AAAA,MACR,aAAa;AAAA,MACb,QAAQ;AAAA,MACR,WAAW;AAAA,MACX,UAAU;AAAA,MACV,cAAc;AAAA,MACd,YAAY;AAAA,MACZ,4BAA4B;AAAA,MAC5B,WAAW;AAAA,MACX,WAAW;AAAA,MACX,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,WAAW;AAAA,MACX,YAAY;AAAA,MACZ,UAAU;AAAA,MACV,QAAQ;AAAA,MACR,iBAAiB;AAAA,MACjB,eAAe;AAAA,MACf,WAAW;AAAA,MACX,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,sBAAsB;AAAA,MACtB,aAAa;AAAA,MACb,cAAc;AAAA,MACd,WAAW;AAAA,MACX,eAAe;AAAA,MACf,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,OAAO;AAAA,MACP,aAAa;AAAA,MACb,aAAa;AAAA,MACb,kBAAkB;AAAA,MAClB,MAAM;AAAA,MACN,4BAA4B;AAAA,MAC5B,SAAS;AAAA,MACT,aAAa;AAAA,MACb,QAAQ;AAAA,MACR,aAAa;AAAA,MACb,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,MAClB,wBAAwB;AAAA,IAC1B;AAWA,QAAM,SAAS;AAAA,MACb,QAAQ,OAAO,QAAQ,UAAU,EAAE;AAAA,QACjC,CAAC,QAAQ,CAAC,KAAK,KAAK,OAAO,EAAE,GAAG,QAAQ,CAAC,QAAQ,IAAI;AAAA,QACrD,CAAC;AAAA,MACH;AAAA,MACA,OAAO;AAAA,IACT;AAEA,IAAAA,QAAO,UAAU,OAAO,OAAO,MAAM;AAAA;AAAA;;;AChLrC;AAAA,gDAAAC,UAAAC,SAAA;AAAA;AAeA,QAAM,WAAW,SAAU,QAAQ,OAAO,KAAK;AAC7C,WAAK,SAAS;AACd,WAAK,QAAQ;AACb,WAAK,MAAM;AAAA,IACb;AAEA,IAAAA,QAAO,UAAU;AAAA;AAAA;;;ACrBjB;AAAA,4CAAAC,UAAAC,SAAA;AAAA;AAgBA,QAAM,OAAO,SAASC,MAAK,MAAM,MAAM,UAAU;AAC/C,WAAK,OAAO;AACZ,UAAI,MAAM;AACR,aAAK,kBAAkB;AAAA,MACzB;AACA,UAAI,UAAU;AACZ,aAAK,MAAM;AAAA,MACb;AAAA,IACF;AAQA,SAAK,UAAU,sBAAsB,SAAU,MAAM;AACnD,WAAK,mBAAmB;AAAA,IAC1B;AAOA,SAAK,UAAU,UAAU,SAAU,MAAM;AACvC,UAAI,CAAC,MAAM;AAET,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF;AACA,UAAI,KAAK,iBAAiB;AACxB,YAAI,KAAK,iBAAiB;AACxB,eAAK,kBAAkB,MAAM;AAAA,YAC3B,KAAK;AAAA,YACL,KAAK;AAAA,UACP;AAAA,QACF,OAAO;AACL,eAAK,kBAAkB,KAAK;AAAA,QAC9B;AAAA,MACF;AACA,UAAI,KAAK,kBAAkB;AACzB,YAAI,KAAK,kBAAkB;AACzB,eAAK,mBAAmB,MAAM;AAAA,YAC5B,KAAK;AAAA,YACL,KAAK;AAAA,UACP;AAAA,QACF,OAAO;AACL,eAAK,mBAAmB,KAAK;AAAA,QAC/B;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAQA,SAAK,UAAU,eAAe,SAAU,QAAQ;AAC9C,UAAI,KAAK,KAAK;AACZ,YAAI,KAAK,IAAI,KAAK;AAChB,eAAK,IAAI,IAAI,OAAO,OAAO,MAAM,OAAO;AACxC,eAAK,IAAI,IAAI,SAAS,OAAO,MAAM,OAAO;AAC1C,eAAK,IAAI,IAAI,SAAS,OAAO,MAAM;AAAA,QACrC;AACA,YAAI,OAAO,IAAI,YAAY;AACzB,eAAK,IAAI,SAAS,OAAO,MAAM,OAAO;AAAA,YACpC,KAAK,IAAI,MAAM;AAAA,YACf,OAAO,MAAM;AAAA,UACf;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAUA,SAAK,UAAU,SAAU,MAAM,aAAa;AAC1C,kBAAY,YAAY,OAAO,OAAO,KAAK,SAAS;AACpD,kBAAY,UAAU,KAAK;AAC3B,kBAAY,UAAU,cAAc;AACpC,kBAAY,OAAO;AACnB,aAAO;AAAA,IACT;AAEA,IAAAD,QAAO,UAAU;AAAA;AAAA;;;AC9GjB;AAAA,kDAAAE,UAAAC,SAAA;AAAA;AAOA,QAAM,OAAO;AACb,QAAM,OAAO;AASb,IAAAA,QAAO,UAAU,KAAK,QAAQ,MAAM,SAAS,WAAW,MAAM,MAAM,UAAU;AAC5E,WAAK,MAAM,MAAM,CAAC,QAAQ,MAAM,MAAM,QAAQ,CAAC;AAAA,IACjD,CAAC;AAAA;AAAA;;;ACnBD,IAAAC,iBAAA;AAAA,6CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,OAAO;AACb,QAAM,OAAO;AA4Bb,IAAAA,QAAO,UAAU,KAAK;AAAA,MACpB;AAAA,MACA,SAASC,OAAM,WAAW,OAAO,MAAM,UAAU;AAC/C,aAAK,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AACvC,aAAK,QAAQ;AACb,aAAK,YAAY;AAAA,MACnB;AAAA,IACF;AAAA;AAAA;;;AC3CA;AAAA,iDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,aAAa;AACnB,QAAM,OAAO;AAcb,IAAAA,QAAO,UAAU,WAAW;AAAA,MAC1B;AAAA,MACA,SAAS,QACP,MACA,OACA,MACA,MACA,UACA,UACA,MACA,UACA;AACA,mBAAW,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC7C,aAAK,YAAY;AACjB,aAAK,QAAQ;AACb,aAAK,OAAO;AACZ,aAAK,OAAO;AACZ,aAAK,WAAW;AAChB,aAAK,WAAW,YAAY;AAAA,MAC9B;AAAA,IACF;AAAA;AAAA;;;AC1CA;AAAA,8CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,aAAa;AACnB,QAAM,OAAO;AAWb,IAAAA,QAAO,UAAU,WAAW;AAAA,MAC1B;AAAA,MACA,SAAS,OAAO,MAAM,OAAO,UAAU,MAAM,UAAU;AACrD,mBAAW,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC7C,aAAK,OAAO;AACZ,aAAK,QAAQ;AACb,aAAK,WAAW;AAAA,MAClB;AAAA,IACF;AAAA;AAAA;;;AC3BA;AAAA,iDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,aAAa;AACnB,QAAM,OAAO;AAWb,IAAAA,QAAO,UAAU,WAAW;AAAA,MAC1B;AAAA,MACA,SAAS,UAAU,MAAM,OAAO,MAAM,UAAU;AAC9C,mBAAW,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC7C,aAAK,OAAO;AACZ,aAAK,QAAQ;AAAA,MACf;AAAA,IACF;AAAA;AAAA;;;AC1BA,IAAAC,qBAAA;AAAA,iDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,OAAO;AACb,QAAM,OAAO;AAUb,IAAAA,QAAO,UAAU,KAAK;AAAA,MACpB;AAAA,MACA,SAAS,UAAU,MAAM,MAAM,MAAM,UAAU;AAC7C,aAAK,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AACvC,aAAK,OAAO;AACZ,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAAA;AAAA;;;ACzBA;AAAA,iDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,OAAO;AACb,QAAM,OAAO;AASb,IAAAA,QAAO,UAAU,KAAK,QAAQ,MAAM,SAAS,UAAU,OAAO,MAAM,UAAU;AAC5E,WAAK,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AACvC,WAAK,QAAQ,SAAS,CAAC;AAAA,IACzB,CAAC;AAAA;AAAA;;;ACpBD;AAAA,iDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,OAAO;AACb,QAAM,OAAO;AAQb,IAAAA,QAAO,UAAU,KAAK,QAAQ,MAAM,SAAS,UAAU,MAAM,MAAM,UAAU;AAC3E,WAAK,MAAM,MAAM,CAAC,QAAQ,MAAM,MAAM,QAAQ,CAAC;AAAA,IACjD,CAAC;AAAA;AAAA;;;AClBD;AAAA,2CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AAUb,IAAAA,QAAO,UAAU,UAAU;AAAA,MACzB;AAAA,MACA,SAAS,IAAI,MAAM,MAAM,OAAO,MAAM,UAAU;AAC9C,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,OAAO;AACZ,aAAK,OAAO;AACZ,aAAK,QAAQ;AAAA,MACf;AAAA,IACF;AAAA;AAAA;;;AC1BA,IAAAC,qBAAA;AAAA,iDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,OAAO;AACb,QAAM,OAAO;AAQb,IAAAA,QAAO,UAAU,KAAK,QAAQ,MAAM,SAAS,UAAU,MAAM,MAAM,UAAU;AAC3E,WAAK,MAAM,MAAM,CAAC,QAAQ,MAAM,MAAM,QAAQ,CAAC;AAAA,IACjD,CAAC;AAAA;AAAA;;;AClBD;AAAA,6CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AASb,IAAAA,QAAO,UAAU,UAAU;AAAA,MACzB;AAAA,MACA,SAAS,MAAM,MAAM,UAAU,MAAM,UAAU;AAC7C,kBAAU,MAAM,MAAM,CAAC,QAAQ,MAAM,MAAM,QAAQ,CAAC;AACpD,aAAK,WAAW,SAAS,OAAO,OAAO;AAAA,MACzC;AAAA,IACF;AAAA;AAAA;;;ACvBA;AAAA,+CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,aAAa;AACnB,QAAM,OAAO;AAUb,IAAAA,QAAO,UAAU,WAAW;AAAA,MAC1B;AAAA,MACA,SAAS,QAAQ,MAAM,OAAO,KAAK,MAAM,UAAU;AACjD,mBAAW,MAAM,MAAM,CAAC,QAAQ,MAAM,MAAM,QAAQ,CAAC;AACrD,aAAK,QAAQ;AACb,YAAI,KAAK;AACP,eAAK,MAAM;AAAA,QACb;AAAA,MACF;AAAA,IACF;AAAA;AAAA;;;AC3BA;AAAA,+CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,UAAU;AAChB,QAAM,OAAO;AASb,IAAAA,QAAO,UAAU,QAAQ;AAAA,MACvB;AAAA,MACA,SAASC,SAAQ,OAAO,KAAK,MAAM,UAAU;AAC3C,gBAAQ,MAAM,MAAM,CAAC,MAAM,OAAO,KAAK,MAAM,QAAQ,CAAC;AAAA,MACxD;AAAA,IACF;AAAA;AAAA;;;ACtBA;AAAA,6CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AASb,IAAAA,QAAO,UAAU,UAAU,QAAQ,MAAM,SAAS,MAAM,OAAO,MAAM,UAAU;AAC7E,gBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,WAAK,QAAQ;AAAA,IACf,CAAC;AAAA;AAAA;;;ACpBD;AAAA,6CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,aAAa;AACnB,QAAM,OAAO;AASb,IAAAA,QAAO,UAAU,WAAW,QAAQ,MAAM,SAAS,MAAM,MAAM,MAAM,UAAU;AAC7E,iBAAW,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC7C,WAAK,OAAO;AAAA,IACd,CAAC;AAAA;AAAA;;;ACpBD;AAAA,4CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,aAAa;AACnB,QAAM,OAAO;AAUb,IAAAA,QAAO,UAAU,WAAW;AAAA,MAC1B;AAAA,MACA,SAAS,KAAK,MAAM,MAAM,MAAM,UAAU;AACxC,mBAAW,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC7C,aAAK,OAAO;AACZ,aAAK,YAAY;AAAA,MACnB;AAAA,IACF;AAAA;AAAA;;;ACzBA;AAAA,4CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AAUb,IAAAA,QAAO,UAAU,UAAU;AAAA,MACzB;AAAA,MACA,SAAS,KAAK,MAAM,MAAM,MAAM,UAAU;AACxC,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,OAAO;AACZ,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAAA;AAAA;;;ACzBA;AAAA,4CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AAWb,IAAAA,QAAO,UAAU,UAAU;AAAA,MACzB;AAAA,MACA,SAAS,KAAK,MAAM,KAAK,MAAM,MAAM,UAAU;AAC7C,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,OAAO;AACZ,aAAK,MAAM;AACX,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAAA;AAAA;;;AC3BA;AAAA,6CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AAYb,IAAAA,QAAO,UAAU,UAAU;AAAA,MACzB;AAAA,MACA,SAAS,MAAM,MAAM,MAAM,UAAU,MAAM,UAAU;AACnD,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,OAAO;AACZ,aAAK,OAAO;AACZ,aAAK,WAAW;AAAA,MAClB;AAAA,IACF;AAAA;AAAA;;;AC5BA;AAAA,mDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AAEb,QAAM,eAAe;AACrB,QAAM,YAAY;AAClB,QAAM,eAAe;AACrB,QAAM,aAAa;AASnB,QAAM,cAAc,UAAU;AAAA,MAC5B;AAAA,MACA,SAASC,aAAY,MAAM,MAAM,MAAM,UAAU;AAC/C,kBAAU,MAAM,MAAM,CAAC,QAAQ,MAAM,MAAM,QAAQ,CAAC;AACpD,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAUA,gBAAY,UAAU,aAAa,SAAU,OAAO;AAClD,WAAK,aAAa,MAAM,OAAO;AAC/B,WAAK,UAAU,MAAM,OAAO;AAC5B,UAAI,KAAK,SAAS,SAAS;AACzB,YAAI,MAAM,OAAO,IAAI;AACnB,eAAK,aAAa;AAAA,QACpB,WAAW,MAAM,OAAO,MAAM;AAE5B,eAAK,aAAa;AAAA,QACpB,WAAW,MAAM,OAAO,GAAG;AACzB,eAAK,aAAa;AAAA,QACpB,WAAW,MAAM,OAAO,GAAG;AACzB,eAAK,aAAa;AAAA,QACpB,WAAW,MAAM,OAAO,GAAG;AACzB,eAAK,aAAa;AAAA,QACpB;AACA,aAAK,WAAW,MAAM,OAAO;AAAA,MAC/B;AAAA,IACF;AAEA,IAAAD,QAAO,UAAU;AAAA;AAAA;;;AC1DjB,IAAAE,iBAAA;AAAA,6CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,cAAc;AACpB,QAAM,OAAO;AAeb,IAAAA,QAAO,UAAU,YAAY;AAAA,MAC3B;AAAA,MACA,SAAS,MAAM,MAAM,KAAK,MAAM,MAAM,OAAO,MAAM,UAAU;AAC3D,oBAAY,MAAM,MAAM,CAAC,MAAM,MAAM,MAAM,QAAQ,CAAC;AACpD,aAAK,cAAc,OAAO,QAAQ;AAClC,aAAK,UAAU;AACf,aAAK,aAAa;AAClB,aAAK,OAAO;AACZ,aAAK,aAAa,CAAC;AACnB,aAAK,WAAW,KAAK;AAAA,MACvB;AAAA,IACF;AAAA;AAAA;;;AClCA;AAAA,yDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AASb,IAAAA,QAAO,UAAU,UAAU;AAAA,MACzB;AAAA,MACA,SAAS,kBAAkB,MAAM,WAAW,MAAM,UAAU;AAC1D,kBAAU,MAAM,MAAM,CAAC,QAAQ,MAAM,MAAM,QAAQ,CAAC;AACpD,aAAK,YAAY;AAAA,MACnB;AAAA,IACF;AAAA;AAAA;;;ACvBA;AAAA,qDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,oBAAoB;AAC1B,QAAM,OAAO;AAEb,QAAM,eAAe;AACrB,QAAM,YAAY;AAClB,QAAM,eAAe;AACrB,QAAM,aAAa;AAUnB,QAAM,gBAAgB,kBAAkB;AAAA,MACtC;AAAA,MACA,SAASC,eAAc,MAAM,WAAW,OAAO,YAAY,MAAM,UAAU;AACzE,0BAAkB,MAAM,MAAM,CAAC,QAAQ,MAAM,WAAW,MAAM,QAAQ,CAAC;AACvE,aAAK,WAAW,KAAK;AACrB,aAAK,aAAa;AAAA,MACpB;AAAA,IACF;AAUA,kBAAc,UAAU,aAAa,SAAU,OAAO;AACpD,UAAI,MAAM,OAAO,IAAI;AACnB,aAAK,aAAa;AAAA,MACpB,WAAW,MAAM,OAAO,MAAM;AAE5B,aAAK,aAAa;AAAA,MACpB,WAAW,MAAM,OAAO,GAAG;AACzB,aAAK,aAAa;AAAA,MACpB,WAAW,MAAM,OAAO,GAAG;AACzB,aAAK,aAAa;AAAA,MACpB,WAAW,MAAM,OAAO,GAAG;AACzB,aAAK,aAAa;AAAA,MACpB;AAAA,IACF;AAEA,IAAAD,QAAO,UAAU;AAAA;AAAA;;;ACvDjB;AAAA,6CAAAE,UAAAC,SAAA;AAAA;AAOA,QAAM,aAAa;AACnB,QAAM,OAAO;AASb,IAAAA,QAAO,UAAU,WAAW,QAAQ,MAAM,SAAS,MAAM,MAAM,MAAM,UAAU;AAC7E,iBAAW,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC7C,WAAK,OAAO;AAAA,IACd,CAAC;AAAA;AAAA;;;ACpBD;AAAA,+CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,aAAa;AACnB,QAAM,OAAO;AAgBb,IAAAA,QAAO,UAAU,WAAW;AAAA,MAC1B;AAAA,MACA,SAAS,QACP,MACA,OACA,MACA,MACA,UACA,UACA,MACA,UACA;AACA,mBAAW,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC7C,aAAK,OAAO;AACZ,aAAK,YAAY;AACjB,aAAK,QAAQ;AACb,aAAK,OAAO;AACZ,aAAK,WAAW;AAChB,aAAK,WAAW,YAAY;AAC5B,aAAK,OAAO;AACZ,aAAK,aAAa,CAAC;AAAA,MACrB;AAAA,IACF;AAAA;AAAA;;;AC9CA,IAAAC,mBAAA;AAAA,+CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,OAAO;AASb,IAAAA,QAAO,UAAU,KAAK;AAAA,MACpB;AAAA,MACA,SAAS,QAAQ,MAAM,OAAO,MAAM,UAAU;AAC5C,aAAK,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AACvC,aAAK,QAAQ;AAAA,MACf;AAAA,IACF;AAAA;AAAA;;;ACtBA;AAAA,oDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,UAAU;AAChB,QAAM,OAAO;AAQb,IAAAA,QAAO,UAAU,QAAQ;AAAA,MACvB;AAAA,MACA,SAAS,aAAa,OAAO,MAAM,UAAU;AAC3C,gBAAQ,MAAM,MAAM,CAAC,MAAM,OAAO,MAAM,QAAQ,CAAC;AAAA,MACnD;AAAA,IACF;AAAA;AAAA;;;ACrBA;AAAA,mDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,UAAU;AAChB,QAAM,OAAO;AAQb,IAAAA,QAAO,UAAU,QAAQ;AAAA,MACvB;AAAA,MACA,SAAS,YAAY,OAAO,MAAM,UAAU;AAC1C,gBAAQ,MAAM,MAAM,CAAC,MAAM,OAAO,MAAM,QAAQ,CAAC;AAAA,MACnD;AAAA,IACF;AAAA;AAAA;;;ACrBA;AAAA,gDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,OAAO;AACb,QAAM,OAAO;AAUb,IAAAA,QAAO,UAAU,KAAK;AAAA,MACpB;AAAA,MACA,SAAS,SAAS,MAAM,OAAO,MAAM,UAAU;AAC7C,aAAK,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AACvC,aAAK,OAAO;AACZ,aAAK,QAAQ;AAAA,MACf;AAAA,IACF;AAAA;AAAA;;;ACzBA;AAAA,gDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AASb,IAAAA,QAAO,UAAU,UAAU;AAAA,MACzB;AAAA,MACA,SAAS,SAAS,OAAO,MAAM,UAAU;AACvC,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,QAAQ;AAAA,MACf;AAAA,IACF;AAAA;AAAA;;;ACvBA;AAAA,+CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,QAAQ;AACd,QAAM,OAAO;AAWb,QAAM,UAAU,MAAM;AAAA,MACpB;AAAA,MACA,SAASC,SAAQ,YAAY,MAAM,MAAM,MAAM,UAAU;AACvD,cAAM,MAAM,MAAM,CAAC,MAAM,MAAM,MAAM,QAAQ,CAAC;AAC9C,aAAK,aAAa;AAClB,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAaA,YAAQ,aAAa;AAarB,YAAQ,aAAa;AAgBrB,YAAQ,YAAY;AAEpB,IAAAD,QAAO,UAAU;AAAA;AAAA;;;ACtEjB;AAAA,wDAAAE,UAAAC,SAAA;AAAA;AAOA,QAAM,OAAO;AACb,QAAM,OAAO;AAUb,IAAAA,QAAO,UAAU,KAAK;AAAA,MACpB;AAAA,MACA,SAAS,iBAAiB,KAAK,OAAO,MAAM,UAAU;AACpD,aAAK,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AACvC,aAAK,MAAM;AACX,aAAK,QAAQ;AAAA,MACf;AAAA,IACF;AAAA;AAAA;;;ACzBA;AAAA,0CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AAUb,IAAAA,QAAO,UAAU,UAAU;AAAA,MACzB;AAAA,MACA,SAAS,GAAG,MAAM,MAAM,MAAM,UAAU;AACtC,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,OAAO;AACZ,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAAA;AAAA;;;ACzBA;AAAA,4CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AAUb,IAAAA,QAAO,UAAU,UAAU;AAAA,MACzB;AAAA,MACA,SAAS,KAAK,aAAa,WAAW,MAAM,UAAU;AACpD,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,YAAY;AACjB,aAAK,cAAc;AAAA,MACrB;AAAA,IACF;AAAA;AAAA;;;ACzBA;AAAA,6CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,aAAa;AACnB,QAAM,OAAO;AAQb,IAAAA,QAAO,UAAU,WAAW;AAAA,MAC1B;AAAA,MACA,SAAS,MAAM,YAAY,MAAM,UAAU;AACzC,mBAAW,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC7C,aAAK,aAAa;AAAA,MACpB;AAAA,IACF;AAAA;AAAA;;;ACtBA;AAAA,gDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,UAAU;AAChB,QAAM,OAAO;AAWb,QAAM,WAAW,QAAQ;AAAA,MACvB;AAAA,MACA,SAASC,UAAS,OAAO,KAAK,MAAM,MAAM,UAAU;AAClD,gBAAQ,MAAM,MAAM,CAAC,MAAM,OAAO,KAAK,MAAM,QAAQ,CAAC;AACtD,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAWA,aAAS,cAAc;AAWvB,aAAS,aAAa;AActB,aAAS,eAAe;AAWxB,aAAS,cAAc;AAEvB,IAAAD,QAAO,UAAU;AAAA;AAAA;;;AC1EjB;AAAA,oDAAAE,UAAAC,SAAA;AAAA;AAOA,QAAM,aAAa;AACnB,QAAM,OAAO;AAWb,IAAAA,QAAO,UAAU,WAAW;AAAA,MAC1B;AAAA,MACA,SAAS,aAAa,YAAY,QAAQ,OAAO,MAAM,UAAU;AAC/D,mBAAW,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC7C,aAAK,aAAa;AAClB,aAAK,SAAS;AACd,aAAK,QAAQ;AAAA,MACf;AAAA,IACF;AAAA;AAAA;;;AC3BA;AAAA,6CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,aAAa;AACnB,QAAM,OAAO;AAYb,IAAAA,QAAO,UAAU,WAAW;AAAA,MAC1B;AAAA,MACA,SAAS,MAAM,KAAK,OAAO,OAAO,QAAQ,MAAM,UAAU;AACxD,mBAAW,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC7C,aAAK,MAAM;AACX,aAAK,QAAQ;AACb,aAAK,QAAQ;AACb,aAAK,SAAS;AAAA,MAChB;AAAA,IACF;AAAA;AAAA;;;AC7BA,IAAAC,gBAAA;AAAA,4CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,cAAc;AACpB,QAAM,OAAO;AAYb,IAAAA,QAAO,UAAU,YAAY;AAAA,MAC3B;AAAA,MACA,SAAS,KAAK,MAAM,WAAW,MAAM,MAAM,MAAM,UAAU;AACzD,oBAAY,MAAM,MAAM,CAAC,MAAM,MAAM,MAAM,QAAQ,CAAC;AACpD,aAAK,YAAY;AACjB,aAAK,aAAa;AAClB,aAAK,OAAO;AACZ,aAAK,aAAa,CAAC;AAAA,MACrB;AAAA,IACF;AAAA;AAAA;;;AC7BA;AAAA,gDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,OAAO;AACb,QAAM,OAAO;AAUb,IAAAA,QAAO,UAAU,KAAK;AAAA,MACpB;AAAA,MACA,SAAS,SAAS,MAAM,OAAO,MAAM,UAAU;AAC7C,aAAK,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AACvC,aAAK,OAAO;AACZ,aAAK,QAAQ;AAAA,MACf;AAAA,IACF;AAAA;AAAA;;;ACzBA;AAAA,6CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,OAAO;AACb,QAAM,OAAO;AAYb,IAAAA,QAAO,UAAU,KAAK;AAAA,MACpB;AAAA,MACA,SAASC,OAAM,SAAS,OAAO,MAAM,UAAU,MAAM,UAAU;AAC7D,aAAK,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AACvC,aAAK,UAAU;AACf,aAAK,QAAQ;AACb,aAAK,OAAO;AACZ,aAAK,WAAW;AAAA,MAClB;AAAA,IACF;AAAA;AAAA;;;AC7BA;AAAA,4CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,aAAa;AACnB,QAAM,OAAO;AASb,IAAAA,QAAO,UAAU,WAAW;AAAA,MAC1B;AAAA,MACA,SAAS,KAAK,QAAQ,MAAM,UAAU;AACpC,mBAAW,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC7C,aAAK,SAAS;AAAA,MAChB;AAAA,IACF;AAAA;AAAA;;;ACvBA;AAAA,4CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,aAAa;AACnB,QAAM,OAAO;AAUb,IAAAA,QAAO,UAAU,WAAW;AAAA,MAC1B;AAAA,MACA,SAAS,KAAK,YAAY,QAAQ,MAAM,UAAU;AAChD,mBAAW,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC7C,aAAK,aAAa;AAClB,aAAK,SAAS;AAAA,MAChB;AAAA,IACF;AAAA;AAAA;;;ACzBA;AAAA,2DAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AASb,IAAAA,QAAO,UAAU,UAAU;AAAA,MACzB;AAAA,MACA,SAAS,oBAAoB,MAAM,MAAM,UAAU;AACjD,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,aAAa;AAAA,MACpB;AAAA,IACF;AAAA;AAAA;;;ACvBA;AAAA,2CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AAcb,IAAAA,QAAO,UAAU,UAAU;AAAA,MACzB;AAAA,MACA,SAAS,IAAI,MAAM,MAAM,WAAW,MAAM,WAAW,MAAM,UAAU;AACnE,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,OAAO;AACZ,aAAK,OAAO;AACZ,aAAK,YAAY;AACjB,aAAK,YAAY;AACjB,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAAA;AAAA;;;AChCA;AAAA,+CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AAcb,IAAAA,QAAO,UAAU,UAAU;AAAA,MACzB;AAAA,MACA,SAAS,QAAQ,QAAQ,KAAK,OAAO,MAAM,WAAW,MAAM,UAAU;AACpE,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,SAAS;AACd,aAAK,MAAM;AACX,aAAK,QAAQ;AACb,aAAK,YAAY;AACjB,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAAA;AAAA;;;AChCA,IAAAC,oBAAA;AAAA,gDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,cAAc;AACpB,QAAM,OAAO;AAcb,IAAAA,QAAO,UAAU,YAAY;AAAA,MAC3B;AAAA,MACA,SAAS,UAAU,MAAM,MAAM,OAAO,MAAM,UAAU,MAAM,UAAU;AACpE,oBAAY,MAAM,MAAM,CAAC,MAAM,MAAM,MAAM,QAAQ,CAAC;AACpD,aAAK,YAAY;AACjB,aAAK,QAAQ;AACb,aAAK,OAAO;AACZ,aAAK,WAAW;AAChB,aAAK,OAAO;AACZ,aAAK,aAAa,CAAC;AAAA,MACrB;AAAA,IACF;AAAA;AAAA;;;ACjCA;AAAA,8CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AASb,IAAAA,QAAO,UAAU,UAAU;AAAA,MACzB;AAAA,MACA,SAAS,OAAO,OAAO,MAAM,UAAU;AACrC,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,QAAQ;AAAA,MACf;AAAA,IACF;AAAA;AAAA;;;ACvBA;AAAA,4CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AAUb,IAAAA,QAAO,UAAU,UAAU,QAAQ,MAAM,SAAS,KAAK,OAAO,MAAM,UAAU;AAC5E,gBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,WAAK,QAAQ;AAAA,IACf,CAAC;AAAA;AAAA;;;ACrBD;AAAA,4CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AAUb,IAAAA,QAAO,UAAU,UAAU,QAAQ,MAAM,SAAS,KAAK,OAAO,MAAM,UAAU;AAC5E,gBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,WAAK,QAAQ;AAAA,IACf,CAAC;AAAA;AAAA;;;ACrBD;AAAA,kDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,OAAO;AACb,QAAM,OAAO;AASb,QAAM,aAAa,KAAK;AAAA,MACtB;AAAA,MACA,SAASC,YAAW,MAAM,MAAM,UAAU;AACxC,aAAK,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AACvC,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAEA,IAAAD,QAAO,UAAU;AAAA;AAAA;;;ACzBjB,IAAAE,cAAA;AAAA,0CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AAYb,IAAAA,QAAO,UAAU,UAAU;AAAA,MACzB;AAAA,MACA,SAAS,GAAG,MAAM,MAAM,WAAW,WAAW,MAAM,UAAU;AAC5D,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,OAAO;AACZ,aAAK,OAAO;AACZ,aAAK,YAAY;AACjB,aAAK,YAAY;AAAA,MACnB;AAAA,IACF;AAAA;AAAA;;;AC7BA;AAAA,+CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,aAAa;AACnB,QAAM,OAAO;AAWb,IAAAA,QAAO,UAAU,WAAW;AAAA,MAC1B;AAAA,MACA,SAAS,QAAQ,MAAMC,UAAS,QAAQ,MAAM,UAAU;AACtD,mBAAW,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC7C,aAAK,OAAO;AACZ,aAAK,UAAUA;AACf,aAAK,SAAS;AAAA,MAChB;AAAA,IACF;AAAA;AAAA;;;AC3BA;AAAA,8CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,UAAU;AAChB,QAAM,OAAO;AASb,IAAAA,QAAO,UAAU,QAAQ;AAAA,MACvB;AAAA,MACA,SAAS,OAAO,OAAO,KAAK,MAAM,UAAU;AAC1C,gBAAQ,MAAM,MAAM,CAAC,MAAM,OAAO,KAAK,MAAM,QAAQ,CAAC;AAAA,MACxD;AAAA,IACF;AAAA;AAAA;;;ACtBA;AAAA,iDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,cAAc;AACpB,QAAM,OAAO;AAWb,IAAAA,QAAO,UAAU,YAAY;AAAA,MAC3B;AAAA,MACA,SAAS,UAAU,MAAM,KAAK,MAAM,YAAY,MAAM,UAAU;AAC9D,oBAAY,MAAM,MAAM,CAAC,MAAM,MAAM,MAAM,QAAQ,CAAC;AACpD,aAAK,UAAU;AACf,aAAK,OAAO;AACZ,aAAK,aAAa;AAAA,MACpB;AAAA,IACF;AAAA;AAAA;;;AC3BA;AAAA,wDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,cAAc;AACpB,QAAM,OAAO;AASb,IAAAA,QAAO,UAAU,YAAY;AAAA,MAC3B;AAAA,MACA,SAAS,iBAAiB,OAAO,MAAM,UAAU;AAC/C,oBAAY,MAAM,MAAM,CAAC,MAAM,MAAM,MAAM,QAAQ,CAAC;AACpD,aAAK,QAAQ;AAAA,MACf;AAAA,IACF;AAAA;AAAA;;;ACvBA;AAAA,6CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,aAAa;AACnB,QAAM,OAAO;AAQb,IAAAA,QAAO,UAAU,WAAW;AAAA,MAC1B;AAAA,MACA,SAAS,MAAM,WAAW,MAAM,UAAU;AACxC,mBAAW,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC7C,aAAK,YAAY;AAAA,MACnB;AAAA,IACF;AAAA;AAAA;;;ACtBA;AAAA,6CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AASb,IAAAA,QAAO,UAAU,UAAU,QAAQ,MAAM,SAAS,MAAM,MAAM,MAAM,UAAU;AAC5E,gBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,WAAK,OAAO;AAAA,IACd,CAAC;AAAA;AAAA;;;ACpBD;AAAA,4CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,aAAa;AACnB,QAAM,OAAO;AAUb,IAAAA,QAAO,UAAU,WAAW;AAAA,MAC1B;AAAA,MACA,SAAS,KAAK,OAAO,WAAW,MAAM,UAAU;AAC9C,mBAAW,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC7C,aAAK,QAAQ;AACb,aAAK,YAAY;AAAA,MACnB;AAAA,IACF;AAAA;AAAA;;;ACzBA;AAAA,8CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,OAAO;AACb,QAAM,OAAO;AAUb,IAAAA,QAAO,UAAU,KAAK;AAAA,MACpB;AAAA,MACA,SAAS,OAAO,MAAM,MAAM,QAAQ,MAAM,UAAU;AAClD,aAAK,MAAM,MAAM,CAAC,QAAQ,MAAM,MAAM,QAAQ,CAAC;AAC/C,aAAK,OAAO;AACZ,aAAK,SAAS;AAAA,MAChB;AAAA,IACF;AAAA;AAAA;;;ACzBA;AAAA,6CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,UAAU;AAChB,QAAM,OAAO;AAQb,IAAAA,QAAO,UAAU,QAAQ;AAAA,MACvB;AAAA,MACA,SAAS,MAAM,OAAO,KAAK,MAAM,UAAU;AACzC,gBAAQ,MAAM,MAAM,CAAC,MAAM,OAAO,KAAK,MAAM,QAAQ,CAAC;AAAA,MACxD;AAAA,IACF;AAAA;AAAA;;;ACrBA;AAAA,6CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,aAAa;AACnB,QAAM,OAAO;AAUb,IAAAA,QAAO,UAAU,WAAW;AAAA,MAC1B;AAAA,MACA,SAAS,MAAM,MAAM,MAAM,MAAM,UAAU;AACzC,mBAAW,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC7C,aAAK,OAAO;AACZ,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAAA;AAAA;;;ACzBA;AAAA,gDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,aAAa;AACnB,QAAM,OAAO;AAUb,IAAAA,QAAO,UAAU,WAAW;AAAA,MAC1B;AAAA,MACA,SAAS,SAAS,OAAO,MAAM,MAAM,UAAU;AAC7C,mBAAW,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC7C,aAAK,QAAQ;AACb,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAAA;AAAA;;;ACzBA;AAAA,8CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AAYb,IAAAA,QAAO,UAAU,UAAU,QAAQ,MAAM,SAAS,SAAS;AACzD,gBAAU,MAAM,MAAM,SAAS;AAC/B,WAAK,OAAO;AAAA,IACd,CAAC;AAAA;AAAA;;;ACvBD;AAAA,iDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,OAAO;AACb,QAAM,OAAO;AAQb,QAAM,YAAY,KAAK,QAAQ,MAAM,SAASC,WAAU,MAAM,MAAM,UAAU;AAC5E,WAAK,MAAM,MAAM,CAAC,QAAQ,MAAM,MAAM,QAAQ,CAAC;AAAA,IACjD,CAAC;AAED,IAAAD,QAAO,UAAU;AAAA;AAAA;;;ACpBjB;AAAA,4CAAAE,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AAUb,QAAM,OAAO,UAAU;AAAA,MACrB;AAAA,MACA,SAASC,MAAK,MAAM,YAAY,MAAM,UAAU;AAC9C,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,OAAO,KAAK,QAAQ,OAAO,EAAE;AAClC,aAAK,aAAa;AAAA,MACpB;AAAA,IACF;AAOA,SAAK,mBAAmB;AAMxB,SAAK,iBAAiB;AAQtB,SAAK,sBAAsB;AAM3B,SAAK,gBAAgB;AAErB,IAAAD,QAAO,UAAU;AAAA;AAAA;;;ACtDjB,IAAAE,qBAAA;AAAA,iDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,QAAQ;AACd,QAAM,OAAO;AAUb,IAAAA,QAAO,UAAU,MAAM;AAAA,MACrB;AAAA,MACA,SAAS,UAAU,MAAM,UAAU,cAAc,MAAM,UAAU;AAC/D,cAAM,MAAM,MAAM,CAAC,MAAM,UAAU,MAAM,QAAQ,CAAC;AAClD,aAAK,OAAO;AACZ,aAAK,eAAe,gBAAgB;AAAA,MACtC;AAAA,IACF;AAAA;AAAA;;;ACzBA;AAAA,qDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,aAAa;AACnB,QAAM,OAAO;AAWb,IAAAA,QAAO,UAAU,WAAW;AAAA,MAC1B;AAAA,MACA,SAAS,cAAc,MAAM,OAAO,MAAM,UAAU;AAClD,mBAAW,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC7C,aAAK,OAAO;AACZ,aAAK,QAAQ;AAAA,MACf;AAAA,IACF;AAAA;AAAA;;;AC1BA;AAAA,2CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,aAAa;AACnB,QAAM,OAAO;AAUb,IAAAA,QAAO,UAAU,WAAW;AAAA,MAC1B;AAAA,MACA,SAAS,IAAI,MAAM,MAAM,MAAM,UAAU;AACvC,mBAAW,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC7C,aAAK,OAAO;AACZ,aAAK,YAAY;AAAA,MACnB;AAAA,IACF;AAAA;AAAA;;;ACzBA;AAAA,4CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,OAAO;AACb,QAAM,OAAO;AASb,IAAAA,QAAO,UAAU,KAAK,QAAQ,MAAM,SAAS,KAAK,MAAM,UAAU;AAChE,WAAK,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAAA,IACzC,CAAC;AAAA;AAAA;;;ACnBD;AAAA,8CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,UAAU;AAChB,QAAM,OAAO;AAWb,IAAAA,QAAO,UAAU,QAAQ;AAAA,MACvB;AAAA,MACA,SAAS,OAAO,OAAO,KAAK,OAAO,MAAM,UAAU;AACjD,gBAAQ,MAAM,MAAM,CAAC,MAAM,OAAO,KAAK,MAAM,QAAQ,CAAC;AACtD,aAAK,QAAQ;AAAA,MACf;AAAA,IACF;AAAA;AAAA;;;ACzBA;AAAA,mDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,OAAO;AACb,QAAM,OAAO;AAQb,IAAAA,QAAO,UAAU,KAAK,QAAQ,MAAM,SAAS,YAAY,KAAK,MAAM,UAAU;AAC5E,WAAK,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AACvC,WAAK,MAAM;AAAA,IACb,CAAC;AAAA;AAAA;;;ACnBD;AAAA,8DAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,SAAS;AACf,QAAM,OAAO;AAQb,IAAAA,QAAO,UAAU,OAAO;AAAA,MACtB;AAAA,MACA,SAAS,uBAAuB,MAAM,QAAQ,MAAM,UAAU;AAC5D,eAAO,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,MAAM,QAAQ,CAAC;AAAA,MACzD;AAAA,IACF;AAAA;AAAA;;;ACrBA;AAAA,8CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,UAAU;AAChB,QAAM,OAAO;AASb,IAAAA,QAAO,UAAU,QAAQ;AAAA,MACvB;AAAA,MACA,SAAS,OAAO,OAAO,KAAK,MAAM,UAAU;AAC1C,gBAAQ,MAAM,MAAM,CAAC,MAAM,OAAO,KAAK,MAAM,QAAQ,CAAC;AAAA,MACxD;AAAA,IACF;AAAA;AAAA;;;ACtBA;AAAA,oDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,SAAS;AACf,QAAM,OAAO;AAQb,IAAAA,QAAO,UAAU,OAAO;AAAA,MACtB;AAAA,MACA,SAAS,aAAa,MAAM,QAAQ,MAAM,UAAU;AAClD,eAAO,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,MAAM,QAAQ,CAAC;AAAA,MACzD;AAAA,IACF;AAAA;AAAA;;;ACrBA;AAAA,iDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,cAAc;AACpB,QAAM,OAAO;AA4Bb,IAAAA,QAAO,UAAU,YAAY;AAAA,MAC3B;AAAA,MACA,SAAS,UACP,MACA,MACA,OACA,OACA,YACA,UACA,UACA,OACA,MACA,UACA;AACA,oBAAY,MAAM,MAAM,CAAC,MAAM,MAAM,MAAM,QAAQ,CAAC;AACpD,aAAK,QAAQ;AACb,aAAK,OAAO;AACZ,aAAK,QAAQ;AACb,aAAK,WAAW;AAChB,aAAK,WAAW;AAChB,aAAK,WAAW;AAChB,aAAK,QAAQ,SAAS;AACtB,aAAK,aAAa,CAAC;AAAA,MACrB;AAAA,IACF;AAAA;AAAA;;;AC5DA;AAAA,uDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AAQb,QAAM,kBAAkB,UAAU;AAAA,MAChC;AAAA,MACA,SAASC,iBAAgB,KAAK,MAAM,UAAU;AAC5C,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,MAAM;AAAA,MACb;AAAA,IACF;AACA,IAAAD,QAAO,UAAU;AAAA;AAAA;;;ACvBjB;AAAA,4CAAAE,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AAUb,IAAAA,QAAO,UAAU,UAAU;AAAA,MACzB;AAAA,MACA,SAAS,KAAK,MAAM,MAAM,MAAM,UAAU;AACxC,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,OAAO;AACZ,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAAA;AAAA;;;ACzBA;AAAA,2CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AAUb,IAAAA,QAAO,UAAU,UAAU;AAAA,MACzB;AAAA,MACA,SAAS,IAAI,MAAM,MAAM,MAAM,UAAU;AACvC,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,OAAO;AACZ,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAAA;AAAA;;;ACzBA;AAAA,6CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,aAAa;AACnB,QAAM,OAAO;AAQb,IAAAA,QAAO,UAAU,WAAW;AAAA,MAC1B;AAAA,MACA,SAAS,MAAM,YAAY,MAAM,UAAU;AACzC,mBAAW,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC7C,aAAK,aAAa;AAAA,MACpB;AAAA,IACF;AAAA;AAAA;;;ACtBA;AAAA,+CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,QAAQ;AACd,QAAM,OAAO;AAWb,IAAAA,QAAO,UAAU,MAAM;AAAA,MACrB;AAAA,MACA,SAAS,QAAQ,UAAU,QAAQ,UAAU,QAAQ,MAAM,UAAU;AACnE,cAAM,MAAM,MAAM,CAAC,MAAM,UAAU,MAAM,QAAQ,CAAC;AAClD,aAAK,SAAS;AACd,YAAI,UAAU;AACZ,eAAK,WAAW;AAAA,QAClB;AACA,YAAI,QAAQ;AACV,eAAK,SAAS;AAAA,QAChB;AAAA,MACF;AAAA,IACF;AAAA;AAAA;;;AC/BA,IAAAC,oBAAA;AAAA,gDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AAcb,IAAAA,QAAO,UAAU,UAAU;AAAA,MACzB;AAAA,MACA,SAAS,SACP,MACA,OACA,UACA,UACA,MACA,YACA,MACA,UACA;AACA,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,OAAO;AACZ,aAAK,QAAQ;AACb,aAAK,WAAW;AAChB,aAAK,WAAW;AAChB,aAAK,OAAO;AACZ,aAAK,aAAa;AAAA,MACpB;AAAA,IACF;AAAA;AAAA;;;AC1CA;AAAA,sDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,SAAS;AACf,QAAM,OAAO;AAQb,IAAAA,QAAO,UAAU,OAAO;AAAA,MACtB;AAAA,MACA,SAAS,eAAe,MAAM,QAAQ,MAAM,UAAU;AACpD,eAAO,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,MAAM,QAAQ,CAAC;AAAA,MACzD;AAAA,IACF;AAAA;AAAA;;;ACrBA;AAAA,yDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AAEb,QAAM,eAAe;AACrB,QAAM,YAAY;AAClB,QAAM,eAAe;AACrB,QAAM,aAAa;AAWnB,QAAM,oBAAoB,UAAU;AAAA,MAClC;AAAA,MACA,SAASC,mBAAkB,MAAM,YAAY,OAAO,MAAM,UAAU;AAClE,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,aAAa;AAClB,aAAK,WAAW,KAAK;AAAA,MACvB;AAAA,IACF;AASA,sBAAkB,UAAU,aAAa,SAAU,OAAO;AACxD,UAAI,MAAM,OAAO,IAAI;AACnB,aAAK,aAAa;AAAA,MACpB,WAAW,MAAM,OAAO,MAAM;AAC5B,aAAK,aAAa;AAAA,MACpB,WAAW,MAAM,OAAO,GAAG;AACzB,aAAK,aAAa;AAAA,MACpB,WAAW,MAAM,OAAO,GAAG;AACzB,aAAK,aAAa;AAAA,MACpB,WAAW,MAAM,OAAO,GAAG;AACzB,aAAK,aAAa;AAAA,MACpB;AAEA,WAAK,WAAW,MAAM,OAAO;AAAA,IAC/B;AAEA,IAAAD,QAAO,UAAU;AAAA;AAAA;;;ACxDjB;AAAA,6CAAAE,UAAAC,SAAA;AAAA;AAOA,QAAM,aAAa;AACnB,QAAM,OAAO;AAWb,IAAAA,QAAO,UAAU,WAAW;AAAA,MAC1B;AAAA,MACA,SAAS,MAAM,MAAM,UAAU,WAAW,MAAM,UAAU;AACxD,mBAAW,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC7C,aAAK,OAAO;AACZ,aAAK,WAAW;AAChB,aAAK,YAAY;AAAA,MACnB;AAAA,IACF;AAAA;AAAA;;;AC3BA;AAAA,8CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AASb,IAAAA,QAAO,UAAU,UAAU,QAAQ,MAAM,SAAS,OAAO,MAAM,MAAM,UAAU;AAC7E,gBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,WAAK,OAAO;AAAA,IACd,CAAC;AAAA;AAAA;;;ACpBD;AAAA,qDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AAQb,QAAM,gBAAgB,UAAU;AAAA,MAC9B;AAAA,MACA,SAASC,eAAc,KAAK,MAAM,UAAU;AAC1C,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,MAAM;AAAA,MACb;AAAA,IACF;AACA,IAAAD,QAAO,UAAU;AAAA;AAAA;;;ACvBjB;AAAA,8CAAAE,UAAAC,SAAA;AAAA;AAOA,QAAM,aAAa;AACnB,QAAM,OAAO;AASb,IAAAA,QAAO,UAAU,WAAW;AAAA,MAC1B;AAAA,MACA,SAAS,OAAO,MAAM,MAAM,UAAU;AACpC,mBAAW,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC7C,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAAA;AAAA;;;ACvBA;AAAA,8CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AASb,IAAAA,QAAO,UAAU,UAAU;AAAA,MACzB;AAAA,MACA,SAAS,OAAO,WAAW,MAAM,UAAU;AACzC,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,YAAY;AAAA,MACnB;AAAA,IACF;AAAA;AAAA;;;ACvBA;AAAA,sDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,OAAO;AACb,QAAM,OAAO;AAUb,IAAAA,QAAO,UAAU,KAAK;AAAA,MACpB;AAAA,MACA,SAAS,eAAe,UAAU,cAAc,MAAM,UAAU;AAC9D,aAAK,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AACvC,aAAK,WAAW;AAChB,aAAK,eAAe;AAAA,MACtB;AAAA,IACF;AAAA;AAAA;;;ACzBA;AAAA,oDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,SAAS;AACf,QAAM,OAAO;AAQb,IAAAA,QAAO,UAAU,OAAO;AAAA,MACtB;AAAA,MACA,SAAS,aAAa,MAAM,QAAQ,MAAM,UAAU;AAClD,eAAO,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,MAAM,QAAQ,CAAC;AAAA,MACzD;AAAA,IACF;AAAA;AAAA;;;ACrBA;AAAA,uDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AAQb,QAAM,kBAAkB,UAAU;AAAA,MAChC;AAAA,MACA,SAASC,iBAAgB,KAAK,MAAM,UAAU;AAC5C,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,MAAM;AAAA,MACb;AAAA,IACF;AACA,IAAAD,QAAO,UAAU;AAAA;AAAA;;;ACvBjB;AAAA,8CAAAE,UAAAC,SAAA;AAAA;AAOA,QAAM,UAAU;AAChB,QAAM,OAAO;AAYb,IAAAA,QAAO,UAAU,QAAQ;AAAA,MACvB;AAAA,MACA,SAASC,QAAO,eAAe,OAAO,SAAS,KAAK,MAAM,UAAU;AAClE,gBAAQ,MAAM,MAAM,CAAC,MAAM,OAAO,KAAK,MAAM,QAAQ,CAAC;AACtD,aAAK,UAAU;AACf,aAAK,gBAAgB;AAAA,MACvB;AAAA,IACF;AAAA;AAAA;;;AC3BA,IAAAC,kBAAA;AAAA,8CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AAWb,IAAAA,QAAO,UAAU,UAAU;AAAA,MACzB;AAAA,MACA,SAAS,OAAO,MAAM,MAAM,WAAW,MAAM,UAAU;AACrD,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,OAAO;AACZ,aAAK,OAAO;AACZ,aAAK,YAAY;AAAA,MACnB;AAAA,IACF;AAAA;AAAA;;;AC3BA;AAAA,6CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AASb,IAAAA,QAAO,UAAU,UAAU,QAAQ,MAAM,SAAS,MAAM,MAAM,MAAM,UAAU;AAC5E,gBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,WAAK,OAAO;AAAA,IACd,CAAC;AAAA;AAAA;;;ACpBD;AAAA,6CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,cAAc;AACpB,QAAM,OAAO;AASb,IAAAA,QAAO,UAAU,YAAY;AAAA,MAC3B;AAAA,MACA,SAAS,MAAM,MAAM,MAAM,MAAM,UAAU;AACzC,oBAAY,MAAM,MAAM,CAAC,MAAM,MAAM,MAAM,QAAQ,CAAC;AACpD,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAAA;AAAA;;;ACvBA;AAAA,kDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,OAAO;AACb,QAAM,OAAO;AAEb,QAAM,eAAe;AACrB,QAAM,YAAY;AAClB,QAAM,eAAe;AACrB,QAAM,aAAa;AAYnB,IAAAA,QAAO,UAAU,KAAK;AAAA,MACpB;AAAA,MACA,SAAS,WAAW,OAAO,QAAQ,IAAI,OAAO,MAAM,UAAU;AAC5D,aAAK,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AACvC,aAAK,QAAQ;AACb,aAAK,SAAS;AACd,aAAK,KAAK;AACV,aAAK,aAAa;AAClB,YAAI,OAAO;AACT,cAAI,MAAM,OAAO,GAAG;AAClB,iBAAK,aAAa;AAAA,UACpB,WAAW,MAAM,OAAO,GAAG;AACzB,iBAAK,aAAa;AAAA,UACpB,WAAW,MAAM,OAAO,GAAG;AACzB,iBAAK,aAAa;AAAA,UACpB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA;AAAA;;;AC3CA;AAAA,uDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,OAAO;AACb,QAAM,OAAO;AAWb,IAAAA,QAAO,UAAU,KAAK;AAAA,MACpB;AAAA,MACA,SAAS,gBAAgB,OAAO,QAAQ,SAAS,MAAM,UAAU;AAC/D,aAAK,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AACvC,aAAK,QAAQ;AACb,aAAK,SAAS;AACd,aAAK,UAAU;AAAA,MACjB;AAAA,IACF;AAAA;AAAA;;;AC3BA;AAAA,gDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,OAAO;AACb,QAAM,OAAO;AAUb,IAAAA,QAAO,UAAU,KAAK;AAAA,MACpB;AAAA,MACA,SAAS,SAAS,QAAQ,aAAa,MAAM,UAAU;AACrD,aAAK,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AACvC,aAAK,SAAS;AACd,aAAK,cAAc;AAAA,MACrB;AAAA,IACF;AAAA;AAAA;;;ACzBA,IAAAC,eAAA;AAAA,2CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AAWb,IAAAA,QAAO,UAAU,UAAU;AAAA,MACzB;AAAA,MACA,SAAS,IAAI,MAAM,SAAS,QAAQ,MAAM,UAAU;AAClD,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,OAAO;AACZ,aAAK,UAAU;AACf,aAAK,SAAS;AAAA,MAChB;AAAA,IACF;AAAA;AAAA;;;AC3BA;AAAA,qDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AASb,QAAM,gBAAgB,UAAU;AAAA,MAC9B;AAAA,MACA,SAASC,eAAc,MAAM,KAAK,MAAM,UAAU;AAChD,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,OAAO;AACZ,aAAK,MAAM;AAAA,MACb;AAAA,IACF;AAEA,kBAAc,QAAQ;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,IAAAD,QAAO,UAAU;AAAA;AAAA;;;ACvCjB;AAAA,6CAAAE,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AAUb,IAAAA,QAAO,UAAU,UAAU;AAAA,MACzB;AAAA,MACA,SAAS,MAAM,MAAM,MAAM,MAAM,UAAU;AACzC,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,OAAO;AACZ,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAAA;AAAA;;;ACzBA;AAAA,iDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,cAAc;AACpB,QAAM,OAAO;AASb,IAAAA,QAAO,UAAU,YAAY;AAAA,MAC3B;AAAA,MACA,SAAS,UAAU,OAAO,MAAM,UAAU;AACxC,oBAAY,MAAM,MAAM,CAAC,MAAM,MAAM,MAAM,QAAQ,CAAC;AACpD,aAAK,QAAQ;AAAA,MACf;AAAA,IACF;AAAA;AAAA;;;ACvBA;AAAA,6CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AAQb,IAAAA,QAAO,UAAU,UAAU;AAAA,MACzB;AAAA,MACA,SAAS,MAAM,WAAW,MAAM,UAAU;AACxC,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,YAAY;AAAA,MACnB;AAAA,IACF;AAAA;AAAA;;;ACtBA;AAAA,gDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AAab,IAAAA,QAAO,UAAU,UAAU;AAAA,MACzB;AAAA,MACA,SAAS,SAAS,MAAM,MAAM,OAAO,MAAM,UAAU;AACnD,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,OAAO;AACZ,aAAK,OAAO;AACZ,aAAK,QAAQ;AAAA,MACf;AAAA,IACF;AAAA;AAAA;;;AC7BA;AAAA,+CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AAab,QAAM,UAAU,UAAU;AAAA,MACxB;AAAA,MACA,SAASC,SAAQ,MAAM,OAAO,MAAM,MAAM,UAAU;AAClD,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,OAAO;AACZ,aAAK,QAAQ;AACb,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAOA,YAAQ,aAAa;AAMrB,YAAQ,gBAAgB;AAExB,IAAAD,QAAO,UAAU;AAAA;AAAA;;;AC5CjB,IAAAE,oBAAA;AAAA,gDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,aAAa;AACnB,QAAM,OAAO;AAoBb,IAAAA,QAAO,UAAU,WAAW;AAAA,MAC1B;AAAA,MACA,SAAS,SAAS,MAAM,OAAO,MAAM,UAAU;AAC7C,mBAAW,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC7C,aAAK,OAAO;AACZ,aAAK,QAAQ,SAAS;AAAA,MACxB;AAAA,IACF;AAAA;AAAA;;;ACnCA;AAAA,gDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,aAAa;AACnB,QAAM,OAAO;AAUb,IAAAA,QAAO,UAAU,WAAW;AAAA,MAC1B;AAAA,MACA,SAAS,SAAS,MAAM,MAAM,UAAU;AACtC,mBAAW,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC7C,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAAA;AAAA;;;ACxBA;AAAA,2DAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,OAAO;AACb,QAAM,OAAO;AAUb,IAAAA,QAAO,UAAU,KAAK;AAAA,MACpB;AAAA,MACA,SAAS,oBAAoB,MAAM,UAAU;AAC3C,aAAK,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAAA,MACzC;AAAA,IACF;AAAA;AAAA;;;ACvBA;AAAA,6CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,YAAY;AAClB,QAAM,OAAO;AAWb,IAAAA,QAAO,UAAU,UAAU;AAAA,MACzB;AAAA,MACA,SAAS,MAAM,MAAM,MAAM,WAAW,MAAM,UAAU;AACpD,kBAAU,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC5C,aAAK,OAAO;AACZ,aAAK,OAAO;AACZ,aAAK,YAAY;AAAA,MACnB;AAAA,IACF;AAAA;AAAA;;;AC3BA;AAAA,6CAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,aAAa;AACnB,QAAM,OAAO;AAWb,IAAAA,QAAO,UAAU,WAAW;AAAA,MAC1B;AAAA,MACA,SAAS,MAAM,OAAO,KAAK,MAAM,UAAU;AACzC,mBAAW,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC7C,aAAK,QAAQ;AACb,aAAK,MAAM;AAAA,MACb;AAAA,IACF;AAAA;AAAA;;;AC1BA;AAAA,iDAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,aAAa;AACnB,QAAM,OAAO;AAUb,IAAAA,QAAO,UAAU,WAAW;AAAA,MAC1B;AAAA,MACA,SAAS,UAAU,OAAO,MAAM,UAAU;AACxC,mBAAW,MAAM,MAAM,CAAC,MAAM,MAAM,QAAQ,CAAC;AAC7C,aAAK,QAAQ;AAAA,MACf;AAAA,IACF;AAAA;AAAA;;;ACxBA;AAAA,uCAAAC,UAAAC,SAAA;AAAA;AAOA,QAAM,WAAW;AACjB,QAAMC,YAAW;AAsHjB,QAAM,MAAM,SAAU,eAAe,YAAY;AAC/C,WAAK,gBAAgB;AACrB,WAAK,aAAa;AAAA,IACpB;AAGA,QAAI,aAAa,CAAC;AAClB;AAAA,MACE,CAAC,IAAI;AAAA,MACL,CAAC,KAAK;AAAA,MACN,CAAC,KAAK;AAAA,MACN,CAAC,GAAG;AAAA,MACJ,CAAC,GAAG;AAAA,MACJ,CAAC,IAAI;AAAA,MACL,CAAC,IAAI;AAAA,MACL,CAAC,IAAI;AAAA,MACL,CAAC,GAAG;AAAA,MACJ,CAAC,GAAG;AAAA,MACJ,CAAC,GAAG;AAAA,MACJ,CAAC,MAAM,MAAM,OAAO,OAAmB,KAAK;AAAA,MAC5C,CAAC,KAAK,MAAM,KAAK,IAAI;AAAA,MACrB,CAAC,MAAM,IAAI;AAAA,MACX,CAAC,KAAK,KAAK,GAAG;AAAA,MACd,CAAC,KAAK,KAAK,GAAG;AAAA,MACd,CAAC,GAAG;AAAA,MACJ,CAAC,YAAY;AAAA,MACb,CAAC,QAAQ,QAAQ;AAAA,MACjB,CAAC,IAAI;AAAA,IAGP,EAAE,QAAQ,SAAU,MAAM,OAAO;AAC/B,WAAK,QAAQ,SAAU,UAAU;AAC/B,YAAI,WAAW,YAAY,QAAQ;AAAA,MACrC,CAAC;AAAA,IACH,CAAC;AASD,QAAI,UAAU,qBAAqB,SAAU,UAAU;AACrD,aAAO,aAAa,QAAQ,aAAa;AAAA,IAC3C;AAQA,QAAI,UAAU,gBAAgB,SAAU,QAAQ,OAAO,MAAM,QAAQ;AACnE,UAAI,KAAK,eAAe;AACtB,eAAO,IAAI,QAAQ,MAAM,IAAI;AAC7B,eAAO,IAAI,MAAM,KAAK,IAAI;AAC1B,YAAI,KAAK,YAAY;AACnB,iBAAO,IAAI,SAAS,OAAO,MAAM,OAAO;AAAA,YACtC,OAAO,IAAI,MAAM;AAAA,YACjB,OAAO,IAAI,IAAI;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAQA,QAAI,UAAU,mBAAmB,SAAU,QAAQ,OAAO,MAAM,QAAQ;AACtE,UAAI,KAAK,eAAe;AACtB,YAAI,OAAO,IAAI,MAAM,SAAS,MAAM,IAAI,MAAM,QAAQ;AACpD,iBAAO,IAAI,QAAQ,MAAM,IAAI;AAAA,QAC/B;AAEA,YAAI,OAAO,IAAI,IAAI,SAAS,KAAK,IAAI,IAAI,QAAQ;AAC/C,iBAAO,IAAI,MAAM,KAAK,IAAI;AAAA,QAC5B;AACA,YAAI,KAAK,YAAY;AACnB,iBAAO,IAAI,SAAS,OAAO,MAAM,OAAO;AAAA,YACtC,OAAO,IAAI,MAAM;AAAA,YACjB,OAAO,IAAI,IAAI;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAQA,QAAI,UAAU,oBAAoB,SAAU,QAAQ,QAAQ;AAC1D,UAAI,QAAQ,QAAQ;AAEpB,UAAI,OAAO,SAAS,QAAQ;AAE1B,aAAK,iBAAiB,QAAQ,OAAO,MAAM,QAAQ,MAAM;AAAA,MAC3D,WACE,OAAO,SAAS,oBAChB,OAAO,SAAS,kBACf,OAAO,SAAS,kBAAkB,OAAO,QAC1C;AAEA,aAAK,iBAAiB,QAAQ,OAAO,MAAM,OAAO,QAAQ,MAAM;AAAA,MAClE,WAAW,OAAO,SAAS,OAAO;AAChC,YAAI,OAAO,SAAS,CAAC,OAAO,MAAM,yBAAyB;AACzD,cAAI,OAAO,MAAM,SAAS,OAAO;AAC/B,qBAAS,IAAI,WAAW,OAAO;AAC/B,qBAAS,IAAI,WAAW,OAAO,MAAM;AACrC,gBACE,UACA,UACA,UAAU,WACT,OAAO,SAAS,OAAO,MAAM,QAC5B,CAAC,KAAK,mBAAmB,OAAO,IAAI,IACtC;AAGA,uBAAS,OAAO;AAChB,qBAAO,QAAQ,OAAO,MAAM;AAC5B,mBAAK,cAAc,QAAQ,OAAO,MAAM,OAAO,OAAO,MAAM;AAC5D,qBAAO,OAAO,KAAK,kBAAkB,QAAQ,MAAM;AACnD,mBAAK,cAAc,QAAQ,OAAO,MAAM,OAAO,OAAO,MAAM;AAC5D,uBAAS;AAAA,YACX;AAAA,UACF,WAAW,OAAO,MAAM,SAAS,SAAS;AACxC,qBAAS,IAAI,WAAW,OAAO;AAC/B,qBAAS,IAAI,WAAW;AACxB,gBAAI,UAAU,UAAU,UAAU,QAAQ;AACxC,uBAAS,OAAO;AAChB,qBAAO,QAAQ,OAAO,MAAM;AAC5B,mBAAK,cAAc,QAAQ,OAAO,MAAM,OAAO,OAAO,MAAM;AAC5D,qBAAO,OAAO,KAAK,kBAAkB,QAAQ,MAAM;AACnD,mBAAK,cAAc,QAAQ,OAAO,MAAM,OAAO,WAAW,MAAM;AAChE,uBAAS;AAAA,YACX;AAAA,UACF;AAAA,QACF;AAAA,MACF,YACG,OAAO,SAAS,YAAY,OAAO,SAAS,WAC7C,OAAO,QACP,CAAC,OAAO,KAAK,yBACb;AAEA,YAAI,OAAO,KAAK,SAAS,OAAO;AAC9B,mBAAS,OAAO;AAChB,iBAAO,OAAO,OAAO,KAAK;AAC1B,eAAK,cAAc,QAAQ,QAAQ,OAAO,MAAM,MAAM;AACtD,iBAAO,OAAO,KAAK,kBAAkB,QAAQ,MAAM;AACnD,eAAK,cAAc,QAAQ,OAAO,MAAM,OAAO,OAAO,MAAM;AAC5D,mBAAS;AAAA,QACX,WAAW,OAAO,KAAK,SAAS,SAAS;AACvC,mBAAS,OAAO;AAChB,iBAAO,OAAO,OAAO,KAAK;AAC1B,eAAK,cAAc,QAAQ,QAAQ,OAAO,MAAM,MAAM;AACtD,iBAAO,OAAO,KAAK,kBAAkB,QAAQ,MAAM;AACnD,eAAK,cAAc,QAAQ,OAAO,MAAM,OAAO,WAAW,MAAM;AAChE,mBAAS;AAAA,QACX;AAAA,MACF,WAAW,OAAO,SAAS,SAAS;AAElC,YAAI,OAAO,QAAQ,CAAC,OAAO,KAAK,yBAAyB;AAEvD,cAAI,OAAO,KAAK,SAAS,OAAO;AAC9B,qBAAS,OAAO;AAChB,mBAAO,OAAO,OAAO,KAAK;AAC1B,iBAAK,cAAc,QAAQ,QAAQ,OAAO,MAAM,MAAM;AACtD,mBAAO,OAAO,KAAK,kBAAkB,QAAQ,MAAM;AACnD,iBAAK,cAAc,QAAQ,OAAO,MAAM,OAAO,OAAO,MAAM;AAC5D,qBAAS;AAAA,UACX,WAAW,OAAO,KAAK,SAAS,SAAS;AACvC,qBAAS,OAAO;AAChB,mBAAO,OAAO,OAAO,KAAK;AAC1B,iBAAK,cAAc,QAAQ,QAAQ,OAAO,MAAM,MAAM;AACtD,mBAAO,OAAO,KAAK,kBAAkB,QAAQ,MAAM;AACnD,iBAAK,cAAc,QAAQ,OAAO,MAAM,OAAO,WAAW,MAAM;AAChE,qBAAS;AAAA,UACX;AAAA,QACF;AAAA,MACF,WAAW,OAAO,SAAS,SAAS;AAElC,YACE,OAAO,aACP,OAAO,UAAU,SAAS,WAC1B,CAAC,OAAO,UAAU,yBAClB;AACA,mBAAS,OAAO;AAChB,iBAAO,YAAY,OAAO;AAC1B,eAAK,cAAc,QAAQ,OAAO,MAAM,OAAO,WAAW,MAAM;AAChE,iBAAO,OAAO,KAAK,kBAAkB,QAAQ,MAAM;AACnD,eAAK,cAAc,QAAQ,OAAO,MAAM,OAAO,WAAW,MAAM;AAChE,mBAAS;AAAA,QACX;AAAA,MACF,WAAW,OAAO,SAAS,UAAU;AAEnC,YACE,OAAO,SACP,OAAO,MAAM,SAAS,SACtB,CAAC,OAAO,MAAM,yBACd;AACA,mBAAS,IAAI,WAAW;AACxB,mBAAS,IAAI,WAAW,OAAO,MAAM;AAErC,cAAI,UAAU,UAAU,SAAS,QAAQ;AACvC,qBAAS,OAAO;AAChB,mBAAO,QAAQ,OAAO,MAAM;AAC5B,mBAAO,OAAO;AACd,iBAAK,cAAc,QAAQ,OAAO,MAAM,OAAO,OAAO,MAAM;AAC5D,qBAAS;AAAA,UACX;AAAA,QACF;AAAA,MACF,WAAW,OAAO,SAAS,uBAAuB;AAChD,aAAK,cAAc,QAAQ,OAAO,YAAY,QAAQ,MAAM;AAAA,MAC9D;AACA,aAAO;AAAA,IACT;AAYA,QAAI,UAAU,UAAU,SAAU,MAAM,MAAM,QAAQ;AACpD,UAAI,QAAQ;AACZ,UAAI,KAAK,iBAAiB,KAAK,YAAY;AACzC,gBAAQ,OAAO,SAAS;AAAA,MAC1B;AACA,YAAM,OAAO;AAEb,YAAM,SAAS,WAAY;AACzB,YAAI,WAAW;AACf,cAAM,OAAO,MAAM,UAAU,MAAM,KAAK,SAAS;AACjD,aAAK,KAAK,IAAI;AACd,YAAI,KAAK,iBAAiB,KAAK,YAAY;AACzC,cAAI,MAAM;AACV,cAAI,KAAK,YAAY;AACnB,kBAAM,OAAO,MAAM,OAAO,UAAU,MAAM,QAAQ,OAAO,KAAK,EAAE;AAAA,UAClE;AAEA,qBAAW,IAAI;AAAA,YACb;AAAA,YACA;AAAA,YACA,IAAIA,UAAS,OAAO,KAAK,IAAI,OAAO,KAAK,IAAI,OAAO,KAAK,EAAE;AAAA,UAC7D;AAEA,eAAK,KAAK,QAAQ;AAAA,QACpB;AAEA,YAAI,CAAC,MAAM;AACT,iBAAO,KAAK,MAAM;AAAA,QACpB;AAEA,cAAM,OAAO,KAAK;AAClB,YAAI,OAAO,SAAS,YAAY;AAC9B,gBAAM,IAAI,MAAM,qBAAqB,OAAO,GAAG;AAAA,QACjD;AACA,cAAM,UAAU,OAAO,OAAO,KAAK,SAAS;AAC5C,aAAK,MAAM,SAAS,IAAI;AACxB,eAAO,WAAW;AAElB,YAAI,OAAO,kBAAkB;AAE3B,kBAAQ,mBAAmB,OAAO;AAAA,QACpC;AACA,YAAI,OAAO,OAAO,cAAc,YAAY;AAC1C,iBAAO,UAAU,OAAO;AAAA,QAC1B;AACA,YAAI,OAAO,OAAO;AAChB,iBAAO,KAAK,MAAM,OAAO;AAAA,QAC3B;AACA,eAAO,KAAK,kBAAkB,SAAS,MAAM;AAAA,MAC/C;AACA,UAAI,OAAO,OAAO;AAChB,YAAI,CAAC,KAAK,OAAO;AACf,eAAK,QAAQ,CAAC;AACd,eAAK,WAAW;AAAA,QAClB;AACA,aAAK,MAAM,EAAE,KAAK,YAAY;AAAA,UAC5B,UAAU;AAAA,UACV,OAAO,IAAI,MAAM,EAAE,MAAM,MAAM,IAAI,EAAE,MAAM,GAAG,CAAC;AAAA,QACjD;AACA,eAAO,WAAW,KAAK;AAAA,MACzB;AAOA,aAAO,sBAAsB,SAAUC,OAAM;AAC3C,YAAI,OAAO,UAAU;AAEnB,iBAAO,SAAS,oBAAoBA,KAAI;AAAA,QAC1C,OAAO;AACL,iBAAO,mBAAmBA;AAAA,QAC5B;AAAA,MACF;AAOA,aAAO,UAAU,SAAU,QAAQ;AACjC,YAAI,MAAM;AAER,cAAI,QAAQ;AACV,gBAAI,CAAC,OAAO,iBAAiB;AAC3B,qBAAO,kBAAkB;AAAA,YAC3B,OAAO;AACL,qBAAO,kBAAkB,KAAK,OAAO,OAAO,eAAe;AAAA,YAC7D;AAAA,UACF,OAAO;AACL,mBAAO,YAAY,OAAO,MAAM,SAAS,KAAK;AAAA,UAChD;AAAA,QACF;AACA,YAAI,OAAO,OAAO;AAChB,iBAAO,KAAK,MAAM,OAAO;AAAA,QAC3B;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,QAAI,UAAU,aAAa,WAAY;AACrC,YAAM,SAAS,CAAC;AAChB,iBAAW,KAAK,KAAK,OAAO;AAC1B,YAAI,OAAO,UAAU,eAAe,KAAK,KAAK,OAAO,CAAC,GAAG;AACvD,eAAK,MAAM,GAAG,MAAM;AACpB,iBAAO,KAAK,KAAK,MAAM,EAAE;AAAA,QAC3B;AAAA,MACF;AACA,WAAK,QAAQ,CAAC;AACd,axB,UAAI,UAAU,KAAK,QAAQ;AAAA,IAC7B,CAAC;AAED,IAAAF,QAAO,UAAU;AAAA;AAAA;;;AC9kBjB;AAAA,yCAAAG,UAAAC,SAAA;AAAA;AAOA,QAAM,QAAQ;AACd,QAAM,SAAS;AACf,QAAM,SAAS;AACf,QAAM,MAAM;AAKZ,aAAS,QAAQ,KAAK,IAAI;AACxB,YAAM,OAAO,OAAO,KAAK,GAAG;AAC5B,UAAI,IAAI,KAAK;AACb,aAAO,KAAK;AACV,cAAM,IAAI,KAAK;AACf,cAAM,MAAM,IAAI;AAChB,YAAI,QAAQ,MAAM;AAChB,iBAAO,GAAG;AAAA,QACZ,WAAW,OAAO,QAAQ,YAAY;AACpC,aAAG,KAAK,IAAI,KAAK,EAAE;AAAA,QACrB,WAAW,MAAM,QAAQ,GAAG,GAAG;AAC7B,aAAG,KAAK,MAAM,QAAQ,GAAG,EAAE,IAAI,GAAG,GAAG,OAAO,GAAG,IAAI;AAAA,QACrD,WAAW,OAAO,QAAQ,UAAU;AAClC,aAAG,KAAK,OAAO,GAAG,OAAO,WAAW,QAAQ,KAAK,GAAG,EAAE,IAAI;AAAA,QAC5D,OAAO;AACL,aAAG,KAAK;AAAA,QACV;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAmCA,QAAMC,UAAS,SAAU,SAAS;AAChC,UAAI,OAAO,SAAS,YAAY;AAC9B,eAAO,IAAI,KAAK,OAAO;AAAA,MACzB;AACA,WAAK,SAAS;AACd,WAAK,QAAQ,IAAI,MAAM,IAAI;AAC3B,WAAK,MAAM,IAAI,IAAI;AACnB,WAAK,SAAS,IAAI,OAAO,KAAK,OAAO,KAAK,GAAG;AAC7C,UAAI,WAAW,OAAO,YAAY,UAAU;AAE1C,YAAI,QAAQ,QAAQ;AAClB,cAAI,CAAC,QAAQ,OAAO;AAClB,oBAAQ,QAAQ,CAAC;AAAA,UACnB;AACA,cAAI,QAAQ,OAAO,SAAS;AAC1B,gBAAI,OAAO,QAAQ,OAAO,YAAY,UAAU;AAC9C,kBAAI,UAAU,QAAQ,OAAO,QAAQ,MAAM,GAAG;AAC9C,wBAAU,SAAS,QAAQ,EAAE,IAAI,MAAM,SAAS,QAAQ,EAAE;AAC1D,kBAAI,MAAM,OAAO,GAAG;AAClB,sBAAM,IAAI,MAAM,0BAA0B,QAAQ,OAAO,OAAO;AAAA,cAClE,OAAO;AACL,wBAAQ,OAAO,UAAU;AAAA,cAC3B;AAAA,YACF,WAAW,OAAO,QAAQ,OAAO,YAAY,UAAU;AACrD,oBAAM,IAAI,MAAM,gCAAgC;AAAA,YAClD;AACA,gBAAI,QAAQ,OAAO,UAAU,OAAO,QAAQ,OAAO,UAAU,KAAK;AAChE,oBAAM,IAAI,MAAM,6CAA6C;AAAA,YAC/D;AAAA,UACF;AAAA,QACF;AACA,gBAAQ,SAAS,IAAI;AAGrB,aAAK,MAAM,UAAU,KAAK,OAAO;AAAA,MACnC;AAAA,IACF;AAQA,QAAM,kBAAkB,SAAU,QAAQ;AACxC,aAAO,OAAO,OAAO,UAAU,aAAa,OAAO,SAAS,IAAI;AAAA,IAClE;AAQA,IAAAA,QAAO,SAAS,SAAU,SAAS;AACjC,aAAO,IAAIA,QAAO,OAAO;AAAA,IAC3B;AAMA,IAAAA,QAAO,YAAY,SAAU,QAAQ,SAAS;AAC5C,YAAM,OAAO,IAAIA,QAAO,OAAO;AAC/B,aAAO,KAAK,UAAU,MAAM;AAAA,IAC9B;AAOA,IAAAA,QAAO,UAAU,YAAY,SAAU,QAAQ;AAC7C,WAAK,MAAM,YAAY;AACvB,WAAK,MAAM,aAAa;AACxB,eAAS,gBAAgB,MAAM;AAC/B,aAAO,KAAK,OAAO,MAAM,QAAQ,MAAM;AAAA,IACzC;AAMA,IAAAA,QAAO,YAAY,SAAU,QAAQ,UAAU,SAAS;AACtD,UAAI,OAAO,aAAa,YAAY,CAAC,SAAS;AAE5C,kBAAU;AACV,mBAAW;AAAA,MACb;AACA,YAAM,OAAO,IAAIA,QAAO,OAAO;AAC/B,aAAO,KAAK,UAAU,QAAQ,QAAQ;AAAA,IACxC;AAsBA,IAAAA,QAAO,UAAU,YAAY,SAAU,QAAQ,UAAU;AACvD,WAAK,MAAM,YAAY;AACvB,WAAK,MAAM,aAAa;AACxB,eAAS,gBAAgB,MAAM;AAC/B,aAAO,KAAK,OAAO,MAAM,QAAQ,QAAQ;AAAA,IAC3C;AAMA,IAAAA,QAAO,cAAc,SAAU,QAAQ,SAAS;AAC9C,YAAM,OAAO,IAAIA,QAAO,OAAO;AAC/B,aAAO,KAAK,YAAY,MAAM;AAAA,IAChC;AAQA,IAAAA,QAAO,UAAU,cAAc,SAAU,QAAQ;AAC/C,WAAK,MAAM,YAAY;AACvB,WAAK,MAAM,aAAa;AACxB,eAAS,gBAAgB,MAAM;AAC/B,YAAM,MAAM,KAAK,MAAM;AACvB,YAAM,QAAQ,KAAK,OAAO;AAC1B,WAAK,MAAM,SAAS,MAAM;AAC1B,UAAI,QAAQ,KAAK,MAAM,IAAI,KAAK;AAChC,YAAM,SAAS,CAAC;AAChB,aAAO,SAAS,KAAK;AACnB,YAAI,QAAQ,KAAK,MAAM;AACvB,YAAI,OAAO,UAAU,eAAe,KAAK,OAAO,KAAK,GAAG;AACtD,kBAAQ,CAAC,MAAM,QAAQ,OAAO,KAAK,MAAM,OAAO,UAAU;AAAA,QAC5D;AACA,eAAO,KAAK,KAAK;AACjB,gBAAQ,KAAK,MAAM,IAAI,KAAK;AAAA,MAC9B;AACA,aAAO;AAAA,IACT;AAKA,IAAAD,QAAO,UAAUC;AAGjB,IAAAD,QAAO,QAAQ,SAAS;AACxB,IAAAA,QAAO,QAAQ,QAAQ;AACvB,IAAAA,QAAO,QAAQ,MAAM;AACrB,IAAAA,QAAO,QAAQ,SAAS;AACxB,IAAAA,QAAO,QAAQ,UAAU;AACzB,IAAAA,QAAO,QAAQ,SAASC;AAGxB,IAAAD,QAAO,QAAQ,UAAUC;AAAA;AAAA;;;AC1OzB,IAAAC,UAAwB;;;ACJxB,aAAwB;AAGjB,SAAS,mBAAmB;AAE/B,QAAM,iBAAwB,iBAAU,iBAAiB,sBAAsB;AAG/E,QAAM,SAAwC,cAAO;AAErD,MAAI,CAAC,QAAQ;AACT;AAAA,EACJ;AAEA,QAAM,WAAW,OAAO;AAGxB,QAAM,OAAO,SAAS,QAAQ;AAC9B,MAAI,UAAU;AAEd,MAAI,CAAC,KAAK,SAAS,WAAW,KAC1B,CAAC,KAAK,SAAS,UAAU,KACzB,CAAC,KAAK,SAAS,MAAM,KACrB,CAAC,KAAK,SAAS,eAAe,gBAAgB,IAAI,KAClD,CAAC,KAAK,SAAS,eAAe,gBAAgB,KAAK,GAAG;AACtD,IAAO,cAAO,iBAAiB,oBAAoB;AAGnD;AAAA,EACJ;AAEA,MAAI,KAAK,SAAS,WAAW,GAAG;AAC5B,cAAU,QAAQ,QAAQ,6CAA6C,EAAE;AAAA,EAC7E;AAEA,MAAI,KAAK,SAAS,UAAU,GAAG;AAC3B,cAAU,QAAQ,QAAQ,mJAAmJ,EAAE;AAC/K,cAAU,QAAQ,QAAQ,sCAAsC,EAAE;AAAA,EACtE;AAMA,MAAI,KAAK,SAAS,eAAe,gBAAgB,QAAQ,eAAe,gBAAgB,KAAK,GAAG;AAC5F,cAAU,QAAQ,QAAQ,IAAI,OAAO;AAAA,KAAW,eAAe,gBAAgB,gBAAgB,eAAe,gBAAgB;AAAA,IAAqB,GAAG,GAAG,EAAE;AAAA,EAC/J;AAEA,MAAI,YAAY,MAAM;AAClB,IAAO,cAAO,iBAAiB,oBAAoB;AACnD;AAAA,EACJ;AAIA,QAAM,WAAW,SAAS,YAAY;AACtC,QAAM,mBAAmB,SAAS,OAAO,QAAQ,EAAE,MAAM,IAAI;AAE7D,SAAO,KAAK,CAAC,gBAAsB;AAC/B,gBAAY,QAAQ,IAAW,aAAM,GAAG,GAAG,UAAU,gBAAgB,GAAG,OAAO;AAAA,EACnF,CAAC;AACL;;;AC7DA,IAAAC,UAAwB;;;ACGjB,SAAS,iBAAiB,UAAwB,cAAsB,QAAwB;AACnG,MAAI,iBAAiB;AACrB,WAAS,IAAI,cAAc,IAAI,SAAS,WAAW,KAAK;AACpD,UAAM,WAAW,SAAS,OAAO,CAAC,EAAE;AACpC,QAAI,SAAS,SAAS,MAAM,GAAG;AAC3B,uBAAiB;AACjB;AAAA,IACJ;AAAA,EACJ;AACA,SAAO;AACX;;;ACVO,SAAS,eAAe,QAAoB,UAAwB,cAA8B;AACrG,QAAM,oBAAoB,SAAS,OAAO,YAAY,EAAE,KAAK,MAAM,EAAE;AACrE,MAAI,cAAc;AAClB,MAAI,OAAO;AACX,MAAI,cAAc;AAElB,MAAI,kBAAkB,OAAO,KAAM;AAC/B,WAAO;AAAA,EACX;AAEA,MAAI,MAAM;AACN,eAAW,CAAC,GAAG,IAAI,KAAK,kBAAkB,QAAQ,GAAG;AAEjD,UAAI,MAAM,KAAK,kBAAkB,OAAO,kBAAkB,IAAI,IAAI;AAC9D;AAAA,MACJ;AACA,UAAI,SAAS,KAAM;AACf;AAAA,MACJ;AAAA,IACJ;AAEA,kBAAc,IAAK,OAAO,WAAW;AAAA,EACzC,OAAO;AACH,eAAW,CAAC,GAAG,IAAI,KAAK,kBAAkB,QAAQ,GAAG;AAEjD,UAAI,MAAM,KAAK,kBAAkB,OAAO,kBAAkB,IAAI,IAAI;AAC9D;AAAA,MACJ;AACA,UAAI,SAAS,KAAK;AACd;AAAA,MACJ;AAAA,IACJ;AAEA,kBAAc,IAAI,OAAO,WAAW;AAAA,EACxC;AAEA,SAAO;AACX;;;ACtCO,SAAS,WAAW,QAAyB;AAChD,MAAI,QAAkB,CAAC;AACvB,MAAI,aAAa,CAAC,KAAK,KAAK,GAAG;AAC/B,MAAI,cAAc,CAAC,KAAK,KAAK,GAAG;AAChC,MAAI,WAAW;AAAA,IACX,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,EACT;AAEA,WAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,QAAI,OAAO,OAAO;AAClB,QAAI,WAAW,SAAS,IAAI,GAAG;AAC3B,YAAM,KAAK,IAAI;AAAA,IACnB,WAAW,YAAY,SAAS,IAAI,GAAG;AACnC,UAAI,OAAO,MAAM,IAAI;AACrB,UAAI,SAAS,UAAU,MAAM;AACzB,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AACA,SAAO,MAAM,WAAW;AAC5B;;;ACpBA,wBAAuB;AAEhB,IAAM,mBAAmB,CAAC,MAAc,WAAsB,iBAAyB,YAAoB;AAE9G,QAAM,SAAS,IAAI,yBAAO;AAAA,IAEtB,QAAQ;AAAA,MACJ,YAAY;AAAA,MACZ,MAAM;AAAA,IACV;AAAA,IACA,KAAK;AAAA,MACD,eAAe;AAAA,IACnB;AAAA,EACJ,CAAC;AAGD,oBAAkB,gBAAgB,QAAQ,KAAK,EAAE;AAIjD,QAAM,qBAAqB,UAAU,MAAM,OAAO;AAClD,QAAM,0BAA0B,UAAU,MAAM;AAChD,QAAM,mBAAmB,UAAU,IAAI,OAAO;AAC9C,QAAM,wBAAwB,UAAU,IAAI;AAG5C,QAAM,kBAAkB,CAAC,WAAmB,aAAqB,SAAiB,cAAsB;AACpG,WAAQ,cAAc,sBAAsB,gBAAgB,2BAA2B,YAAY,oBAAoB,cAAc;AAAA,EACzI;AAIA,QAAM,gBAAgB,OAAO,UAAU,SAAS,IAAI;AACpD,MAAI,gBAAgB;AAGpB,gBAAc,SAAS,QAAQ,CAAC,UAAe;AAC3C,QAAI,MAAM,SAAS,YAAY;AAC3B,UAAI,MAAM,UAAU,SAAS,GAAG;AAC5B,cAAM,UAAU,QAAQ,CAAC,aAAkB;AACvC,cAAI,SAAS,KAAK,SAAS,mBAAmB,gBAAgB,SAAS,IAAI,MAAM,MAAM,SAAS,IAAI,MAAM,QAAQ,SAAS,IAAI,IAAI,MAAM,SAAS,IAAI,IAAI,MAAM,GAAG;AAC/J,4BAAgB;AAAA,UACpB;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,IACJ,WAAW,MAAM,SAAS,UAAU;AAChC,UAAI,MAAM,KAAK,SAAS,mBAAmB,gBAAgB,MAAM,KAAK,IAAI,MAAM,MAAM,MAAM,KAAK,IAAI,MAAM,QAAQ,MAAM,KAAK,IAAI,IAAI,MAAM,MAAM,KAAK,IAAI,IAAI,MAAM,GAAG;AACpK,wBAAgB;AAAA,MACpB;AAAA,IACJ,WAAW,MAAM,SAAS,uBAAuB;AAC7C,UAAI,MAAM,WAAW,SAAS,UAAU;AACpC,YAAI,MAAM,WAAW,KAAK,SAAS,mBAAmB,gBAAgB,MAAM,WAAW,KAAK,IAAI,MAAM,MAAM,MAAM,WAAW,KAAK,IAAI,MAAM,QAAQ,MAAM,WAAW,KAAK,IAAI,IAAI,MAAM,MAAM,WAAW,KAAK,IAAI,IAAI,MAAM,GAAG;AAC3N,0BAAgB;AAAA,QACpB;AAAA,MACJ;AAAA,IACJ;AAAA,EA0BJ,CAAC;AAiBD,SAAO;AACX;;;AJ/FO,SAAS,8BAA8B,MAAc;AACxD,QAAM,SAAwC,eAAO;AACrD,MAAI,CAAC,QAAQ;AACT;AAAA,EACJ;AAEA,QAAM,WAAW,OAAO;AACxB,MAAI,SAAS,eAAe,OAAO;AAC/B;AAAA,EACJ;AAEA,QAAM,iBAAwB,kBAAU,iBAAiB,sBAAsB;AAM/E,QAAM,YAAY,OAAO;AACzB,MAAI,cAAsB,SAAS,QAAQ,SAAS;AACpD,QAAM,gBAAgB,iBAAiB,SAAS,UAAU,WAAW,aAAa,SAAS,QAAQ,CAAC;AAEpG,MAAI,oBAAoB,YAAY,WAAW,KAAK,EAAE,EAAE,WAAW,KAAK,EAAE;AAC1E,MAAI,eAAe,UAAU,OAAO;AACpC,QAAM,cAAc,eAAe,QAAQ,UAAU,YAAY;AAGjE,QAAM,iBAA0B,SAAS,oBAAoB,SAAS,oCAAqC,CAAC,eAAe,iBAAiB,eAAe;AAC3J,QAAM,qBAA8B,SAAS,wBAAwB,SAAS,0CAA2C,CAAC,eAAe,mBAAmB,qBAAqB,eAAe,mBAAmB;AACnN,QAAM,kBAA2B,SAAS,qBAAqB,SAAS,oCAAqC,CAAC,eAAe,kBAAkB,eAAe;AAE9J,MAAI,WAAW;AAGf,QAAM,2BAA2B,CAAC,4BAA4B,mCAAmC,yCAAyC,iCAAiC;AAC3K,sBAAoB,yBAAyB,SAAS,IAAI,IAAI,kBAAkB;AAChF,gBAAc,yBAAyB,SAAS,IAAI,IAAI,sBAAsB;AAC9E,aAAW,yBAAyB,SAAS,IAAI,IAAI,IAAI;AAEzD,MAAI,iBAAiB;AACrB,MAAI,UAAU;AAId,MAAI,CAAC,WAAW,WAAW,GAAG;AAC1B,IAAO,eAAO,iBAAiB,+CAA+C;AAC9E;AAAA,EACJ;AAEA,MAAI,YAAY,SAAS,GAAG,GAAG;AAC3B,IAAO,eAAO,iBAAiB,sCAAsC;AACrE;AAAA,EACJ;AAGA,QAAM,8BAEF;AAAA,IAGA,sBAAsB,iBAAiB,UAAU,eAAe,GAAG,GAAG;AAAA,IAGtE,mBAAmB,iBAAiB,UAAU,iBAAiB,UAAU,eAAe,GAAG,GAAG,IAAI,GAAG,GAAG;AAAA,IAGxG,qBAAqB,iBAAiB,UAAU,cAAc,GAAG;AAAA,EACrE;AAEA,iBAAe,4BAA4B,kBAAkB;AAG7D,SAAO,KAAK,CAAC,gBAAgC;AAGzC,QAAI,YAAY,KAAK,EAAE,WAAW,GAAG;AACjC,0BAAoB,eAAe,gBAAgB;AACnD,oBAAc,eAAe,gBAAgB;AAC7C,iBAAW;AAAA,IACf;AAEA,QAAI,iBAAiB;AACrB,QAAI,kBAAkB;AAEtB,QAAI,gBAAgB;AAChB,uBAAiB;AACjB,gBAAU;AACV,uBAAiB;AACjB,wBAAkB;AAAA,IACtB;AAKA,QAAI,uBAAuB;AAC3B,QAAI,iBAAiB;AACjB,UAAI,qBAAqB,YAAY;AAErC,UAAI,CAAC,gBAAgB;AAEjB,YAAI,WAAW,GAAG;AAAA;AAElB,YAAI,yBAAyB,SAAS,IAAI,GAAG;AACzC,+BAAqB,YAAY,wBAAwB;AACzD,qBAAW;AAAA,QACf;AAEA,oBAAY;AAAA,UACR,IAAW,iBAAS,eAAe,UAAU,CAAC;AAAA,UAC9C,GAAG,WAAW,cAAc;AAAA;AAAA,QAGhC;AACA,sBAAc;AAAA,MAClB,OAAO;AACH,sBAAc;AAAA,MAClB;AAAA,IACJ;AAEA,mBAAe,UAAU,QAAQ,CAAC,aAA2B;AAGzD,iBAAW,SAAS,WAAW,wBAAwB,iBAAiB,EAAE,WAAW,kBAAkB,WAAW;AAElH,UAAI,mBAAmB,gBAAgB;AAGnC,YAAI,qBAAqB,CAAC;AAC1B,YAAI,mBAAmB,SAAS,QAAQ,WAAW;AACnD,eAAO,qBAAqB,IAAI;AAC5B,6BAAmB,KAAK,gBAAgB;AACxC,6BAAmB,SAAS,QAAQ,aAAa,mBAAmB,CAAC;AAAA,QACzE;AAEA,2BAAmB,QAAQ,CAAAC,sBAAoB;AAG3C,cAAI,aAAa,SAAS,YAAY,KAAKA,iBAAgB;AAG3D,cAAI,eAAe,IAAI;AACnB,uBAAW,GAAG,SAAS,UAAU,GAAG,UAAU,KAAK,SAAS,UAAU,aAAa,CAAC;AAAA,UACxF;AAAA,QACJ,CAAC;AAAA,MACL;AAEA,kBAAY;AAAA,QACR,IAAW,iBAAS,eAAe,UAAU,CAAC;AAAA,QAC9C,GAAG,cAAc,iBAAiB,iBAAiB,WAAW,UAAU;AAAA;AAAA,MAC5E;AAAA,IACJ,CAAC;AAED,QAAI,yBAAyB,SAAS,IAAI,KAAK,iBAAiB;AAC5D,kBAAY;AAAA,QACR,IAAW,iBAAS,eAAe,UAAU,CAAC;AAAA,QAC9C,QAAQ;AAAA;AAAA,MACZ;AAAA,IACJ;AAGA,QAAI,oBAAoB;AACpB,UAAI,WAAW;AAEf,UAAI,CAAC,eAAe,mBAAmB,uBAAuB;AAC1D,oBAAY;AAAA,MAChB;AAEA,kBAAY;AAAA,QACR,IAAW,iBAAS,eAAe,UAAU,CAAC;AAAA,QAC9C,GAAG,cAAc,iBAAiB,yCAAyC,aAAa,UAAU;AAAA;AAAA,MACtG;AAAA,IACJ;AAAA,EAEJ,CAAC;AACL;;;AFtKA,SAAS,SAAS,SAAiD;AAC/D,QAAM,WAA8B,iBAAS,gBAAgB,kCAAkC,CAAC,SAAuB;AACnH,QAAI,SAAS,QAAW;AACpB,aAAO;AAAA,IACX;AAEA,kCAA8B,IAAI;AAAA,EACtC,CAAC;AAED,QAAM,qBAAwC,iBAAS,gBAAgB,qDAAqD,CAAC,SAAuB;AAChJ,QAAI,SAAS,QAAW;AACpB,aAAO;AAAA,IACX;AAEA,kCAA8B,IAAI;AAAA,EACtC,CAAC;AAED,QAAM,kBAAqC,iBAAS,gBAAgB,kDAAkD,CAAC,SAAuB;AAC1I,QAAI,SAAS,QAAW;AACpB,aAAO;AAAA,IACX;AAEA,kCAA8B,IAAI;AAAA,EACtC,CAAC;AAED,QAAM,iBAAoC,iBAAS,gBAAgB,iDAAiD,CAAC,SAAuB;AACxI,QAAI,SAAS,QAAW;AACpB,aAAO;AAAA,IACX;AAEA,kCAA8B,IAAI;AAAA,EACtC,CAAC;AAED,QAAM,kBAAqC,iBAAS,gBAAgB,kDAAkD,MAAY;AAC9H,qBAAiB;AAAA,EACrB,CAAC;AAED,QAAM,2BAA8C,iBAAS,gBAAgB,2DAA2D,CAAC,SAAuB;AAC5J,QAAI,SAAS,QAAW;AACpB,aAAO;AAAA,IACX;AAEA,kCAA8B,IAAI;AAAA,EACtC,CAAC;AAED,QAAM,uCAA0D,iBAAS,gBAAgB,wEAAwE,CAAC,SAAuB;AACrL,QAAI,SAAS,QAAW;AACpB,aAAO;AAAA,IACX;AAEA,kCAA8B,IAAI;AAAA,EACtC,CAAC;AAED,QAAM,kCAAqD,iBAAS,gBAAgB,kEAAkE,CAAC,SAAuB;AAC1K,QAAI,SAAS,QAAW;AACpB,aAAO;AAAA,IACX;AAEA,kCAA8B,IAAI;AAAA,EACtC,CAAC;AAED,QAAM,kCAAqD,iBAAS,gBAAgB,kEAAkE,CAAC,SAAuB;AAE1K,QAAI,SAAS,QAAW;AACpB,aAAO;AAAA,IACX;AAEA,kCAA8B,IAAI;AAAA,EACtC,CAAC;AAED,UAAQ,cAAc,KAAK,QAAQ;AACnC,UAAQ,cAAc,KAAK,kBAAkB;AAC7C,UAAQ,cAAc,KAAK,eAAe;AAC1C,UAAQ,cAAc,KAAK,cAAc;AACzC,UAAQ,cAAc,KAAK,eAAe;AAC1C,UAAQ,cAAc,KAAK,wBAAwB;AACnD,UAAQ,cAAc,KAAK,oCAAoC;AAC/D,UAAQ,cAAc,KAAK,+BAA+B;AAC1D,UAAQ,cAAc,KAAK,+BAA+B;AAE9D;AAEA,QAAQ,WAAW;AAGnB,SAAS,aAAa;AAAE;AAExB,OAAO,UAAU;AAAA,EACb;AAAA,EACA;AACJ;",
  "names": ["exports", "module", "ch", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "Position", "exports", "module", "exports", "module", "result", "exports", "module", "exports", "module", "result", "expr", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "node", "exports", "module", "exports", "module", "exports", "module", "require_utils", "exports", "module", "exports", "module", "exports", "module", "Position", "require_tokens", "exports", "module", "exports", "module", "exports", "module", "Node", "exports", "module", "require_array", "exports", "module", "Array", "exports", "module", "exports", "module", "exports", "module", "require_attribute", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "require_statement", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "Boolean", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "Declaration", "require_class", "exports", "module", "exports", "module", "exports", "module", "ClassConstant", "exports", "module", "exports", "module", "require_comment", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "Declare", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "Encapsed", "exports", "module", "exports", "module", "require_enum", "exports", "module", "exports", "module", "exports", "module", "Error", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "require_function", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "Identifier", "require_if", "exports", "module", "exports", "module", "require", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "Reference", "exports", "module", "Name", "require_namespace", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "ParentReference", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "require_property", "exports", "module", "exports", "module", "exports", "module", "PropertyStatement", "exports", "module", "exports", "module", "exports", "module", "SelfReference", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "StaticReference", "exports", "module", "String", "require_switch", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "require_try", "exports", "module", "exports", "module", "TypeReference", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "UseItem", "require_variable", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "Position", "docs", "exports", "module", "Engine", "vscode", "vscode", "selectedVarIndex"]
}
